#separator:tab
#html:true
What's the definition of the dot product?	<br>\[\vec x \cdot \vec y = \sum_{i=1}^n x_iy_i,\ \ \vec x, \vec y \in \mathbb{R}^n\]
What are some properties of the transpose of a matrix?	1. Transpose of a transpose matrix is the original matrix:&nbsp;\((A^T)^T = A\)<br><div>2. Transpose of product:&nbsp;\((AB)^T = B^T A^T\)<br></div><div>3. Transpose of sum:&nbsp;\((A+B)^T = A^T + B^T\)<br></div>
What's a symmetric matrix? An anti-symmetric?	\(A^T = A\)<br><div>\(A^T = -A\)<br></div>
What's a way of expressing a matrix&nbsp;\(A\)&nbsp;in terms of its transpose?	\(A = \frac{1}{2}(A+A^T)+\frac{1}{2}(A-A^T)\)<br>
What is the norm of a vector, intuitively?	"It's the magnitude, or ""length"" of a vector."
What is the formal definition of a norm?	<div>A norm is any function&nbsp;\(f: \mathbb{R}^n \to \mathbb{R}\)&nbsp;with the following properties:</div>1. It's always nonnegative:&nbsp;\(\forall \vec x \in \mathbb{R}^n, f(\vec x) \geq 0\)<br><div>2. The function is zero only at the origin:  \(f(\vec x) = 0 \iff \vec x= \vec 0\)</div><div>3. It preserves scalar multiplication:&nbsp;\(\forall \vec x \in \mathbb{R}^n, t \in \mathbb{R}, f(t \vec x) = |t|f(\vec x)\)<br></div><div>4. Triangle inequality:&nbsp;\(\forall \vec x, \vec y \in \mathbb{R}^n, f(\vec x+ \vec y) \leq f(\vec x) + f(\vec y)\)</div>
How is a p-norm defined? What are two special cases?	For any vector&nbsp;\(\mathbf{x}\),<br><div>\[\|x\|_p = \Bigg(\sum_{i=1}^n |x_i|^p\Bigg)^\frac{1}{p}\]</div><div>Special cases are the Euclidean&nbsp;\(\ell_2\)&nbsp;and&nbsp;\(\ell_1\)&nbsp;norms:</div><div>\[\|x\|_2 = \sqrt{\Bigg(\sum_{i=1}^n x_i^2 \Bigg)}\]<br></div><div>\[\|x\|_1 = \sum_{i=1}^n |x_i|\]<br></div>
What is the Frobenius norm for matrices?	\(\|A\|_F = \sqrt{\text{tr}(A^T A)}\)
How do we define a linearly independent set of vectors?	\[S = \{x_1, x_2, ... , x_n\} \subset \mathbb{R}^n\]is linearly independent iff<div><br>\[(\exists!) x_n = \sum_{i=1}^{n-1} \alpha_i x_i , \alpha_i \in\mathbb{R}\]</div><div>In other words, it's a set of vectors in which none of the vectors can be represented as a linear combination of the other vectors. A linear combination is a sum of terms multiplied by real coefficients.<br></div>
What is the rank of a matrix?	The rank of a matrix is the size of the largest set of linearly independent rows/columns (one and the same in this context).&nbsp;
What are a few <u>algebraic</u> properties of the rank of a matrix?	<div>Let&nbsp;\(A \in \mathbb{R}^{m \times n}, B \in \mathbb{R}^{n \times p}\). Then we have the following about their ranks:<br></div><div>1. Rank &amp; matrix dimensions:&nbsp;\(\text{rank}(A) \leq \min(m, n)\)<br></div><div>2. Rank of transpose:&nbsp;\(\text{rank}(A) = \text{rank}(A^T)\)<br></div><div>3. Rank of product:&nbsp;\(\text{rank}(AB) \leq \min(\text{rank}(A), \text{rank}(B))\)<br></div><div>4. Rank triangle inequality:&nbsp;\(\text{rank}(A+B) \leq \text{rank}(A)+\text{rank}(B)\)<br></div>
What is a singular matrix?	A singular matrix is a square matrix that does not have an inverse. Its determinant is 0, and it has columns that are linearly dependent.
How is the inverse of a matrix defined?	Let [$] A \in \mathbb{R}^{n x n} [/$], A is full rank (also called invertible, non-singular).<div><br></div><div>Its inverse satisfies the condition:<br><div>[$] A^{-1}A = I_n = AA^{-1} [/$]<br></div></div>
When are two vectors orthogonal?	[$] x, y \in \Re^n [/$] are orthogonal if&nbsp;[$] x \cdot y = 0[/$] (their dot product is 0)<br>
What is a normalised vector?	\(\vec x \in \mathbb{R}^n\)&nbsp;is normalised if&nbsp;\(\|x\|_2 = 1\)&nbsp;(its length&nbsp;is 1).<br>
What is an orthogonal <b>matrix</b>?	\(U \in \mathbb{R}^{m \times n} \)&nbsp;is orthogonal if all its columns are orthogonal to each other and normalised (orthonormal columns).<br>
What's one property of an orthogonal matrix? <i>(Hint: to do with its transpose)</i>	If U is orthogonal,&nbsp;\(U^TU = I = UU^T\)&nbsp;(an orthogonal matrix's inverse is its transpose)
What is the span of a set of vectors?	[$] span({x_1, x_2, ... , x_n}) = \{ v : v = \sum_{i=1}^n \alpha_ix_i, \alpha_i \in \Re\}[/$]<br>
What is the span of a set of vectors that are linearly independent?	It's the entire set on which they're defined, e.g.&nbsp;\(n\)&nbsp;linearly independent n-dimensional vectors span&nbsp;\(\mathbb{R}^n\).
What is the <b>projection </b>of a vector onto a span?	Let&nbsp;\(S = \{\vec x_1, \vec x_2, ..., \vec x_n\}\)&nbsp;be a span; the projection of a vector&nbsp;\(\vec y\)&nbsp;onto this span is:\[\mathrm{Proj}(\vec y; S) = \mathrm{argmin}_{\vec v \in S} \|\vec y- \vec v\|_2\]<br>
What is the <b>range </b>of a matrix?	The span of its columns.<div><br><div>Let&nbsp;\(A \in \mathbb{R}^{m x n}\). Its range is:</div><div>\[R(A) = \{ v \in \mathbb{R}^m : v = Ax, x \in \mathbb{R}^n\}\]</div></div><div>Plainly: the range of&nbsp;\(A\)&nbsp;is the set of vectors&nbsp;\(v\)&nbsp;that can be expressed as a linear combination of its columns.&nbsp;</div>
What is the <b>projection </b>of a vector onto a <b>range</b>?	It is the vector in that range whose distance to the initial vector is smallest.\[\text{Proj}(y; R(A)) = \text{argmin}_{v \in R(A)} \|y-v\|_2 = A(A^TA)^{-1}A^Ty\]<br><br>
What is the <b>null space</b> of a matrix?	The null space of a matrix&nbsp;\(A \in \mathbb{R}^{mxn}\)&nbsp;is the set of vectors it transforms to&nbsp;\(\vec 0\):<div>\[N(A) = \{\vec x \in \mathbb{R}^n | A \vec x = 0\}\]<br></div>
What is one property of the <b>nullspace </b>of a matrix in relation to its reduced row-echelon form?	They are the same:&nbsp;\(N(A) = N(\text{rref}(A))\)
What is the relationship between the&nbsp;<b>nullspace </b>of a matrix<b>&nbsp;</b>and the&nbsp;<b>range of its transpose</b>?	They are <b>orthogonal complements</b>, which means they are disjoint and span&nbsp;&nbsp;\(\mathbb{R}^n\)&nbsp;.<div><br>\[R(A^T) \cap N(A) = \emptyset \\\]\[R(A^T) = N(A)^\perp\]</div>
What is an intuition for the determinant of a matrix?	<div>In 2D, a determinant measures by how much a matrix/linear transformation scales an area. In 3D, it's the volume.</div>
What is the determinant of the identity matrix?	[$] |I| = 1 [/$]<br>
What is the recursive definition of a determinant?	\(\det(A) = \sum_{i=1}^n (-1)^{i+j}a_{ij} \det(A_{\backslash i \backslash j})\)<br><div><br></div>\(A_{\backslash i \backslash j}\)&nbsp;is the matrix that results from deleting the&nbsp;\(i\)th row and the&nbsp;\(j\)th column of&nbsp;\(A\).
What is the classical adjoint/adjugate/adjunct of a matrix A?	"It's a matrix where each entry is of the form:\[\text{adj}(A)_{ij} = (-1)^{i+j} \det(A_{\backslash j \backslash i})\]where&nbsp;\(\backslash j\)&nbsp;refers to ""the matrix without the&nbsp;\(j\)-th column""."
What is the value of the determinant of a&nbsp;\(3 \times 3\)&nbsp;matrix?	"\[\begin{aligned}
\operatorname{det}(M) &amp; =\operatorname{det}\left[\begin{array}{lll}
a_{11} &amp; a_{12} &amp; a_{13} \\
a_{21} &amp; a_{22} &amp; a_{23} \\
a_{31} &amp; a_{32} &amp; a_{33}
\end{array}\right] \\
&amp; =a_{11} a_{22} a_{33}+a_{12} a_{23} a_{31}+a_{13} a_{21} a_{32}-a_{31} a_{22} a_{13}-a_{32} a_{23} a_{11}-a_{33} a_{21} a_{12}
\end{aligned}\]<br>"
What is the value of the determinant of a&nbsp;[$]2 \times 2[/$] matrix?	[$] \begin{vmatrix}<br>\begin{bmatrix}<br>&nbsp;a_{11} &amp;&nbsp;&nbsp;a_{12} \\<br>&nbsp;a_{21} &amp;&nbsp;&nbsp;a_{22}<br>\end{bmatrix}<br>\end{vmatrix} = a_{11}a_{22} - a_{12}a_{21}&nbsp;[/$]<br>
What is the value of the determinant of a single-element matrix?	The value of that element.
<div>What is the quadratic form of a matrix?</div>	For any&nbsp;\(A \in \mathbb{R}^{n \times n}\),&nbsp;\(\vec x \in \mathbb{R}^n\), we have:<div>\(\vec x^TA \vec x = \sum_{i=1}^n x_i(Ax)_i = \sum_{i=1}^n x_i (\sum_{j=1}^n A_{ij}x_j) = \sum_{i=1}^n \sum_{j=1}^n A_{ij}x_ix_j\)<br></div><div><br></div><div>Furthermore, if the matrix&nbsp;\(A\)&nbsp;is symmetric:</div><div>\(x^TAx = x^T(\frac{1}{2}A + \frac{1}{2}A^T)x\)<br></div>
What is a positive definite matrix? What is a positive semidefinite matrix?	A positive definite matrix is a symmetric matrix such that:<div>\[(\forall) x \in \mathbb{R}^n\ \text{non-zero,}\  x^TAx &gt; 0\]</div><div>The set of such matrices is denoted&nbsp;\(S_{++}^n\).<div>A positive semidefinite matrix is a symmetric matrix such that:</div><div>\[(\forall) x \in \mathbb{R}^n\ \text{non-zero,}\  x^TAx \geq 0\]</div><div>The set of such matrices is denoted&nbsp;\(S_{+}^n\).</div></div>
What is a negative definite matrix? What is a negative semidefinite matrix?	A negative definite matrix is a symmetric matrix such that:<div><br></div>\((\forall) x \in \mathbb{R}^n\)&nbsp;non-zero, \(x^TAx &lt; 0\)<div><div><br></div><div>A negative semidefinite matrix is a symmetric matrix such that:<br></div></div><div><br></div>\((\forall) x \in \mathbb{R}^n\)&nbsp;non-zero,&nbsp;\(x^TAx \leq 0\)
What is a property of positive/negative definite matrices regarding their rank?&nbsp;	They are full rank matrices.
What is the definition of an eigenvector and an eigenvalue for a given square matrix&nbsp;\(A\)?	<div>\(A\in \mathbb{R}^{n \times n}\),&nbsp;\(\lambda \in \mathbb{C}\),&nbsp;\(\vec x \in \mathbb{C}^n\)</div><div><br></div>\(\lambda\)&nbsp;and&nbsp;\(\vec x\)&nbsp;are eigenvalues and eigenvectors, respectively if:<div>\[A \vec x = \lambda \vec x \iff (A - \lambda I_n) \vec x = \vec 0\]</div><div>Additionally, an intuition for this is that an eigenvector is a vector in that matrix's column space/range that only gets scaled when the matrix is multiplied by it.</div><div><br></div><div>If we see&nbsp;\(A \vec x\)&nbsp;as a linear transformation,&nbsp;\(A\)&nbsp;only scales the vector, it does not rotate it.</div>
What are some properties of the eigenvectors and eigenvalues?<br>(hints: trace, determinant, rank, eigenvalues of a diagonal matrix)	<div>\[\mathrm{tr}A = \sum_{i=1}^n \lambda_i\]</div><div>\[|A| = \prod_{i=1}^n \lambda_i\]</div><div>\[\mathrm{rank}(A) = |\{\lambda_i :  \lambda_i \neq 0\}|\]</div><div>\[Ax = \lambda x \Rightarrow A^{-1}x = \frac{1}{\lambda}x\]</div><div>\[A = \mathrm{diag}(d_1, d_2, ..., d_n) = \mathrm{diag}(\lambda_1, \lambda_2, ..., \lambda_n)\]</div>
What is an indefinite matrix?	Any matrix for which&nbsp;\((\exists) x_1, x_2 \in \mathbb{R}^n\)&nbsp;such that:<div>\[\begin{aligned}x_1^TAx_1 &amp;&gt; 0 \\x_2^TAx_2 &amp;&lt; 0\end{aligned}\]</div>
What is a linear subspace of&nbsp;\(\mathbb{R}^n\)?	A linear subspace is a set of vectors&nbsp;\(\mathbb{V}\)&nbsp;included in&nbsp;\(\mathbb{R}^n\)&nbsp;that is:<div><div><br></div><div>1. Closed under scalar multiplication:</div><div>\(\vec v \in \mathbb{V} \implies c \vec v \in \mathbb{V}, (\forall) c \in \mathbb{R}\)<br></div><br><div>2. Closed under vector addition:</div><div>\(\vec u, \vec v \in \mathbb{V}, \vec u + \vec v \in \mathbb{V}\)<br></div><br><div>3. Inclusive of&nbsp;\(\vec 0\)&nbsp;.</div></div>
What is the intuition for the basis of a subspace?	It is the minimum set of vectors that spans the subspace (no redundancy).
What is the definition of a basis?	<div>A basis is a set of linearly independent vectors which span the entirety of a particular vector space. More formally, let&nbsp;\(\mathbb{S} = \{\vec v_1,\vec v_2, ..., \vec v_n \}\)&nbsp;be a set of linearly independent vectors.&nbsp;If&nbsp;\(\mathbb{V}\)&nbsp;is a linear subspace,&nbsp;\(\mathbb{S}\)&nbsp;is its basis if&nbsp;\(\mathbb{V} = span(\mathbb{S})\).</div>
What is the Cauchy-Schwartz inequality for vectors?	"<div><div>\(|\vec x \cdot \vec y| \leq \|\vec x\| \cdot \|\vec y\|,\ (\forall) x, y \in \mathbb{R}^n\)</div><div></div><div></div><div><br></div><div><span style=""color: rgb(5, 1, 1);"">They're only equal if:&nbsp;</span>\(|\vec x \cdot \vec y| = \|\vec x\| \cdot \|\vec y\| \iff \vec x = c\vec y, c \in \mathbb{R}\)<br></div><div></div><div><span style=""color: rgb(5, 1, 1);"">This is because the dot product also includes&nbsp;</span>\(\cos \theta\)<span style=""color: rgb(5, 1, 1);"">&nbsp;which is always less than or equal to 1!</span></div></div><div><br></div><div><br></div>"
How can the dot product of two vectors be expressed in terms of their angle?	\(\vec a \cdot \vec b = \|a\| \cdot \|b\| \cdot \cos\theta\)<br>
What is the geometric interpretation of the cross product of two vectors in&nbsp;\(\mathbb{R}^3\)?	<div>It's the vector which is:</div><div>- perpendicular in direction to the parallelogram that the initial vectors describe, using the right-hand rule</div><div>- equal in length to the area of the parallelogram</div>
What is an expression of the cross product of two vectors in terms of their angle?	\(\vec a \times \vec b = \|\vec a\| \cdot \|\vec b\| \cdot \sin\theta\)
What is a linear transformation?	<div>\(T:\mathbb{R}^n \rightarrow \mathbb{R}^m\)&nbsp;is a linear transformation if&nbsp;\((\forall) \vec a, \vec b \in \mathbb{R}^n\):</div><div>\[\begin{align} T(\vec a + \vec b) &amp;= T(\vec a)+T(\vec b) \\ T(c\vec a) &amp;= cT(\vec a), (\forall) c \in \mathbb{R}\end{align}\]</div>
How can we express a linear transformation of a vector in terms of a matrix?	All linear transformations can be expressed as a matrix-vector multiplication. Conversely, all matrix-vector mutliplications are linear transformations (apply the definition to prove).<div><br></div><div>[$] T:\mathbb{R}^m \rightarrow \mathbb{R}^n[/$]<br></div><div>[$] T(\overrightarrow x) = A\overrightarrow x [/$]<br></div>
What is the standard basis for&nbsp;\(\mathbb{R}^n\)?	<div>The standard basis is a set of n orthonormal vectors that span the entirety of&nbsp;\(\mathbb{R}^n\). They actually form the identity matrix with n dimensions:</div><div>\[I_n = \begin{bmatrix}1 &amp; 0 &amp; \dots &amp; 0 \\0 &amp; 1 &amp; \dots &amp; 0 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\0 &amp; 0 &amp; \dots &amp; 1\end{bmatrix} = \begin{bmatrix}| &amp; | &amp; \dots &amp; | \\\vec e_1 &amp; \vec e_2 &amp; \dots &amp; \vec e_n \\| &amp; | &amp; \dots &amp; |\end{bmatrix}\]</div>The columns&nbsp;\(\{\vec e_1, \vec e_2, ..., \vec e_n\}\)&nbsp;form the standard basis for&nbsp;\(\mathbb{R}^n\).
What is the image of a transformation? What is the preimage of a set under a transformation T?	Let&nbsp;\(T: \mathbb{X} \rightarrow \mathbb{Y},\ \mathbb{A} \subset \mathbb{X},\ \mathbb{S} \subset \mathbb{Y}\)&nbsp;be a transformation. Then:<div><br>\[\text{Im}(T) = T(\mathbb{A}) = \{ T(\vec x) | \vec x \in \mathbb{A} \}\]<br></div><div>\[\text{Preim}(T, \mathbb{S})=T^{-1}(\mathbb{S}) = \{\vec x \in \mathbb{X} | T(\vec x) \in \mathbb{S}\}\]<br></div>
What is the kernel of a transformation?	\[\text{kernel}(T) = \{\vec x \in \mathbb{R}^n | T(\vec x) = \vec 0 \}\]<br>
How do transformations behave under addition, multiplication with a scalar?	[$] (S+T)(\overrightarrow x) = S(\overrightarrow x) + T(\overrightarrow x)[/$]<br><div>[$] (cS)(\overrightarrow x) = cS(\overrightarrow x) [/$]</div>
What's an intuition for what vector projection is?	"Projecting a vector onto a line is similar to the shadow when shining a light perpendicularly on an object. You can also see it as how much of the vector is ""going"" in a certain direction."
How do you normalise a vector?	<div>For any vector&nbsp;\(\vec v \in \mathbb{R}^n, \|\vec v\| \neq 1\), normalising it is done as:&nbsp;</div><div>\[\hat{u} = \frac{1}{||v||}\vec v\]</div>
What are the values for the trigonometric functions for 30-, 45-, 60-degree angles?	"<pre>[latex]<pre>\begin{center}
\begin{tabular}{ |c|c|c|c| } 
\hline 
 $\theta$ &amp; $\frac{\pi}{6}$ &amp; $\frac{\pi}{4}$ &amp; $\frac{\pi}{3}$ \\  </pre><pre>\hline</pre><pre> $sin \theta$ &amp; $\frac{1}{2}$ &amp; $\frac{\sqrt{2}}{2}$ &amp; $\frac{\sqrt{3}}{2}$ \\</pre><pre> $cos \theta$ &amp; $\frac{\sqrt{3}}{2}$ &amp; $\frac{\sqrt{2}}{2}$ &amp; $\frac{1}{2}$ \\
 $tan \theta$ &amp; $\frac{\sqrt{3}}{3}$ &amp; 1 &amp; $\sqrt{3}$ \\
 $ctg \theta$ &amp; $\sqrt{3}$ &amp; 1 &amp; $\frac{\sqrt{3}}{3}$ \\
 \hline
\end{tabular}&nbsp;\end{center}</pre>[/latex]<br></pre>"
What is one way to find out the values of trig functions on commonly used angles using a concept from linear algebra?	Nifty: if you forget the values for&nbsp;\(sin\theta, cos\theta, tan\theta, cot \theta\)&nbsp;for common&nbsp;\(\theta \in \{30^{\circ}, 45^{\circ}, 60^{\circ}\}\), you can re-derive them using the formula for the dot product and vectors which form those angles. For example,&nbsp;<div><br><div>\[\cos45^{\circ} = \frac{\begin{bmatrix} 1 \\ 0 \end{bmatrix} \cdot \begin{bmatrix} 1 \\ 1 \end{bmatrix}}{\Bigg\|\begin{bmatrix} 1 \\ 0 \end{bmatrix}\Bigg\| \cdot \Bigg\|\begin{bmatrix} 1 \\ 1 \end{bmatrix}\Bigg\|} = \frac{1}{\sqrt2}\]<br></div></div>
1. What is high bias?<div>2. What is high variance?</div>	"1. High bias means a model is underfitting the training data.<div>2. High variance means a model is overfitting the training data, i.e. the accuracy on the training data is high, but it is low on the test data.<br><div>---</div><div><img src=""Screenshot_2020-12-25_at_18.33.57.png""><br></div></div>"
What are the equations for backward propagation on a neural network?	"[$]&nbsp;<span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\begin</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgb(209, 148, 158); background-color: rgba(15, 15, 15, 0.3);"">aligned</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">
dZ^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> </span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">&amp;</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">= dA^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> * g'^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">(Z^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">) </span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\\</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">
dW^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> </span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">&amp;</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">= </span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\frac</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">1</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">m</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">dZ^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> A^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l-1</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">T</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> </span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\\</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">
db^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> </span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">&amp;</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">= </span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\frac</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">1</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">m</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> </span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\sum</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> dZ^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> </span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\\</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">
dA^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l-1</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);""> </span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">&amp;</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">= W^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">T</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">dZ^</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">[</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">l</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">]</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">
</span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\end</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgb(209, 148, 158); background-color: rgba(15, 15, 15, 0.3);"">aligned</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}</span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\ </span><span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);"">\text</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">{</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">vectorised</span><span style=""color: rgba(255, 255, 255, 0.9); background-color: rgba(15, 15, 15, 0.3);"">}&nbsp;</span>[/$]<br>"
What are the equations for forward propagation on a neural network?	"\[\begin{aligned} Z^{[l]} &amp;= W^{[l]} A^{[l-1]} + b^{[l]} \\ A^{[l]} &amp;= g^{[l]}(Z^{[l]})\end{aligned}\]<span style=""color: rgb(189, 224, 82); background-color: rgba(15, 15, 15, 0.3);""><br></span><br>"
What is the sigmoid function?	\[\sigma(x) = \frac{1}{1+e^{-x}}\]<br>
What is an activation function?	An activation function is a typically non-linear function that takes the linear computation of a neuron and outputs its final activation.
What are some common activation functions? Can you picture their graphs?	1. Sigmoid (squashed S ranging (0, 1))<div>2. ReLU&nbsp;</div><div>3. tanh (squashed S ranging (-1, 1))</div>
What is the ReLU function?	The rectified linear unit:<div>[$] ReLU = max(0, x) [/$]<br></div>
What is the&nbsp;\(\tanh\)&nbsp;function?	\[\tanh(x) = \frac{e^x - e^{-x}}{e^x + e^{-x}}\]<br>
What is the derivative of the sigmoid function?	\[\frac{d \sigma(x)}{dx} = \frac{e^{-x}}{(1+e^{-x})^2}\]<br>
What is the derivative of the&nbsp;\(\tanh\)&nbsp;function?	\[\frac{d\tanh(x)}{dx} = 1-\tanh(x)^2\]<br>
What is the derivative of the ReLU function?	"\[\frac{d\mathrm{ReLU}(z)}{dz} =\left\{
	\begin{array}{ll}
		1  &amp; \mbox{if } x &gt; 0 \\\text{undefined}  &amp; \mbox{if } x = 0 \\		0 &amp; \mbox{if } x &lt; 0
	\end{array}
\right.\]<br>"
In an&nbsp;\(L\)-layered neural network, what are the dimensions of: weights, biases, activations at each layer?	<div>If&nbsp;\(n^{[l]}\)&nbsp;is the number of hidden units at layer&nbsp;\(l\),&nbsp;\(1 \leq l \leq L\), then:<br>&nbsp; &nbsp;1.&nbsp;\(W^{[l]}\)&nbsp;has shape&nbsp;&nbsp;\(n^{[l]}\times n^{[l-1]}\)&nbsp;(\(dW\)&nbsp;will have the same dimensions)<br>&nbsp; &nbsp;2.&nbsp;\(b^{[l]}\)&nbsp;has shape&nbsp;\(n^{[l]}\times 1\)&nbsp;&nbsp;(\(db\)&nbsp;will have the same dimensions)<br>&nbsp; &nbsp;3.&nbsp;\(Z^{[l]}\)&nbsp;and&nbsp;\(A^{[l]}\)&nbsp;have the same shape,&nbsp;\(n^{[l]} \times m\)&nbsp;(\(dZ\)&nbsp;will have the same dimensions)<br></div>
What is the common notation for elements in an&nbsp;[$]L[/$]-layered neural network? (Think number of units, activations, prediction, minibatches.)	[$]n^{[l]}[/$] = the number of units in layer&nbsp;[$]l[/$]<br><div>[$]a^{[l] \{ m \} }[/$] = the activation vector for layer&nbsp;[$]l[/$], minibatch&nbsp;[$]m[/$]</div><div>[$]X = a^{[0]} [/$]<br></div><div>[$]\hat{y} = a^{[L]}[/$]</div><div><br></div>
What are the inputs and outputs to a:<div>- forward propagation step at layer&nbsp;[$]l[/$]</div><div>- backward propagation step at layer&nbsp;[$]l[/$]?</div>	"<div>Given a layer [$]l[/$], we have [$]W^{[l]}, b^{[l]}[/$]</div><div><br>forward propagation function implementing the forward prop equations results in output [$]a^{[l]}[/$], caches [$]z^{[l]}[/$] for the back-propagation function</div><div><br>backward propagation function takes [$]da^{[l]}[/$] as input, outputs [$]da^{[l-1]},\ dw^{[l]},\ db^{[l]}[/$]<br></div><div><br></div><div><img src=""Machine learning - General case for forward-_back-propagation.jpg""><br></div>"
What does the entire optimisation process look like for a neural network? (What are the feedback loops in a NN?)	"<img src=""Untitled.png"">"
Can you know beforehand what the correct hyperparameters are for a given ML task?	No—they'll be task-/data-/model-specific. ML is generally an iterative process.
Generally speaking, how do you debug a model?&nbsp;	<div>First, use the bias and variance framing to find out what went wrong; high bias = not learning on the training set, high variance = no generalisation to test set.</div><div><br></div><div>If your model isn't learning at all, i.e. bad train error:</div><div>- look at your forward pass, and make sure there are no subtle implementation bugs</div><div>- make sure that the loss function and gradients look sane</div><div>- look at your data and batching process: is the model seeing the data correctly?</div><div>- try training it for longer, or give it more data</div><div>- see if the model is failing in some systematic way, i.e. having trouble classifying our outputting a particular thing rather than generally learning nothing</div><div>- try increasing the learning rate – it's possible it is too small</div><div>- look at your logging code and make sure there is no bug there</div><div><br></div><div>If your model has high train accuracy but low test accuracy:</div><div>- sanity check your test code: how are you calculating accuracy? how are you logging it?</div><div>- make sure your test data has been preprocessed in the same way as the train data (e.g. if training images are black and white, test images should also be...)<br></div><div>- look at your test data to see if there is any form of distributional shift<br></div><div>- take a single test example and look at how your model is behaving under that; if available, use visualisation/interpretability tooling</div><div>- try some form of regularisation, like weight decay or dropout</div>
How can you spot a model exhibiting high bias?	<b>High bias</b> means that your model is not fitting well on the training data. You can tell a model has high bias when its accuracy (or loss, or whatever metric you're using) is not very good on the training set.<div><br></div><div>A note on bias: if the Bayes error (the absolute optimum a function could ever achieve) is not much smaller than the model's error, then there isn't much bias to speak of. However, if the Bayes error is very low and the model's is significantly higher, then you have high bias (the difference between the figures is <b>avoidable bias</b>).</div>
How can you spot a model with high variance?	A model has <b>high variance</b> when it does not generalise well from the training set to the development/test set. It's also referred to as <b>overfitting</b>.<div><br></div><div><u>Example:</u></div><div>training accuracy: 98%</div><div>test accuracy: 71%</div>
How do you correct a model exhibiting high variance?	<div><u>Fixes:</u><br></div><div><div>- try regularisation, dropout</div><div>- try early stopping<br></div><div>- check your development and test set distributions. If your test set is from another distribution, you're dealing with&nbsp;<b>covariate shift</b>&nbsp;(which is a fancy term for:&nbsp;<i>your data is different</i>)</div></div>
How do you search for hyperparameters?	<div>- try random values for each parameter on a&nbsp;<b>log</b>&nbsp;scale<br></div><div>- try a coarse-to-fine search: zoom into smaller regions of the hyperparam space</div>
How do you fix a model exhibiting high bias?	"<div><u>Fixes:</u></div><div>- train for more epochs<u><br></u></div><div>- get more training data</div><div>- change network structure: # of layers, # units/layer</div><div>- tune hyperparameters like the learning rate&nbsp;\(\alpha\)</div><div><br></div>"
What is hand-engineering?	Hand-engineering is creating features the network designer thinks the network should learn. It's a way of embedding knowledge in the network other than through its architecture (and other than that which it learns from the data).
When is hand-engineering more prevalent?	Hand-engineering appears more in domains where there is not a wealth of data, like object detection. Data may be sparse because it is expensive to label or not available (i.e. not gathered or not publicly available)
What's test time multi-crop?	Multi-crop, or for example 10-crop, is taking multiple random crops of your image and testing your network's predictions on those at test time, then averaging the results. It typically yields better predictions than just one test on the image. (Possibly because of variation in where the subject is in the image.)
What's ensembling?	Ensembling is training multiple models separately, then averaging their results. It's used in benchmarks and competitions to achieve better accuracy, but not really used in production.
What's data augmentation?	Data augmentation is creating new data out of existing data through transformations that happen in memory (it would be prohibitively large to do so on disk). In CV, some examples are mirroring images, random cropping, adding distortions to RGB channels, colour shifting.
What is transfer learning?	Transfer learning means using a model which was pre-trained on a different dataset by fine-tuning it on your dataset.<div><br></div><div>This is typically done for tasks with little data, borrowing models where there was lots of data available.</div>
How would you do transfer learning where the original model output layer is a softmax for 1000 classes but you only need 3?	Replace the output layer with a softmax with 3 classes. Depending on how much data you have, you can unfreeze more of the original model's layers, or add your own and train them on your data.
What does it mean to freeze a transfer learning model layer?	Freezing a layer means you don't train it when re-training the model on your data.
How are convolutions more sparse than fully connected layers?	Two ways:<div>- <b>sparsity of connection</b>: in the output of a convolution, a given weight only depends on a subset of the weights of the input. It isn't connected to all of them</div><div>- <b>parameter sharing</b>: a feature learned in one part of an image can be reused in another part of the image, and doesn't need to be relearned (<i>no units reinventing the wheel</i>). This is achieved because the same kernel is passed over the entire image.</div>
What are two drawbacks of very deep neural networks?	Mainly two-fold; the dramatic increase in parameter number can lead to:<div>- overfitting, which means your model doesn't generalise well to unseen data</div><div>- prohibitively large computational cost</div>
What is an inception network? (Why did it get created?)	An inception network is a type of CNN with an architecture designed to optimise performance under a limited computational budget.
How does an inception network achieve optimal computational resource usage?	"An inception block ""tries"" different operations on the input, and concatenates the results."
What does an inception block look like?	"<div>An inception block typically has 1x1, 3x3 and 5x5 convolutions plus a 3x3 pooling layer. For the larger kernel sizes and for the pooling layer, we use a 1x1 convolution to reduce size, otherwise the computational cost would be immense.</div><img src=""https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fhydracid-main%2FxTMMzdecy8.png?alt=media&amp;token=3cd1d0ae-2edf-43d4-9e6c-b01e756f5ef0"">"
What are&nbsp;[$]1\times 1[/$] convolutions?	They are convolutions with filter/kernel/window sizes of 1. This is trivial if your input volume has only one channel, but if it has multiple channels, it has the effect of transforming the depth of your input into the number of filters you are using.<div><br></div><div><u>Example:</u></div><div>256x256x64 convolved with 1x1x32 = 256x256x32</div>
How do&nbsp;[$]1 \times 1[/$] convolutions work?	"The numbers in the same position in the input volume are multiplied across channels; they are then applied ReLU and stored in the output volume.&nbsp;<div><br></div><div><img src=""https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fhydracid-main%2FySnh176Ba-.png?alt=media&amp;token=1e3cb962-5b05-4c02-9fd2-eeddc302145c""><br></div>"
What is a bottleneck design?	A bottleneck design is any network that uses a bottleneck layer: applying a&nbsp;[$]1 \times 1[/$] convolution to a volume in order to reduce its size, and therefore the computational cost of applying the next convolution.
Do deeper networks have better performance than shallower networks?	No, not always. Deeper networks are subject to the <i>degradation problem</i>, where training error is higher than for shallower networks throughout the training process. The degradation problem isn't due to overfitting.<div><br></div><div>Resnets are one answer to this issue.<br><div><br></div><div>(cf. He et al. 2015)</div></div>
What is the motivation for ResNets? What are two advantages?	ResNets are a solution to the degradation problem, where deeper networks have larger error than shallower counterparts.&nbsp;<div><br></div><div>Two advantages of the ResNet architecture are:</div><div>- easy to optimise, exhibit smaller training error as depth increase;</div><div>- a direct consequence of the above is: we can increase depth (and with it, accuracy) without harming convergence;</div>
"What's a ""main path""?"	A main path, used in the ResNet context is the sequence of layers leading from the input to the output.
What is a shortcut/skip connection in a ResNet?	The skip connection is a connection between layers in addition to the main path, where activation from a layer&nbsp;[$]l[/$] is added to the main path activation of a layer, e.g.&nbsp;[$]l+2[/$].
What does the activation at a layer with a skip connection look like?	Let's say we have a skip connection from layer&nbsp;[$]l[/$] to layer&nbsp;[$]l+2[/$]<div><br></div><div>[$]a^{[l+2]} = g(z^{[l+2]} + a^{[l]})[/$]<br></div>
What is object localisation? What is the difference between object localisation and object detection?	Localisation is classifying an image with an object in it and putting a bounding box around the object.<div><br></div><div>Detection is localising and classifying a scene with potentially many different (and different types of) objects.</div>
What does the output of a convnet applied to object localisation/detection look like?	<div>In the below vector, we have:</div><div>[$]p_c[/$]: confidence that there is an object in the image or grid cell for which this output was produced<br></div><div>[$] b_x, b_y, b_H, b_w[/$]: bounding box mid-point coordinates as well as height and width<br>[$] c_i [/$]: flag for whether class&nbsp;[$]i[/$] is in this image/cell (could be&nbsp;[$]c_1[/$] = car,&nbsp;[$]c_2[/$] = rabbit etc.) If there is only one type of object this is not needed.<br><br></div>[$] y = \begin{bmatrix} p_c \\ b_x \\ b_y \\ b_H \\ b_W \\ c_1 \\ c_2 \\ \dots \end{bmatrix}[/$]<br>
Are there multiple ways to represent the bounding box?	Yes, you can represent it using the coordinates of the mid-point and its height and width. An alternative is representing it using coordinates for its top-left and bottom-right points.
How are the coordinates of the image considered when calculating the coordinates of the bounding box? Is it an absolute or relative position?	The image's top-left corner is&nbsp;[$](0, 0)[/$]. The image's bottom right-corner is&nbsp;[$](1, 1)[/$].&nbsp;<div><br></div><div>Bounding box coordinates are expressed relative to these points, so a box in the centre of the image would have midpoint coordinates&nbsp;[$](0.5, 0.5)[/$]</div>
In plain wording, how might a loss function look for the object detection task?	Plainly:<div>- if there is an object in the current image/cell, penalise the divergence of the predicted bounding box and predicted class from the true bounding box and class ([$]y = 1[/$])</div><div>- if there is no object, penalise if the network thinks there was ([$]y = 0[/$])</div>
What is a typical formula for the loss function for object detection?	[$]L(\hat{y}, y) = \left\{ \begin{array}{ll} \sum_{i=1}^{|y|} (\hat{y}_i - y_i)^2 &amp; \text{if } y_1 = 1 \\ (\hat{y}_1 - y_1)^2 &amp; \text{if } y_1 = 0 \end{array}\right.[/$]<br>
How does sliding window object detection work?	Sliding window detection works by passing a small window over the entire area of the test image, with a given stride. At each step, we run an object detection convnet on the contents of the image under the sliding window.&nbsp;<div><br></div><div>The convnet would have been previously trained on a set of closely cropped images that either contained or did not contain an object.</div>
What are some disadvantages of the naïve sliding window approach?	Computational cost is the largest disadvantage. If you increase the stride, the cost goes down, but so does accuracy. The converse is also true. This makes the naïve approach infeasibly slow.<div><br><div>It's also the case, as outlined by R-CNN, that sliding windows often look at areas that are not of interest—there are no objects there.</div></div>
How can you implement the sliding window detection technique more efficiently?	"The convolutional implementation of the sliding window ""compresses"" the computation of multiple positions of the window into one forward pass of a convnet.<div><br></div><div>It does this by replacing fully connected layers with convolutions.&nbsp;</div><div><br></div><div>In the figure below, the top row is the network being applied to a training image, whereas the bottom row is a test image with 4 possible positions of the 14x14x3 window, given a stride of 2. The test image is being compressed into one output volume that is 2x2, which represents the 4 positions of the window (stride 2).</div><div><img src=""https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fhydracid-main%2FIiYH-M0fzE.png?alt=media&amp;token=b31f3fba-67da-409e-af2f-dd4e5a700578""><br></div>"
How can you convert fully connected layers into convolutions?	"Easy: apply a convolution with filters that match the height, width and depth of your input. The number of filters should be equal to the number of units of the FC layer you are replacing. The result will be a volume of dimensions&nbsp;[$]1 \times 1 \times n^{[l]}[/$]<br><br><u>Example:</u>&nbsp;<div><img src=""https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fhydracid-main%2FT38IDgroKO.png?alt=media&amp;token=b154db19-c631-4fac-a592-e2686f7fdc02""><br></div>"
How does YOLO make the bounding box more accurate?	YOLO starts by dividing the image into a square grid of e.g. 19x19 cells. Then, the convnet is run on each of those cells and if the midpoint of an object falls in a given cell, it is responsible for detecting it. In this case, when calculating the coordinates of the box, we use the top-left and bottom-right of each cell as&nbsp;[$](0, 0)[/$] and&nbsp;[$](1, 1)[/$], respectively.
How do you know an object detection algorithm like YOLO is working?	You measure the Intersection over Union (IoU) measure. This is defined as the overlap between a predicted bounding box and the true bounding box.<div><br></div><div>[$]\text{IoU} = \frac {\text{size of intersection}} {\text{size of union}}[/$]<br></div>
How is IoU defined?	[$]\text{IoU} = \frac {\text{size of intersection}} {\text{size of union}}[/$]<br>
How do you ensure your algorithm detects the same object only once?	You use non-max suppression.
How does non-max suppression work?	To carry out non-max suppression, for each grid cell and possible class:<div>1. Discard any bounding box predicted with less than some confidence threshold, say 0.5</div><div>2. For the remaining bounding boxes, find the one predicted with the maximum confidence.&nbsp;</div><div>3. For the other boxes, if they have a high overlap (IoU) with the max confidence box, discard them.</div>
What if a grid cell happens to contain multiple objects?	If that's the case, we use anchor boxes to further divide the grid cell. So now, instead of one object per grid cell, you have one per anchor box (the object whose shape matches the shape of the anchor box). Anchor boxes could be 1 vertical and 1 horizontal, in a simple example. But typically there are more, and their shapes are determined algorithmically from what you expect to encounter in the dataset.
How does using anchor boxes affect the shape of your output vector&nbsp;[$]y[/$]?	"Anchor boxes make it so that&nbsp;[$]y[/$] is ""repeated"" for each anchor box:<div><br></div><div>[$]y = \begin{bmatrix} p_c \\ b_x \\ b_y \\ b_H \\ b_W \\ c_1 \\ c_2 \\ c_3 \\ p_c \\ b_x \\ \dots \end{bmatrix}[/$]<br></div>"
What are some shortcomings of the anchor box technique?	- it doesn't work if there are more objects than anchor boxes<div>- it doesn't work if there are multiple objects with the same shape</div>
What is an alternative to the sliding windows approach? How does it work?	"R-CNN is ""regions with convolutional neural networks"". It works by identifying regions of interest, then running a CNN on those. Regions are usually identified using a segmentation algorithm, but later incarnations used a CNN for those, too."
How does R-CNN compare with YOLO in terms of performance?	YOLO is faster than the fastest incarnation of R-CNN (aptly named Fastest R-CNN).
What is liveness detection in face recognition?	Liveness detection is ensuring that the input presented to the network is from a live human and not, say, from a picture of a face.
What is face verification?	Face verification is checking that a given input image of a face matches the face of the claimed person in a database.
What is face recognition?	Face recognition is matching the input image of a face against any of the entries in the database, i.e. is this person in my database at all? ([$]1:K[/$] matching task)
What is one-shot learning?	One-shot learning is being able to classify/detect using just one example. In the context of face recognition this is recognising a person from just one image.
What is the similarity function?	A function which measures the difference between two vectors. They could be encodings of images, text, etc.
What is a siamese network?	A siamese network takes as input two images of faces and outputs how similar they are.<div><br></div><div>It does so by generating an encoding of each image,&nbsp;[$]f(x^{(i)})[/$], then learning the parameters such that the distance between them is minimised.</div><div><br></div>
What is the loss function for a siamese network?	Triplet loss compares three photos per example: an anchor photo of the person, a positive photo (of the same person) and a negative photo (of a different person).<div><br></div><div>We want the parameters to have this property, where A, P, N are photos as described above:</div><div>[$]||f(A) - f(P)||^2 \leq ||f(A) - f(N)||^2[/$] (the distance between anchor and positive needs to be smaller than between anchor and negative)<br></div><div><br></div><div>Alternatively,</div><div>[$]||f(A)-f(P)||^2 - ||f(A)-f(N)||^2 + \alpha \leq 0[/$], with alpha being a margin<br></div><div><br></div><div>That gives us loss function:</div><div>[$]\mathbb{L}(A, P, N) = max(||f(A)-f(P)||^2 - ||f(A)-f(N)||^2 + \alpha, 0)[/$]<br></div>
What is the cost function for a siamese network?	<div>It's the value over all examples of the triplet loss function.</div>[$]J = \sum_{i=1}^m \mathbb{L}(A^{(i)}, P^{(i)}, N^{(i)})[/$]
What is the cost function for neural style transfer?	[$]\mathbb{J}(G) = \alpha \mathbb{J}_{\text{content}}(C, G) + \beta \mathbb{J}_{\text{style}}(S, G)[/$]<div><br></div><div>where G = generated image, S = style image, C = content image</div>
How do you calculate the content cost function in neural style transfer?	You pick a hidden layer&nbsp;[$]l[/$] and measure the similarity in activations between the content and generated images at that layer:<div>[$]\mathbb{J}_{\text{content}}(C, G) = \frac{1}{2}||a^{[l] (C)} - a^{[l] (G)}||^2[/$]<br></div>
How do you calculate the style cost function for neural style transfer?	We define style as the correlation between activations across channels between S and G (the style and generated images). We're essentially asking which features occur together in the style image, and making sure that the generated image follows the same correlation.<div><br></div><div>Compute a style/gram matrix:&nbsp;[$]G_{kk'}^{[l]} = \sum_{i=1}^{n_H} \sum_{j=1}^{n_W} a_{ijk}^{[l]} a_{ijk'}^{[l]}[/$]</div><div>this is between channels&nbsp;[$]k[/$] and&nbsp;[$]k'[/$], on hidden layer&nbsp;[$]l[/$], with a height and width of&nbsp;[$]n_H, n_W[/$].</div><div><br></div><div>The style cost function is the sum of the squared difference of the two gram matrices (for style and generated images) times a normalisation constant:</div><div>[$]\mathbb{J}_{\text{style}}^{[l]}(S, G) = \frac{1}{(2n_H^{[l]}n_W^{[l]}n_C^{[l]})^2} \sum_{k=1}^{n_C} \sum_{k'=1}^{n_C} (G_{kk'}^{[l] (S)} - G_{kk'}^{[l] (G)})^2[/$]<br></div><div>(or the Frobenius norm of the difference between the matrices)</div>
Can you apply convolutions to 1D or 3D data?	Sure, with the filter dimensions changing to accommodate the input dimensions.<div><br></div><div><u>Examples:</u></div><div>- convolve a 1D electrical signal from an ECG (14x1) with 16 size 5 filters (5x1), the result is 10x16</div><div>- convolve a 3D CT scan (14x14x14x1) with 16 filters of size 5x5x5x1, the result is 10x10x10x16.</div>
What is Bayes error?	Bayes error is the smallest possible error a function could achieve on a given approximation. In practice, we don't know Bayes error, so we use human performance as a proxy.<div><br></div><div>(This isn't a good formal definition but it serves its purpose for now.)</div>
What is named entity recognition?	Given a sequence of text, can the model recognise proper nouns? (e.g. London, Jupiter, Sarah, Microsoft, Big Ben)
What does&nbsp;[$]x^{(i) &lt;t&gt;}[/$] denote in the context of a sequence model's input?	It is the&nbsp;[$]t[/$]-th element in example&nbsp;[$]i[/$] of the data set.
How do you denote the sequence length for an example&nbsp;[$]i[/$] for sequence models?	[$]T_x^{(i)}[/$]<br>
What are the advantages of RNNs over feed-forward networks?	- in an RNN, inputs and outputs can be different lengths for different examples&nbsp;<div>- RNNs have parameter sharing, which means features learned in one part of the sequence can be shared across the entire sequence (in contrast, a DNN would have to learn everything separately)</div>
How do RNNs work at a high level?	Each layer creates a prediction based on the input of the layer and the activation of the previous layer.
What does an RNN look like, unfolded? What are the components at each layer: inputs, outputs, weights, biases?	"Howdy! Like this, where U, V and W are input-to-hidden, hidden-to-output and hidden-to-hidden weight matrices. (Andrew Ng called them&nbsp;[$]W_{ax}, W_{ya}, W_{aa}[/$])<div><img src=""FqhNuMCuIS.png""><br></div>"
What are the forward propagation equations for RNNs?	<div>[$]a^{\langle t\rangle} = g_1(W_{aa}a^{\langle t-1\rangle} + W_{ax}x^{\langle t\rangle} + b_a)[/$]<br><br>[$]\hat{y}^{\langle t\rangle} = g_2(W_{ya}a^{\langle t \rangle} + b_y)[/$]<br></div>
How is element-wise cross-entropy loss defined?	\[\mathcal{L}(\hat{y}, y) = -\sum_{i=1}^n \hat{y_i} \log y_i\]<br>
How are RNN architectures classified? What are the main architecture types?	"By the type of input-output:<div>- one-to-one&nbsp;</div><div>- one-to-many</div><div>- many-to-one</div><div>- many-to-many (two variations here, where length of the output = length of input, and where !=)</div><div><br></div><div><img src=""CqkIhTxJdF.png""><img src=""ug7_SHIHV2.png""><br></div>"
What does a language model do?	"Language models calculate the probabilities of sentences. For example, take the sentence: ""Today is a sunny day."" If I picked a newspaper at random, or someone came up to me and spoke, what is the probability that the content was this sentence?"
How do you process a dataset for a language model?	- tokenisation—splitting sequences into tokens (words or characters)<div>- including an out-of-vocabulary token</div>
How would a language model based on an RNN work?	<div><div>The RNN predicts the probability of each word given the words that came before it:</div></div><div>[$]P(y^{&lt;1&gt;})\cdot P(y^{&lt;2&gt;} | y^{&lt;1&gt;}) \dots[/$]<br></div><div><br></div><div>Specifically, for each layer/token, compute the activation as a softmax probability distribution of the token given the previous activation and the correct sequence as input, up to that layer.<div><ul><li>at [$]t=0[/$], compute the first activation: [$]a^{&lt;1&gt;}[/$] (softmax probability distribution of the first word) given a vector of zeroes as previous activation</li><li>at [$]t=1[/$], compute the second activation: [$]a^{&lt;2&gt;}[/$] (softmax probability of the second word) given the previous activation and the correct first word as input</li><li>at [$]t=2[/$], compute the third activation: [$]a^{&lt;3&gt;}[/$] (softmax probability of the third word) given the previous activation and the correct first two words as input</li></ul></div></div>
Why is the vanishing gradient problem important for language models?	Words can have long-term dependencies in sentences, where despite being far apart they affect/modify each other.&nbsp;
If there are&nbsp;[$]\tau[/$] elements or time steps in a sequence, what is the time and space complexity of a typical RNN?	[$]O(\tau)[/$] time,&nbsp;[$]O(\tau)[/$] space.<br>
What is a computational graph?	A computational graph is a way to formalise the structure of a set of computations.
What is teacher forcing?	"Teacher forcing is an alternative method of training a network that has the outputs at each time step fed into the next time step. It's called ""forcing"" because instead of feeding the predicted output from a time step to the next as input, the actual ground truth output is fed, instead.<div><br></div><div><img src=""j1cGYgWZqz.png""><br></div>"
What is the advantage of an RNN with no connections between hidden states?	Parallelisation: we can compare a prediction at time&nbsp;[$]t[/$] with the example at time&nbsp;[$]t[/$] for all values separately (time steps are decoupled). When doing backpropagation, we don't need the gradient of the previous time step, since we can use the <i>actual </i>output of that time step from the training set.
What is a bidirectional RNN?	"Bidirectional RNNs combine an RNN that moves forward through time from the start of the sequence with another that moves backward through time from the end of the sequence.<div><br></div><div><img src=""kLHN4wEvqd.png""><br></div>"
What is the motivation for bidirectional RNNs?	In some use cases, you want a prediction to depend not only on the inputs that came before it, but the ones that occur after it in the data set. Examples include: speech, handwriting recognition.
How do you train an RNN that maps an input sequence to an output sequence of a different length?	Using an encoder-decoder/sequence-to-sequence architecture.
What does the encoder-decoder architecture look like?	In an encoder-decoder model, the input is a sequence&nbsp;[$]X = (x^{(1)}, \dots, x^{(n_x)})[/$].<div><br></div><div>An <b>encoder</b>&nbsp;RNN processes this sequence and emits a context representation&nbsp;[$]C[/$] as a simple function of its final hidden state.</div><div><br></div><div>A <b>decoder</b>&nbsp;RNN is conditioned on the representation vector to generate an output sequence&nbsp;[$]Y = (y^{(1)}, \dots, y^{(n_y)})[/$].</div><div><br></div><div>[$]n_x \neq n_y[/$] (the sequence lengths don't have to be equal)<br></div>
What's a <b>recursive</b>&nbsp;neural network?	"A generalisation of RNNs with a different kind of computational graph: a deep tree.<div><br></div><div><img src=""MYdxbtpaGu.png""><br></div>"
What is a state&nbsp;[$]s[/$]? What is an observation&nbsp;[$]o[/$]?	A state is a complete description of the state of the world.<br><br>An observation is a <b>partial</b>&nbsp;description of a state.
What is the action space in an RL problem?	It is the set of all valid actions in a given environment.
What are the two types of action spaces?	1. Discrete action space: only a finite number of moves available<div>2. Continuous action space: action vector is real-valued</div>
What is a policy?	A policy is a rule used by an agent to decide what actions to take.
What are the two types of policies?	1. <b>Deterministic</b>:&nbsp;[$]a_t = \mu(s_t)[/$] (action t is the result of applying policy mu to state t)<div>2. <b>Stochastic</b>:&nbsp;[$]a_t \sim \pi(\cdot | s_t)[/$]</div>
What are parameterised policies?	Policies whose outputs are computable functions and which depend on a set of parameters which we can adjust to change the behaviour via some optimisation algorithm.<div><br></div><div>Stochastic: [$]a_t \sim \pi_\theta(\cdot | s_t)[/$]<br></div><div>Deterministic: [$]a_t = \mu_\theta(s_t)[/$]<br></div>
What are two common types of stochastic policies?	Categorical policies and diagonal Gaussian policies.
What is a categorical policy?	It's a stochastic policy used in discrete action spaces. It works like a NN where input is the observation of the environment, has FC layers/convolutions and a softmax that converts logits to probabilities in action space.
What is a diagonal Gaussian policy?	It's a stochastic policy used in continuous action spaces.
How is a multivariate Gaussian distribution described?	It's described by a mean vector&nbsp;\(\mu\)&nbsp;and a covariance matrix&nbsp;\(\Sigma\).
How would a diagonal Gaussian policy be implemented?	You have a neural network mapping observations to mean activations&nbsp;[$]\mu_\theta(s)[/$].<div>You also have either:</div><div>- a single vector of log standard deviations to represent the covariance matrix&nbsp;[$]log \sigma[/$]</div><div>- a neural network that maps from states to log standard deviations&nbsp;[$]log \sigma_\theta(s)[/$]</div>
What do you need to do to train a policy?	You need to sample actions from the space of possible policies and compute log likelihoods of particular actions,&nbsp;[$]log \pi_\theta (a|s)[/$]
What is a trajectory?	A trajectory is a sequence of states and actions in the world. Also called an episode or a rollout.<div>\[\tau = (s_0, a_0, s_1, a_2, \dots)\]<br></div>
What are state transitions?	They are what happens to the world between the state&nbsp;[$]s_t[/$] and state&nbsp;[$]s_{t+1}[/$].
What are two types of state transitions?	1. Deterministic:&nbsp;[$]s_{t+1} = f(s_t, a_t)[/$]<div>2. Stochastic:&nbsp;[$]s_{t+1} \sim P(\cdot |s_t, a_t)[/$]</div>
What does the reward function depend on?	It depends on the current state, the current action and the next state. This is sometimes simplified to just the current state or current state + action.<div>\[r_t = R(s_t, a_t, s_{t+1})\]</div><div>\[r_t \sim R(s_t, a_t)\]<br></div>
What are two types of return?	1. Finite-horizon undiscounted return = sum of rewards in a fixed window of steps<div>\[R(\tau) = \sum_{t=0}^T r_t\]<br></div><div>2. Infinite-horizon discounted return = sum of rewards ever obtained discounted by how far off in the future they're obtained</div><div>\[R(\tau) = \sum_{t=0}^T \gamma ^t r_t\]<br></div>
What is the formula for the expected return of a policy?	[$]J(\pi) = \int_\tau P(\tau|\pi)R(\tau) = E_{\tau \sim \pi}[R(\tau)][/$]<br><div>where&nbsp;<br>[$]P(\tau|\pi) = \rho_0(s_0) \prod_{t=0}^{T-1} P(s_{t+1}|s_t, a_t)\pi(a_t|s_t)[/$]<br></div><div>is the probability of a T-step trajectory</div>
How can we succintly express the central optimisation problem in RL?	"\[\pi^* = \mathrm{argmax}_\pi J(\pi)\]&nbsp;or ""find the policy which maximises expected return""<br>"
What is <b>value</b>?	Value is the expected return if you start in a given state or state-action pair and then act according to a particular policy after.<div><br></div><div>In other words, it's the total amount of reward an agent can expect to accumulate in the future, starting from a given state.</div>
What are the four main value functions used in RL?	1. On-policy value function<div>2. On-policy action-value function</div><div>3. Optimal value function</div><div>4. Optimal action-value function</div>
What is the on-policy value function?	The on-policy value function is the expected return if you start in a state&nbsp;\(s\)&nbsp;and always act according to policy&nbsp;\(\pi\):<div>\[V^\pi(s) = E_{\tau \sim \pi} [R(\tau) | s_0 = s]\]<br></div>
What is the on-policy action-value function?	It's the expected return if you start in state&nbsp;\(s\), take an arbitrary action&nbsp;\(a\), then act according to policy \(\pi\).<div>\[Q^\pi(s, a) = E_{\tau \sim \pi}[R(\tau)|s_0=s, a_0=a]\]<br></div>
What is the optimal value function?	It represents the expected return if you start in a state&nbsp;[$]s[/$] and always act according to the optimal policy&nbsp;[$]\pi^*[/$]<div><br></div><div>[$]V^*(s) = E_{\tau \sim \pi^*} [R(\tau) | s_0 = s][/$]<br></div>
What is the optimal action-value function in terms of the optimal policy?	It is the expected return if you start in a state&nbsp;[$]s[/$], take an arbitrary action&nbsp;[$]a[/$] and then act according to the optimal policy&nbsp;[$]\pi^*[/$]<div><br></div><div>[$]Q^*(s, a) = E_{\tau \sim \pi^*}[R(\tau)|s_0=s, a_0=a][/$]<br></div>
What is the connection between the value function and the action-value function?	The value function is the expected return from taking action [$]a[/$] in the action-value function according to policy&nbsp;[$]\pi[/$]<div>[$]V^\pi(s) = E_{a \sim \pi}[Q^\pi(s, a)][/$]<br></div><div><br></div><div>Same goes for the optimal value and optimal action-value functions.</div><div>[$]V^*(s) = max_a Q^*(s, a)[/$]<br></div>
What is the connection between the optimal action-value function and the optimal action to take in a state&nbsp;\(s\)?	By definition,&nbsp;\(Q^*(s, a)\)&nbsp;will return the optimal action&nbsp;\(a^*\)&nbsp;from that state because it uses the optimal policy&nbsp;\(\pi^*\)
What is the gist of the Bellman equations?	The value of your starting point is the reward you expect to get from being there plus the value of wherever you land next.<div><br></div><div>(Keep this in mind when you read the formulae.)</div>
What are the Bellman equations for on-policy functions?	[$]V^\pi(s) = E_{a \sim \pi, s' \sim P} [r(s, a) + \gamma V^\pi(s')][/$]<br><br><div>[$]Q^\pi(s, a) = E_{s' \sim P}[r(s, a) + \gamma E_{a' \sim \pi} [Q^\pi(s', a')]][/$]</div><div><br></div><div>(remember: <i>what I expect to get from being at this starting point + the value of wherever I land next</i>)</div>
What is the Bellman optimality equation for the value function?	"<img src=""paste-ad43762630b4b62c2b7daccd6029663246dfaa22.png"">"
How can you calculate the relative advantage of an action?	Using an advantage function that tells us how much better it is to take an action&nbsp;\(a\)&nbsp;in state&nbsp;\(s\)&nbsp;than to randomly select an action according to&nbsp;\(\pi(\cdot | s)\), assuming you act according to&nbsp;\(\pi\)&nbsp;after.<div>\[A^\pi(s, a) = Q^\pi(s, a) - V^\pi(s)\]<br></div>
What is the difference between model-based and model-free algorithms in RL?	Model-based agents have access to a model of the environment; model-free algorithms have to learn it.
What are the advantages and disadvantages of model-based algorithms?	Upside: you can plan by thinking ahead and by choosing from the option available to you.<div>Downside: it's rare that ground-truth models of the environment are available, so often if the agent wants to use a model they will have to use one they learned from experience—so it's prone to overfitting.</div>
What do model-free algorithms typically learn?	One (or both?) of two things:<div>- policy optimisation</div><div>- Q-learning</div>
What is policy optimisation?	Policy optimisation algorithms learn a policy by optimising the parameters on the performance objective&nbsp;[$]J(\pi_\theta)[/$] using gradient ascent.
What are <b>on-policy</b>&nbsp;updates?	They're updates made from data using the most recent policy, not older ones.
What is Q-learning?	In Q-learning, you learn an approximator&nbsp;\(Q_\theta(s,a)\)&nbsp;for the optimal action-value function.
What are <b>off-policy</b> changes?	In off-policy updates, each update can use data collected at any point during training.
What are trade-offs between the policy optimisation and Q-learning approaches?	Policy optimisation methods are stable and reliable, and you directly optimise for the thing you want.&nbsp;<div><br></div><div>Q-learning only indirectly optimise for agent performance by training an approximator to satisfy a self-consistency equation, but they can be very efficient due to effective data reuse.</div>
What are some examples of what model-based RL algorithms learn?	- pure planning<div>- expert iteration = planning + policy</div><div>- data augmentation for model-free methods</div><div>- embedding planning loops into policies</div>
What is the policy gradient?	To maximise the expected return of a stochastic parameterised policy, we would like to optimise it by gradient ascent on its parameters, i.e.<div>[$]\theta_{k+1} = \theta_k + \alpha \nabla_\theta J(\pi_\theta) |_{\theta_k}[/$]<br></div><div><br></div><div>The RHS of this equation is the policy gradient.</div>
What is the policy gradient equal to, in the simplest case?	[$]\nabla_\theta J(\pi_\theta) = E_{\tau \sim \pi_\theta} [\sum_{t=0}^T \nabla_\theta log \pi_\theta(a_t | s_t)R(\tau)][/$]<br>
What are word embeddings?	They're high-dimensional feature vectors used to represent words.
What is a useful property of modelling words as embeddings?	We can learn analogies by calculating the similarity between two feature vectors according to some similarity function.<div><br></div><div><u>Example</u></div><div>Man is to woman as king is to queen</div>
What's a widely used similarity function in word embeddings?	Cosine similarity:<div>[$]sim (u, v) = \frac{u^Tv}{||u||_2 ||v||_2} = cos(\theta)[/$]<br></div>
What is an embedding matrix?	An embedding matrix is embedding vectors stacked vertically for each word in your vocabulary. We typically learn it from a much larger dataset than what is available for our task, and then transfer it there.
What is a way to get the embedding of a word&nbsp;\(j\)&nbsp;from the embedding matrix&nbsp;\(E\)?	If you have a one-hot encoded vector of word&nbsp;\(j\):<div>\[E \cdot o_j = e_j\]<br></div>
What's one example of a word embedding model?	Feed all embeddings to a NN layer, then to a softmax with the number of classes = the size of your vocab.
What's a fixed word history?	In a model that uses fixed word history we only use the preceding/neighbouring&nbsp;[$]k[/$] words to predict a target word.
What is a skip gram?	A skip gram is a model which learns a target word given a nearby word—could by 2 or 3 or more words apart. Word2Vec is an example.
How does a model like Word2Vec generate embeddings?	"It sets up a ""dummy"" learning problem: predict a target word given a context word selected from nearby. It doesn't matter how well we do on this task—we care about the embeddings."
The last layer of a Word2Vec model is the below softmax.&nbsp;<div><br></div><div>[$]p(t|c) = \frac{e^{\theta_t^Te_c}}{\sum_{j=1}^{||V||}e^{\theta_j^Te_c}}[/$]<br></div><div><br></div><div>What is the drawback of using this softmax?</div>	In this, you have to sum across your entire vocabulary to evaluate the softmax function once. This is computationally expensive.
What is an alternative to the slow-softmax used in Word2Vec?	Hierarchical softmax: don't predict all&nbsp;[$]k[/$] classes at once. Instead, find out if your candidate is in the first&nbsp;[$]k \over 2[/$] classes, then in the&nbsp;[$]k \over 2[/$] of those, and so on. Like binary search.
What are stopwords?	They're words that appear very frequently in a corpus: the, of, a, and... Because they are so frequent, it's likely that they will also dominate a random sample of that corpus, so you will need to adjust how you sample.
What is negative sampling?	To your context + target word pairs you add a target variable. It's 1 if the words are correlated and 0 otherwise.<div><br></div><div><u>Sample:</u></div><div>- 1 positive example as random</div><div>-&nbsp;[$]k[/$] negative examples are sampled according to some heuristic to account for stopwords</div><div><br></div><div><u>Model:</u></div><div>Train a network to predict the label given the pair of words:</div><div>[$]P(y=1|c, t) = \sigma(\theta_t^Te_c)[/$] (embeddings of target and context words)<br></div><div><br></div><div>The final layer is now&nbsp;[$]|\mathbb{V}|[/$] binary classifications for the 0 or 1 values of the target, but crucially you only train&nbsp;[$]1 + k[/$] at a time, for the pairs you sampled. This saves us from summing over the entire vocabulary.</div>
What is sentiment classification?	Look at a text and find out what the sentiment is. Was it positive? Sad, happy?
How can we use an RNN for sentiment classification?	Feed embeddings of the sentence into a network, have it output a softmax class once the entire input sequence is consumed (many-to-one).
Can RNNs be applied to machine translation? What would their input be?	Yes—we can use a sequence-to-sequence model in machine translation. The input to the encoder is the original sentence; it then feeds a context to the decoder which finds the most likely translation by maximising a conditional probability:<div>[$]P(y^{\langle 1 \rangle}, \dots, y^{\langle T_y \rangle} | x^{\langle 1 \rangle}, \dots, x^{\langle T_x \rangle})[/$]<br></div>
Say you have an input sentence in a foreign language and want to translate it into English. If you have this sentence encoded into some representation, how could you use beam search to find the most likely translation?	Start by finding the most likely&nbsp;[$]B[/$] first words of the translated sentence. ([$]B[/$] is the beam width and controls how many alternatives you consider.) Create&nbsp;[$]B[/$] copies of a decoder RNN and fix the first output as each of the words. Get the decoder to calculate the most likely second word given the first word:<div>[$]P(y ^ {\langle 2 \rangle} | x, y ^ {\langle 1 \rangle})[/$]<br><div><br></div><div><br><div>Then, find the&nbsp;[$]B[/$] most likely pairs of first + second words, and create copies of the decoder with the first and second outputs set to those words. Get the decoder to calculate the most likely third word given the first two:</div></div></div><div>[$]P(y ^ {\langle 3 \rangle} | x, y ^ {\langle 1 \rangle}, y ^ {\langle 2 \rangle})[/$]</div><div><br></div><div>And so on, until you reach [$]\langle EOS \rangle[/$]</div>
What does beam search optimise, in theory? How do we modify this in practice? Why?	Beam search optimises for the most likely translation, or for the probability of an output word given the input sequence and the output words that came before it:<div>[$]argmax_y \prod_{t=1}^{T_y} P(y^{\langle t \rangle}|x, y^{\langle 1 \rangle}, \dots, y^{\langle t-1 \rangle})[/$]<br></div><div><br></div><div>In practice we modify it to avoid rounding error and numerical underflow to:</div><div>[$]argmax_y \sum_{t=1}^{T_y} log P(y^{\langle t \rangle}|x, y^{\langle 1 \rangle}, \dots, y^{\langle t-1 \rangle})[/$]<br></div>
What is length normalisation for beam search?	<div>It's an improvement to the beam search algorithm to reduce the bias in favour of shorter sentences.</div><div><br></div>We apply a normalisation factor with a hyperparameter to the beam search optimisation function:<div>[$]argmax_y \frac{1}{T_y^\alpha} \sum_{t=1}^{T_y} log P(y^{\langle t \rangle}|x, y^{\langle 1 \rangle}, \dots, y^{\langle t-1 \rangle})[/$]<br></div>
What are the trade-offs involved in choosing the beam width for beam search?	Larger width = better result, but slower and higher memory requirements<div>Smaller width = worse result, but faster and less memory needed</div>
You're using beam search with a decoder RNN to find the most likely machine translation of an input sentence. Your output is incorrect, and you want to correct the mistake. How do you know if it was the search algorithm or the RNN?	<ul><li>Which is higher probability, the human translation probability or the algorithm translation?<ul><li>if [$]p(y^*|x) &gt; P(\hat{y} | x)[/$], it's beam search</li><li>if [$]p(y^*|x) &lt; P(\hat{y} | x)[/$] it's the RNN</li></ul></li></ul>
What's a disadvantage of encoder-decoder architectures when given long sentences?	They have to first store/encode the <b>entire</b>&nbsp;sentence into a representation which is then fed to the decoder. This means performance decreases the longer sentences get.
What is an attention mechanism?	An attention mechanism is a way to control the importance of each input to a decoder network in sequence-sequence models. (This is the context in which I learned it, but I'm sure there is a more general definition that fits here.)
How does the attention mechanism work in an encoder-decoder RNN?	It computes a set of attention weights that control how much the decoder RNN should be paying attention to each activation of the encoder RNN.&nbsp;<div><br></div><div>The input to each of the decoder RNN cells is a context that is defined using these weights as well as the output of a previous cell (of the decoder).</div>
How is the context calculated for a token&nbsp;[$]t[/$] of the encoder network that uses an attention mechanism?	[$]c^{\langle t \rangle} = \sum_{t'} \alpha^{\langle t, t' \rangle} a^{\langle t' \rangle}[/$]<br><div><br></div><div>where&nbsp;[$]\alpha^{\langle t, t' \rangle}[/$] =&nbsp;amount of attention [$]y^{\langle t \rangle}[/$] should pay to [$]a^{\langle t' \rangle}[/$]</div>
How is an attention weight calculated for an encoder activation&nbsp;[$]a^{\langle t' \rangle}[/$] and a previous decoder state&nbsp;[$]s^{\langle t-1 \rangle}[/$]?	"[$]\alpha^{\langle t, t' \rangle} = \frac{e^{e^{\langle t, t' \rangle}}}{\sum_{t'=1}^{T_x} e^{e^{\langle t, t' \rangle}}}[/$]<br><div><br></div><div>where the first&nbsp;[$]e[/$] is the constant, the second, superscripted one is ""energy"".</div>"
Say you have a set of random variables,&nbsp;\([X_1, X_2, \dots, X_n]\). What's in the covariance matrix&nbsp;\(\Sigma\)? What does it look like?	The covariance between a random variable and every other random variable. It's a symmetric matrix, and items on its diagonal are the variances of each random variable (the covariance of the var with itself).<div>\[\Sigma = \begin{bmatrix} \text{Cov}(X_1, X_1) &amp;&amp; \text{Cov}(X_1, X_2) &amp;&amp; \dots &amp;&amp; \text{Cov}(X_1, X_n) \\ \text{Cov}(X_2, X_1) &amp;&amp; \text{Cov}(X_2, X_2) &amp;&amp; \dots &amp;&amp; \text{Cov}(X_2, X_n) \\ \vdots &amp;&amp; \vdots &amp;&amp; \ddots &amp;&amp; \vdots \\ \text{Cov}(X_n, X_1) &amp;&amp; \text{Cov}(X_n, X_2) &amp;&amp; \dots &amp;&amp; \text{Cov}(X_n, X_n) \end{bmatrix}\]<br></div>
What is the probability of a&nbsp;\(T\)-step trajectory&nbsp;\(\tau\)?	<div>\[P(\tau|\pi) = \rho_0(s_0) \prod_{t=0}^{T-1} P(s_{t+1}|s_t, a_t)\pi(a_t|s_t)\]<br></div><div>In plain English,&nbsp;<br></div><ul><li>The probability of a trajectory&nbsp;\(\tau\)&nbsp;is the product of:<ul><li>the probability of sampling an initial state&nbsp;\(s_0\)&nbsp;from an initial distribution&nbsp;\(\rho_0\)</li><li>the probability of each remaining state in the trajectory conditional on its previous state and the action applied at that state</li><li>the probability that the policy&nbsp;\(\pi\)&nbsp;would recommend an action&nbsp;\(a_t\)&nbsp;at given state&nbsp;\(s_t\).</li></ul></li></ul>
What is reinforcement learning?	There are multiple ways of looking at it:<div>- learning what to do—how to map situations to actions—to maximise a numerical reward signal</div><div>- studying the interaction between an active decision-making agent and its environment, within which the agent seeks to achieve its goal despite uncertainty</div>
Why is the diagonal Gaussian policy <i>diagonal</i>?	Because it's a special case of a multivariate Gaussian where the covariance matrix&nbsp;[$]\Sigma[/$] is a diagonal matrix. The covariance matrix has on the diagonal the variance of each random variable, which can be represented as a vector of e.g. log standard deviations.
How is RL different from supervised/unsupervised learning?	- in RL, there is no supervisor, only a reward signal<div>- the reward signal can be delayed, so the agent won't always know what is a correct action and what isn't</div><div>- in RL, the data that is available to the agent changes depending on what actions it takes (dynamic system + agent moving through the world)</div><div>- in RL, the environment changes by itself</div>
What is the reward hypothesis?	It's an assumption that we make in how we model the reinforcement learning problem: all goals can be described as the maximisation of cumulative reward.
What is the relationship between a state&nbsp;\(S_t\)&nbsp;and the history\(H_t = A_1, O_1, R_1, \dots, A_t, O_t, R_t\)?	The state is a function of the history:&nbsp;\(S_t = f(H_t)\),&nbsp;and informally it is a sort of summary of what the agent has seen so far.
When is a state a <b>Markov state</b>?	"When it contains all useful information from the history. Or: ""the future is independent of the past, given the present"".<div><br></div><div>Mathematically:</div><div>[$]\mathbb{P}[S_{t+1} | S_t] = \mathbb{P}[S_{t+1} | S_1, \dots, S_t][/$]<br></div><div><br></div><div>[$]H_{1:t} \rightarrow S_t \rightarrow&nbsp;H_{t+1 : \infty}[/$]<br></div>"
What's an <b>environment state</b>?	It's the environment's private representation—the set of numbers that define what will happen next. Depending on the problem specification, the agent may or may not have access to this.
What is a POMDP?	A partially observable markov decision process is an MDP where the agent <i>indirectly</i>&nbsp;observes the environment. It knows some things, but not others.&nbsp;<div><br></div><div>The environment state is not the same as the agent's internal state:</div><div>\[S_t^a \neq S_t^e\]<br></div>
In a POMDP, what could the agent state <i>be</i>?	An agent could:<div>- try to use the complete history as an internal state</div><div>- use a probability distribution about the environment that represents beliefs</div><div>- use a linear combination of the previous state and the current observation, like in an RNN.</div>
What's a value-based agent?	An agent with no policy or the implicit policy but which has an explicit representation of the value function.
What's a policy-based agent?	An agent with no value function, but an explicit policy.
What's an actor-critic agent?	An agent which stores both policy (actor) and a value function (critic). In deep RL this is two networks, one that learns a policy, and one that learns the value function.
What's a model-free agent?	An agent with a policy and/or value function, but no model of the environment.
What's a model-based agent?	An agent with a policy and/or value function and a model of the environment.
What is [$]p(s', r|s, a)[/$] in a Markov Decision Process?	[$]p(s', r|s, a) \doteq Pr \{ S_t=s', R_t=r | S_{t-1}=s, A_{t-1}=a\}[/$]
What are&nbsp;\(S_t, A_t, R_t\)&nbsp;in an MDP?	They're random variables for state, action and reward. When they take on particular values, we say, e.g.&nbsp;\(S_t = s\).
In RL, are time steps actual fixed intervals of time?	No—they can be arbitrary successive stages of decision-making and acting.
What's the finite undiscounted return?	\[G_t \doteq R_{t+1} + R_{t+2} + \dots + R_\tau\]<br>
What is the infinite discounted return?	[$]G_t = R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \dots = \sum_{k=0}^\infty \gamma^k R_{t+k+1}[/$]
What's the relationship between returns at successive time steps for infinite discounted return?	[$]\begin{aligned}G_t &amp;= R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \dots \\ &amp;= R_{t+1} + \gamma G_{t+1} \end{aligned}[/$]
How can you unify the notation for episodic/finite and continuing/infinite returns?	You can imagine that at the end of an episode you enter a state that always leads to itself with reward 0, so the return is:<div><br></div><div>[$]G_t \doteq \overset{T}{\underset{k=0}{\sum}} \gamma^{k} R_{t+k+1}[/$]<br></div>
What is the value function of a state&nbsp;\(s\)?	It is the expected return when starting in&nbsp;\(s\)&nbsp;and following a policy&nbsp;\(\pi\)&nbsp;thereafter:<div>\[v_\pi(s) \doteq \mathbb{E}_\pi[G_t | S_t = s] = \mathbb{E}_\pi \Bigg[ \sum_{k=0}^\infty \gamma^k R_{t+k+1} | S_t = s \Bigg], \text{ for all } s \in \mathcal{S}\]<br></div>
Can you deduce the Bellman equation for the value function using its definition and the relationship between the return for successive states?	[$]\begin{aligned}v_\pi(s) &amp; \doteq \mathbb{E}_\pi[G_t | S_t = s] \\ &amp;= \mathbb{E}_\pi[R_{t+1} + \gamma G_{t+1} | S_t = s] \\ &amp;= \sum_{a} \pi(a|s) \sum_{s'} \sum_{r} p(s', r | s, a) \Big[r + \gamma \mathbb{E}_\pi [G_{t+1} | S_t = s'] \Big] \\ &amp;= \sum_{a} \pi(a|s) \sum_{s', r} p(s', r|s, a) \Big[r + \gamma v_\pi(s') \Big] \end{aligned}[/$]
What's the Bellman equation for&nbsp;\(v_\pi\)? What does it tell you?	<div>\[v_\pi(s) = \sum_{a} \pi(a|s) \sum_{s', r} p(s', r|s, a) \Big[r + \gamma v_\pi(s') \Big]\]</div><div>This tells you a relationship between the value of a state and the values of its successor states, namely: the value of the start state must equal the discounted value of the expected next state, plus the reward expected along the way.<br></div>
What's the action-value function&nbsp;[$]q_\pi(s, a)[/$]?	[$]q_\pi(s, a) \doteq \mathbb{E}_\pi [G_t |S_t = s, A_t = a][/$]
What is the expected value of a random variable&nbsp;[$]X[/$]?	Intuitively, it's the probability-weighted average of the outcomes of that variable.<div><br></div><div>if [$]X = {c_1, \dots, c_n}[/$]</div><div>[$]\mathbb{E}[X] = \sum_{i=1}^n c_i \cdot Pr(X=c_i)[/$]</div>
What is a Markov process? (not a Markov reward process, not a Markov decision process.)	A memoryless random process—a sequence of random states with the Markov property.<div><br></div><div>Formally it's a tuple [$](\mathcal{S}, \mathcal{P})[/$] where&nbsp;</div><div>[$]\mathcal{S}[/$] is a (finite) set of states<br></div><div>[$]\mathcal{P}[/$] is a state transition probability matrix<br>[$]\mathcal{P}_{ss'} = \mathbb{P}[S_{t+1}=s' | S_t = s][/$]<br></div>
What is a Markov reward process?	<div>A Markov process/chain with rewards.<br><br>\(\mathcal{S}\)&nbsp;is a (finite) set of states<br>\(\mathcal{P}\)&nbsp;is a state transition probability matrix<br>\(\mathcal{R}\)&nbsp;is a reward function&nbsp;\(\mathcal{R}_s = \mathbb{E}[R_{t+1} | S_t = s]\)<br>\(\gamma\)&nbsp;is a discount factor,&nbsp;\(\gamma \in [0, 1]\).</div>
What's the Law of iterated expectation?&nbsp;	If [$]X, Y[/$] random variables, then [$]\mathbb{E}(X) = \mathbb{E}[\mathbb{E}[X|Y]][/$]
What is a Markov decision process?	It is a Markov reward process with decisions—an environment in which all states are Markov states.<br>Formally, it is a tuple&nbsp;\((\mathcal{S}, \mathcal{A}, \mathcal{P}, \mathcal{R}, \gamma)\):<div><ul><li>\(\mathcal{S}\)&nbsp;= (finite) set of states</li><li>\(\mathcal{A}\)&nbsp;= set of actions</li><li>\(\mathcal{P}\)&nbsp;= state transition probability matrix</li><li>\(\mathcal{R}\)&nbsp;= reward function but with actions&nbsp;\(\mathcal{R}_s^a = \mathbb{E}[R_{t+1} | S_t = s, A_t = a]\)</li><li>\(\gamma\)&nbsp;= discount factor, \(\gamma \in [0, 1]\)</li></ul></div>
What is the Bellman optimality equation for the action-value function?	"<img src=""paste-b2f9d80de998f21c245fd0d697ee74b264bd8af6.png"">"
How does a siamese network measure similarity between images?	<div>[$]d(x^{(1)}, x^{(2)}) = ||f(x^{(1)}) - f(x^{(2)})||^2[/$] is small if the images are of the same person<br></div><div>[$]d(x^{(1)}, x^{(2)}) = ||f(x^{(1)}) - f(x^{(2)})||^2[/$] is large if different people</div>
Which two properties must a problem have for it to be solvable via dynamic programming?	1. Optimal substructure = solve some overall problem by breaking it down into pieces and solving those. The solution to the pieces tells you the solution to the problem.<div>2. Overlapping subproblems = the subproblems recur many times, so we are able to cache and reuse the results to subproblems.</div>
Reinforcement learning can be thought of as the <b>problem of optimal control</b>. Using MDPs as a formalism, there is an associated, simpler problem: that of <b>prediction</b>. What are three methods of solving these using dynamic programming?	"<img src=""https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fhydracid-main%2FoESoqGpyow.png?alt=media&amp;token=b87d25c9-0585-4eed-80dd-06d10683c05d"">"
"How does one measure the ""goodness"" of a policy&nbsp;\(\pi\)? When is a policy better than another?"	By looking at the respective value functions.<div>\[\pi &gt; \pi' \iff v_\pi(s) &gt; v_{\pi'}(s), \forall s \in \mathcal{S}\]<br></div>
What is the gist of policy evaluation?	You evaluate the policy&nbsp;\(\pi\)&nbsp;by finding&nbsp;\(v_\pi\). The way you do so is by iteratively updating&nbsp;\(v_\pi(s)\)&nbsp;to&nbsp;satisfy the Bellman expectation equation for all states&nbsp;\(s\).
What is the gist of policy improvement?	- given a value function&nbsp;\(v_\pi\)&nbsp;of policy&nbsp;\(\pi\)<div>- at each state act greedily toward this value function, i.e. pick the action with the most expected value</div><div>- taking these actions results in a new policy,&nbsp;\(\pi'\).</div>
What is the gist of policy <b>iteration</b>?	- given a policy&nbsp;\(\pi\)<div>- evaluate it&nbsp;\(\rightarrow v_\pi\)</div><div>- improve it&nbsp;\(\rightarrow\pi'\)</div><div>- repeat...</div>
What is the cumulative distribution function of a random variable&nbsp;[$]X[/$]?	\[F_X(x) = P(X \leq x)\]<br>
What is the relationship between the CDF and the PDF of a continuous variable?	The cumulative distribution function is the integral of its PDF:<br>\[\Phi_X(x) = \int_{-\infty}^x p_X(t)dt\]<br>where&nbsp;\(p_X\)&nbsp;is the PDF of&nbsp;\(X\).<br>
How is the probability of a continuous random variable&nbsp;\(X\)&nbsp;defined?	The probability of a random variable taking on value&nbsp;\(x \in (a, b)\)&nbsp;is:<br>\[\text{Pr}(x\in(a, b)) = \int _a ^b p(x) dx\]<br>where&nbsp;\(p(x)\)&nbsp;is the probability density function over&nbsp;\(x\).<br>
What are the properties of the probability density over a real-valued variable&nbsp;\(x\)?	1. Non-negativity:&nbsp;\(p(x) \geq 0\)<br>2. Law of total probability:\[\int _{-\infty}^{\infty} p(x)dx = 1\]<br>
What are the properties of the probability mass function for a discrete random variable&nbsp;\(X\)&nbsp;in sample space&nbsp;\(\Omega\)?	It is the function:&nbsp;\(m: \Omega \rightarrow [0, 1]\)&nbsp;with the following properties:<br>1.&nbsp;\(m(\omega) \geq 0, \forall \omega \in \Omega\)<br>2.&nbsp;\(\sum_{\omega \in \Omega} m(\omega) = 1\)
What is the density of a Gaussian distribution?	\[\text{PDF}(x) = \frac{1}{\sigma\sqrt{2 \pi} } \exp \Bigg(-\frac{(x-\mu)^2}{2\sigma^2} \Bigg)\]<br>
What is the linearity of the normal distribution?	"The linear combination of two normally distributed random variables&nbsp;\(X_1, X_2\)&nbsp;is also normally distributed:&nbsp;\[\begin{aligned}
Y &amp;= aX_1 + bX_2 \\
\mathbb{E}[Y] &amp;= a \mathbb{E}[X_1] + b \mathbb{E}[X_2] \\
\mathbb{V}[Y] &amp;= a^2 \mathbb{V}[X_1] + b^2 \mathbb{V}[X_2]
\end{aligned}\]<br>"
What is a discrete uniform distribution?	<div>The uniform distribution on a sample space&nbsp;\(\Omega\)&nbsp;containing&nbsp;\(n\)&nbsp;elements is the function&nbsp;</div><div>\(m\)&nbsp;defined as:</div><div>\[m(\omega) = \frac{1}{n},\ (\forall) \omega \in \Omega\]<br></div>
What is the probability mass function for a discrete uniform distribution&nbsp;\(U\)&nbsp;over a sample space with&nbsp;\(n\)&nbsp;elements?	\[\text{PMF}(x) = \frac{1}{n}\]<br>
What is maximum likelihood estimation? Give the formula.	Given a data set and a probabilistic model parameterised by some parameter&nbsp;\(\theta\), MLE is an algorithm that finds the&nbsp;\(\theta\)&nbsp;which maximises the likelihood of the data set under the model<br>\[\hat{\theta} = \mathrm{argmax}_\theta \mathrm{Pr}_X(x;\ \theta)\]<br>
How is likelihood defined?	In the case of a discrete distribution, likelihood is the probability mass function, the direct probability of each data point.<br>For a continuous distribution, likelihood is the probability density function of that distribution.
What is negative log-likelihood? Why use it instead of likelihood?	Negative log-likelihood is literally&nbsp;\(-\log \mathrm{Pr}_X(x)\), where&nbsp;\(\mathrm{Pr}_X(x)\)&nbsp;is the likelihood of a data point&nbsp;\(x\).<br><br>We use the logarithm because it simplifies a lot of calculations, and take the negative so we can minimise it instead of maximising the likelihood.<br><br>Negative log-likelihood is a quantification of error: how far is my model from perfectly fitting to the data?
If you wanted to fit a model to a dataset using MLE, how might you go about it, roughly?	"<ul>
<li><strong>write down what is observed data, and which are the parameters</strong></li>
<li><strong>write down the model for a single observation</strong> (i.e. define the random variable as being sampled from some distribution)</li>
<li><strong>write down the likelihood of a single observation</strong> - this will depend on the type of model you selected</li>
<li><strong>calculate the log likelihood of the dataset</strong>, keeping in mind that if the data are independent then you can multiply each observation's likelihood (i.e. sum the logarithm likelihoods)</li>
<li><strong>optimise over the unknown parameters</strong> by differentiating with regard to each parameter and solving an equation or a system of linear equations OR using numerical optimisation.</li></ul>"
How can you turn a constrained optimisation problem into an unconstrained optimisation problem?	"Apply a set of transformations, depending on the constraint:<br><ol>
<li>For \(\sigma &gt; 0\)&nbsp;we can take&nbsp;\(\sigma = e^\tau\)&nbsp;and optimise over&nbsp;\(\tau\in \mathbb{R}\).</li>
<li>For&nbsp;\(\sigma \in [0, 1]\)&nbsp;we can apply <a href=""https://www.notion.so/softmax-082b6df2f3874866b1c72f6fd969beef"">softmax</a> by taking&nbsp;\(\sigma = \frac{e^\tau}{1 + e^\tau}\)&nbsp;and optimising over&nbsp;\(\tau \in \mathbb{R}\).</li></ol>"
What is softmax? What is its general form?	Softmax is a function which takes in as input a vector&nbsp;\(\mathbf{x} = [x_1\ x_2\ \dots x_n]^\top\)&nbsp;and computes:<br>\[\mathrm{softmax}(x_i) = \frac{e^{x_i}}{e^{x_1} + \dots + e^{x_n}}\]<br>
Given a dataset and a probabilistic model, what does likelihood actually measure?	Likelihood is the degree to which a model describes the data observed. Observed data is just that: data one has observed. It may have counterfactually been different, with different likelihoods.
What does a linear regression model look like? What's the difference between this and a simple linear model?	Linear regression adds a noise parameter to a simple linear model:<br>\[y = mx + n + \epsilon\]Typically the noise is normally distributed:&nbsp;\(\epsilon \sim \mathcal{N}(\mu, \sigma^2)\).<br>
What is least squares estimation defined as, in terms of a residual vector?	Given a linear model of the form:<br>\(y \approx \beta_1x_1\)<br>with a residual vector<br>\(\epsilon = y - (\beta_1e_1 + \dots + \beta_Ke_K)\)<br>Least squares estimation is estimating parameters [$]\beta[/$] that minimise the mean square error:<br>[$]MSE = \frac{1}{n} \sum_i^n \epsilon_i^2[/$]
What is (root) mean squared error?	"\[\text{MSE}(f_\theta, \mathcal{D}) =\frac{1}{n}\sum_{k=1}^n
(y_k - f_\theta(x_k))^2\]often this is taken under the square root to become the RMSE –– which we use as a loss in training NNs."
What is the process of fitting a probabilistic model using Bayes' rule?	1. Define a likelihood&nbsp;\(p(y|\theta)\)<br>2. Define a prior over all hypotheses&nbsp;\(p(\theta)\)<br>3. Compute the posterior by updating beliefs with new observations&nbsp;\(p(\theta|y)\)<br>4. Predict using new belief
What does a function linear in both parameters and data look like? What about one linear in parameters only?	Linear in parameters and data<br>\[y(\mathbf{x}, \mathbf{w})=w_0 +w_1x_1+\dots+w_Dx_D=\mathbf{w}^\top \mathbf{x} + w_0\]<br>Linear in parameters only, the data is transformed by some set of functions&nbsp;\(\phi\):<br>\[y(\mathbf{x, w}) = \mathbf{w}^\top\phi(\mathbf{x}) + w_0\]<br>
What is Kullback-Leibler divergence, conceptually? How is it expressed for two distributions&nbsp;\(X, Y\)?	KL divergence measures the difference between a candidate distribution&nbsp;\(Y\)&nbsp;and a reference distribution&nbsp;\(X\). It's expressed as:<br>\[\text{KL}(X\|Y) = \mathbb{E}_{z \sim X}\Bigg[\log \frac{\text{Pr}_X(z)}{\text{Pr}_Y(z)}\Bigg] = \sum_z \text{Pr}_X(z) \log \frac{\text{Pr}_X(z)}{\text{Pr}_Y(z)}\]<br>
What is Monte-Carlo integration? How is it expressed for a function&nbsp;\(h(X)\)&nbsp;where&nbsp;\(X\)&nbsp;is an unknown random variable?	Monte-Carlo is a method of approximation by repeated sampling. We take many samples of the function and normalise them such that:<br>\[\mathbb{E}[h(X)]= \frac{1}{n}\sum_{i=1}^n h(x_i),\ x_i \sim X\]<br>
What is importance sampling? How is it related to Monte-Carlo integration? How is it different?	Importance sampling serves a similar purpose as MCI: approximating the values of a function, or distribution, by taking many samples from it. <br>It is different to MCI in that it takes biased samples. The point of this is to converge faster - with fewer samples - to the accurate probability distribution. It does this by sampling from a candidate distribution&nbsp;\(\tilde X\), and then adjusts for the bias using a penalty term (the denominator).<br><br>\[\mathbb{E}_{x \sim X}[h(x)] = \frac{1}{n} \sum_{i=1}^n h(x_i) \frac{Pr_X(x_i)}{Pr_{\tilde X}(x_i)}\]<br>
Given the formula for importance sampling for a function&nbsp;\(h(x)\):<br>\[\mathbb{E}_{x \sim \tilde X}[h(x)] = \frac{1}{n} \sum_{i=1}^n h(x_i) \frac{Pr_X(x_i)}{Pr_{\tilde X}(x_i)}\]what is the perfect sampling distribution&nbsp;\(\tilde X\)?<br>	The perfect sampling distribution is the distribution whose variance is 0. Because its variance is 0, we only need to sample once to find out the expectation of&nbsp;\(h(X)\).<br><br>This perfect sampling distribution takes the form:<br>\[\text{Pr}_{\tilde X}(z) = \kappa h(z) \text{Pr}_X(z)\]<br>
Given a concave function&nbsp;\(h\)&nbsp;and a continuous random variable&nbsp;\(X\), what is Jensen's inequality for expectations?	"\[h(\mathbb{E}[X])\geq \mathbb{E}[h(X)]\]<img src=""Untitled-603c078dc77fc2f3dca21bac5071711f01f1ee62.png""><br>"
What is a latent variable model (LVM)?	A latent variable model is a model where the output depends on a hidden random variable, for example:<br>\[X \sim f(Z) + \mathrm{MVN}(0, \sigma^2 I_2)\]<br>\(Z\)&nbsp;is the latent variable in this case.<br>
What is the likelihood of one observation in a latent variable model with a latent variable&nbsp;[$]Z[/$]?	[$]Pr_X(x) = \int_z Pr(x | Z=z) Pr_Z(z) dz = \mathbb{E}[Pr_X(x | Z)][/$]<br>(this is called marginalising [$]Z[/$], because we do not know what values it would take for us to see the single datapoint [$]x[/$])
How is a variational auto-encoder conceptually different from a standard latent variable model?	In a typical LVM setup, because we do not know the values of the latent variable&nbsp;\(Z\), we marginalise it out and sample using Monte-Carlo integration.<br><br>VAEs use importance sampling instead of MCI, so there is a sampling distribution&nbsp;\(\tilde Z\)&nbsp;which approximates&nbsp;\(Z\).
What are the three key ideas of a variational autoencoder (VAE)?	A VAE is a latent variable model with three insights:<br>1. We can use importance sampling using a sampling distribution&nbsp;\(\tilde Z\), which we learn using a neural network trained on each data point. <b>(learn sample distribution)</b><br>2. We now have two NNs: an encoder which gives us&nbsp;\(\tilde Z\)&nbsp;for each&nbsp;\(x_i\), and a decoder which takes that latent variable and outputs data by sampling the latent space. We can train these two NNs together to maximise a joint likelihood over both NNs parameter sets&nbsp;\(\mathcal{L}(\theta, \phi)\). <b>(train together)</b><br>3. We reparameterise the sampling distribution as&nbsp;\(\tilde Z^{(\phi, i)} = q(g_\phi(x_i), F)\), where&nbsp;\(F\)&nbsp;is exogenous noise. We do this so that the likelihood function is differentiable with respect to&nbsp;\(\phi\).&nbsp;<b>(reparameterisation trick)</b>
What are the components of a VAE? Can you draw a diagram?	"<img src=""paste-c7dcba284fabf7e2dc4752b14b10bdb508733fc1.jpg"">"
What is the likelihood for a single observation in a VAE? Remember, the likelihood is a function of two parameters:&nbsp;\(\theta, \phi\).	\[\text{Pr}_X(x) = \mathbb{E}_{z \sim \tilde Z^{(i, \phi)}} \Bigg[\text{Pr}_X(x|Z=z=q(g_\phi(x), F); \theta) \frac {\text{Pr}_Z(z)}{\text{Pr}_{\tilde Z^{(i, \phi)}}(z)} \Bigg]\]<br>
How can you fit a model parameterised by&nbsp;[$]\theta[/$] to a dataset [$]\mathcal{D}[/$] using Bayes' rule?	You would want to maximise posterior likelihood of the data given&nbsp;[$]\theta[/$]<br>[$]Pr(\mathcal{D} | \theta) = \frac { Pr(\theta |&nbsp;\mathcal{D}) Pr(\theta) } {Pr(\mathcal{D})} = \frac { Pr(\theta |&nbsp;\mathcal{D}) Pr(\theta) } {\int_\theta Pr(\theta |&nbsp;\mathcal{D}) Pr(\theta) d\theta}[/$]<br>
What is the expected value of a function whose input is a random variable&nbsp;\(X\)? (Think LOTUS.)	Expectation is the average value of a function&nbsp;\(h\)&nbsp;under a probability distribution&nbsp;\(X\).&nbsp;<br>If&nbsp;\(X\)&nbsp;is discrete:<br>\[\mathbb{E}_{x \sim X}[h(x)] = \sum_x p(x)h(x)\]<br>if it is continuous:<br>\[\mathbb{E}_{x \sim X}[h(x)] = \int_x p(x)h(x)dx\]<br>
What is Markov chain Monte-Carlo?	MCMC is a family of algorithms that share a common technique. We carry out Monte-Carlo integration (approximation of an integral) on samples that are taken using a Markov chain.
Given a probability distribution&nbsp;\(\mathbb{P}(x)\)&nbsp;which we cannot easily sample from, how does sampling work using a Markov chain?	Generate <b>dependent</b>&nbsp;samples by:<br>1. Initialising a random sample&nbsp;\(x\);<br>2. Generating another sample by applying some transition operator to&nbsp;\(x\):<br>\[x \rightarrow x' \rightarrow x'' \rightarrow \dots\]<br>
What is a downside of using Markov chains for sampling?	"Markov chains generate dependent samples, as in each&nbsp;[$]x'[/$] is generated from a previous&nbsp;[$]x[/$]. This means that for these samples to be useful in approximating the expectation of a function via Monte-Carlo, many more samples are needed than would be if they were independent.<br><br>(You're just not exploring the probability density ""fairly"".)"
How does <b>Gibbs sampling</b> work?	In Gibbs sampling, given a sample&nbsp;\(\mathbf{x}\), we take each of its components in turn,&nbsp;\(x_i\), and sample them while conditioning on the other components:<br>\[x_i' \sim p(x_i |x_1, x_2, \dots, x_{i-1}, x_{i+1}, \dots x_D)\]<br>
What would Gibbs sampling look like for a bivariate Gaussian distribution?	"<div>The process is as follows:</div><ul><li>initialise with a random point:&nbsp;\(x_0, y_0\)</li><li>in a loop<ul><li>sample&nbsp;\(x_i \sim \mathbb{P}(x_i|y_{i-1})\)</li><li>sample&nbsp;\(y_i \sim \mathbb{P}(y_i|x_i)\)</li></ul></li></ul>Eventually this explores the joint distribution&nbsp;\(\mathbb{P}(X, Y)\).<br><img src=""paste-da164b39e8a8ba3010374b3eacfca73302d4e10f.jpg"" data-editor-shrink=""true""><br>"
In the context of Gibbs sampling, what's a burn-in period?	Burn-in period = discard the initial K samples given that they were probably taken before the Markov chain converged on the probability distribution we want;
In the context of Gibbs sampling, what is thinning?	<b>thinning</b>&nbsp;= sample every K values from the Markov chain to reduce the dependence between each final sample;
What are the high-level steps of using Gibbs sampling on the Trueskill ranking system?	1. Initialise the skills&nbsp;[$] \mathbf{W} [/$] by sampling from a prior&nbsp;[$]p(W)[/$]<br>2. Sample the <b>performance differences</b>&nbsp;[$]t[/$] given the skills and game outcome.<br>3. Sample the <b>skills</b> given the performance differences and game outcome.<br>Repeat...
What's the Dirac delta function?	"A function that is 0 everywhere, except at 0.<br><br>[$]<span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\delta</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);"">(x) =
</span><span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\left</span><span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\{</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);"">
</span><span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\begin</span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">{</span><span style=""color: rgb(0, 119, 170); background-color: rgba(242, 241, 238, 0.6);"">array</span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">}</span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">{</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);"">ll</span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">}</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);"">
		1  </span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">&amp;</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);""> x=0 </span><span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\\</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);"">
		0 </span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">&amp;</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);""> x </span><span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\neq</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);""> 0
	</span><span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\end</span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">{</span><span style=""color: rgb(0, 119, 170); background-color: rgba(242, 241, 238, 0.6);"">array</span><span style=""color: rgb(153, 153, 153); background-color: rgba(242, 241, 238, 0.6);"">}</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);"">
</span><span style=""color: rgb(221, 74, 104); background-color: rgba(242, 241, 238, 0.6);"">\right</span><span style=""color: rgb(55, 53, 47); background-color: rgba(242, 241, 238, 0.6);"">.</span>[/$]"
What is Kurtosis?	"Kurtosis is a statistical measure of the ""tailedness"" of a distribution. Higher kurtosis means the tail decays toward zero more slowly."
What does it mean if a matrix has full rank?	It means that:<br>- its rank is equal to the number of columns or the number of rows, whichever is smaller<br>- it means that the matrix has a nonzero determinant if it is a square matrix<br>- it means that its columns are linearly independent, which means that their span is the entire vector space, e.g.&nbsp;\(\mathbb{R}^n\)<br>- it means that its transformation preserves the dimensionality of the input space (it doesn't compress it to a plane, line, point...)
How do you compute the cross-product of two vectors in&nbsp;\(\mathbb{R}^3\)?	"<div><span style=""color: #657b83;"">Given&nbsp;</span>\(\vec a, \vec b \in \mathbb{R}^3\),\(\vec a \times \vec b \in \mathbb{R}^3\)<span style=""color: rgb(101, 123, 131);"">&nbsp;is a vector which is orthogonal to&nbsp;</span>\(\vec a\)<span style=""color: rgb(101, 123, 131);"">&nbsp;and&nbsp;</span>\(\vec b\)<span style=""color: rgb(101, 123, 131);"">.</span></div><br><div>\[\vec a = \begin{bmatrix}a_1  \\ a_2  \\a_3\end{bmatrix}, \vec b = \begin{bmatrix}b_1\\b_2\\b_3\end{bmatrix}\]</div><div></div>"
What is the general definition of a <u>vector</u>?	A vector is any object which supports two operations:<br>1. Vector addition:&nbsp;\(\vec u + \vec v = \vec w\)<br>2. Scalar multiplication:&nbsp;\(c \vec u = \vec w\)&nbsp;
What is the span of two vectors&nbsp;\(\vec u, \vec v\)?	The span is the set of all vectors that can be obtained through linear combinations \(a \vec u + b\vec v\).
"What are the geometric ""invariants"" for how <u>linear transformations</u> affect space?"	The origin must remain the origin and all straight lines must remain straight lines (no curving).
In what way is matrix multiplication a composition?	"Matrices are linear transformations: functions which preserve two operations (addition and scalar multiplication). Multiplying matrices is analogous to composing two linear transformations/functions and applying the resulting function instead.<br>\[\begin{aligned}
T_1(\vec x) &amp;= A \vec x \\
T_2(\vec x) &amp;= B \vec x \\
T_1 \circ T_2(\vec x) =   T_1(T_2(\vec x)) &amp;= AB \vec x
\end{aligned}\]<br>"
What does the <u>determinant</u> measure? (geometrical intuition)	The determinant measures by how much a <u>linear transformation</u> scales any area (in 2D) or any volume (in 3D) and so on.<br><br>Determinants which are 0 compress space – they reduce area to nothing. Negative determinants invert the orientation of space (sheet of paper analogy).
What is the interpretation of a linear transformation whose determinant is 0? (geometric intuition)	A matrix whose determinant is 0 squishes space into a smaller dimension. Its inverse does not exist, because you cannot play the transformation in reverse to recover the original space. For example, compressing all of 2D space on a line is irreversible – there's no way to recover where all the original points were.
If the determinant of a matrix is 0, what does the rank of that matrix tell you?	First, the rank must be strictly smaller than the number of columns – since there is at least one linearly dependent column. The rank tells you how many dimensions are in the output of the transformation.<br><br>Example: a 3x3 matrix could have rank 3 (full rank, leaves space untouched), rank 2 (collapses 3D space to a plane), rank 1 (collapses to a line) or rank 0 (collapses everything to a point).
How do non-square matrices transform vectors?	"They ""move"" a vector from some number of dimensions&nbsp;\(n\)&nbsp;to another number of dimensions&nbsp;\(m\).<br><br>Example: the matrix&nbsp;\(\begin{bmatrix} 1 &amp; 2 \\ 3 &amp; 4 \\ 5 &amp; 6 \end{bmatrix}\)takes 2D vectors (represented by the 2 basis vectors in the columns) into 3D (rows show how each basis vector is now represented using 3 coordinates)."
What is the geometric intuition for the dot product?	The dot product of two vectors&nbsp;\(\vec u, \vec v\)&nbsp;is the length of the projection of&nbsp;\(\vec u\)&nbsp;onto&nbsp;\(\vec v\), scaled by the length of&nbsp;\(\vec v\).
In what sense are linear transformations and vectors duals?	LTs that take vectors to numbers (i.e.&nbsp;\(1 \times n\)&nbsp;matrices) are the same as taking the dot product of those vectors with the transpose of the matrix, i.e. a&nbsp;\(n \times 1\)&nbsp;vector. This means that a vector encodes a linear transformation.
How do you compute the cross product of two 3D vectors&nbsp;\(\vec u, \vec w\)&nbsp;in terms of a determinant?	"<img src=""paste-59cbd4a49b3a5f6bbd0940fe7c8766073f46dbb8.jpg"">"
How can linear transformations be seen as changes of basis?	To translate between one coordinate system and another, you apply a linear transformation/matrix whose columns are basis vectors.<br><br>e.g. if the new basis vectors are&nbsp;\(\begin{bmatrix} 2 \\ 1 \end{bmatrix}\), \(\begin{bmatrix} -1 \\ 1\end{bmatrix}\)&nbsp;, then the linear transformation&nbsp;\(\begin{bmatrix} 2 &amp; -1 \\ 1 &amp; -1 \end{bmatrix}\)transforms from our coordinate system to the new coordinate system.
How do you apply a linear transformation in a different coordinate system? (Think 3 matrices.)	You change to the target basis, apply the transformation, then change back to the original basis:&nbsp;<br>\[P^{-1}AP \vec v\]<br>
What is the core intuition of an eigenvector?	Eigenvectors are vectors which do not get knocked off their span by a particular linear transformation. They only get scaled by a constant, the associated eigenvalue&nbsp;\(\lambda\).<br><br>Example: when a transformation is a rotation, the axis along which this happens is an eigenvector.
How do you calculate eigenvectors and eigenvalues?	Solve:&nbsp;\(\det (A - \lambda I ) = 0\).<br><br>1. Subtract&nbsp;\(\lambda\)&nbsp;from the diagonals of the matrix<br>2. Compute the determinant<br>3. Find the roots of the <u>characteristic polynomial</u> in terms of&nbsp;\(\lambda\).
What is an eigenbasis?	An eigenbasis is a basis whose vectors are eigenvectors with respect to some linear transformation&nbsp;\(A\).&nbsp;
How can you use eigenbases to make computation easier?	You can apply some linear transformation&nbsp;\(A\)&nbsp;in one of its eigenbases instead, and then change back to the original basis. This has the advantage of converting&nbsp;\(A\)&nbsp;into a diagonal matrix, which is much easier to apply repeatedly.
What's a trick for computing the two eigenvalues of a 2x2 matrix?	Given a matrix:<br>\[A = \begin{bmatrix} a &amp; b \\ c &amp; d \end{bmatrix}\]\(\lambda_1, \lambda_2 = m \pm \sqrt{m^2 -p}\), where&nbsp;\(m = \text{avg}(a, d)\)&nbsp;and&nbsp;\(p = \det A\).<br>
What is the formula for the singular value decomposition of a matrix&nbsp;\(X\)? Where are the singular values in this formula?	Any matrix&nbsp;\(X\)&nbsp;can be decomposed into a product:<br>\[X = U \Sigma V^\top\]where&nbsp;\(U, V\)&nbsp;are orthogonal matrices and&nbsp;\(\Sigma\)&nbsp;is a diagonal matrix whose diagonal contains the singular values of&nbsp;\(X\).
What is the geometric intuition of singular value decomposition? Why would you want to decompose a matrix?	SVD is a way of viewing any linear transformation – any matrix – as a diagonal transformation (compression or dilation), so long as it is rotated before and after.
What's the law of the unconscious statistician?	LOTUS refers to calculating the expected value of a function&nbsp;\(g(X)\)&nbsp;given the random variable's probability density function&nbsp;\(p(X)\):<br>\[\mathbb{E}[g(X)] = \int_\mathbb{R} g(x)p(x)dx\]<br>
What is a convex function?	"A convex function is any function whose epigraph (the area above the graph) is a convex set (a set which contains the line connecting any two points in the set).<br><img src=""paste-d26730beaa7739971fc629839ca6bfc92b806c62.jpg"" data-editor-shrink=""true"">"
Given some function&nbsp;\(f\)&nbsp;and two points&nbsp;\(x_1, x_2\), what is Jensen's inequality? What does it express geometrically, and what is its interpretation?	Given some&nbsp;\(t \in [0, 1]\), Jensen's inequality is:<br>\[f(tx_1 + (1-t)x_2) \leq tf(x_1) + (1-t)f(x_2)\]The RHS in this inequality is a line –– the secant line that connects&nbsp;\(f(x_1)\)&nbsp;to&nbsp;\(f(x_2)\). What the inequality is saying is that the graph of the function is always going to be below this line.<br><br>Equivalently, this is saying that the function is convex; that its epigraph – the space above the function's graph – is a convex set.
What is the three-sigma rule? (Or the empirical rule.)	"It's a heuristic that tells you how much of the values lie within an interval estimate in a normal distribution.<br><img src=""paste-c84991cde66a0120c3cbb04628aac0f6d9be0197.jpg"" data-editor-shrink=""true"">"
What is variance? What is its formula in terms of expected value of a given random variable&nbsp;\(X\)?	Variance is a quantity that measures the amount of variation or dispersion of a set of values from a mean.<br>Formally, it is the expectation of the squared deviation of a random variable from its mean:<br>\[\mathbb{V}[X] = \mathbb{E}[(X-\mathbb{E}[X])^2] = \dots =  \mathbb{E}[X^2] - \mathbb{E}[X]^2\]<br>
What is principal component analysis?	PCA is a way of analysing data more efficiently when the data is high-dimensional. PCA isolates the dimensions along which most of the variation occurs in the data, and discards the ones that are less important.
What is the spectral norm of a matrix&nbsp;\(A\)? What does it measure, intuitively?	"<div>The spectral norm of a <a href=""https://www.notion.so/linear-transformation-LT-74bbebb2cdc6422b9adb4a089fcfa1e7"">linear transformation (LT)</a>&nbsp;\(A\)&nbsp;is its maximum <a href=""https://www.notion.so/singular-value-SV-e5d71434f0f4481793aaae6e27754a0d"">singular value (SV)</a>:</div><div>\[\sigma_{1}=\max _{\|\mathbf{x}\|_{2} \neq 0} \frac{\|A \mathbf{x}\|_{2}}{\|\mathbf{x}\|_{2}}\]<br></div>
<div>Intuitively, it measures the maximum amount that a matrix can “stretch” a vector.<br></div>"
What is a convex set?	"<span style=""background-color: rgb(255, 255, 255);"">A a set which contains the line connecting any two points in the set.</span>"
What do the two parameters&nbsp;\(\gamma, \beta\)&nbsp;in a batch normalisation layer do?	BN normalises the features of the previous layer's activations to zero mean and unit variance. It then shifts to some new mean&nbsp;\(\gamma\)&nbsp;and scales to a new variance&nbsp;\(\beta\)&nbsp;by doing an element-wise multiplication:<br>\[\text{BN}_i = \gamma \odot \hat A_i + \beta\]where&nbsp;\(\hat A_i\)&nbsp;is the normalised&nbsp;\(i\)-th activation.
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What slicing operation is both equivalent to <font color='#ff5500'>x[:, :, 0]</font> if x is 3D, and equivalent to <font color='#ff5500'>x[:, :, :, 0]</font> if x is 4D?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What slicing operation is both equivalent to <font color='#ff5500'>x[:, :, 0]</font> if x is 3D, and equivalent to <font color='#ff5500'>x[:, :, :, 0]</font> if x is 4D?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>x[..., 0]</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How would you use unpacking with the following objects (i.e. so that every variable you define is a non-tuple object):<br><br><div class='exerciseprecontainer'><pre>plt.subplots()<br>plt.subplots(1, 2)<br>plt.subplots(2, 2)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How would you use unpacking with the following objects (i.e. so that every variable you define is a non-tuple object):<br><br><div class='exerciseprecontainer'><pre>plt.subplots()<br>plt.subplots(1, 2)<br>plt.subplots(2, 2)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<div class='exerciseprecontainer'><pre>fig, ax = plt.subplots()<br>fig, (ax1, ax2) = plt.subplots(1, 2)<br>fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What keyword argument would make this matplotlib graph look less cramped?<br><br><img src='7c8e2f06fb657fc40388946ffb6ff66117e8bf7945d38ca3a0fe7646f66b7be6.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What keyword argument would make this matplotlib graph look less cramped?<br><br><img src='7c8e2f06fb657fc40388946ffb6ff66117e8bf7945d38ca3a0fe7646f66b7be6.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use <font color='#ff5500'>sharey=True</font> in the function <font color='#ff5500'>plt.subplots()</font>, then you get:<br><br><img src='b04db385f90e5c8362914dd949484f30fa880038eba5780cb848768972461abc.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What shape of arguments does <font color='#ff5500'>torch.linalg.solve</font> accept, and what does this function do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What shape of arguments does <font color='#ff5500'>torch.linalg.solve</font> accept, and what does this function do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It solves linear equations.<br><br>It can work like&nbsp;<font color=""#ff5500"">solve(A, b)</font>&nbsp;where&nbsp;<font color=""#ff5500"">A.shape = (n, n)</font>&nbsp;and&nbsp;<font color=""#ff5500"">b.shape = n</font>, then it returns the soln&nbsp;<font color=""#ff5500"">x</font>&nbsp;to the matrix eqn&nbsp;<font color=""#ff5500"">Ax=b</font>.<br><br>Alternatively, if&nbsp;<font color=""#ff5500"">A.shape = (*, n, n)</font>&nbsp;and&nbsp;<font color=""#ff5500"">b.shape = (*, n)</font>, it interprets this as a system of matrix equations, and inverts them all, returning&nbsp;<font color=""#ff5500"">x</font>&nbsp;with&nbsp;<font color=""#ff5500"">x.shape = (*, n)</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What kind of problem does this image describe, and what NN technique fixes it?<br><br><img src='83af2dfdb5ea7787fd12353dfc70d3785129428d105a6cdb12b29e4b12f86b4f.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What kind of problem does this image describe, and what NN technique fixes it?<br><br><img src='83af2dfdb5ea7787fd12353dfc70d3785129428d105a6cdb12b29e4b12f86b4f.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is a failure to <b>normalize</b> the data, so that different features are on very different scales. Simple forms of gradient descent behave badly in this case, and are slow to converge.<br><br>This can be fixed with <b>batch normalization</b>.<br><br><img src='6fe81c566f69a9fbc2a96c9befced02df75d18d1f41c9165a5ece1904663bfef.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'><b>X</b> is just another network layer that gets inserted between a hidden layer and the next hidden layer. Its job is to take the outputs from the first hidden layer and normalize them before passing them on as the input of the next hidden layer.</div><br>What is the name for <b>X</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'><b>X</b> is just another network layer that gets inserted between a hidden layer and the next hidden layer. Its job is to take the outputs from the first hidden layer and normalize them before passing them on as the input of the next hidden layer.</div><br>What is the name for <b>X</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Batch Norm</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the roles of \(\beta\) and \(\gamma\) here?<br><br><img src=""6a82620246a0fab1c0503d6830c6939a4fa43c437bc248ea6280c984653f9683.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the roles of \(\beta\) and \(\gamma\) here?<br><br><img src=""6a82620246a0fab1c0503d6830c6939a4fa43c437bc248ea6280c984653f9683.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They are learnable, i.e. learned by the network via gradient descent.<br><br>They are used to apply a linear transformation to the data before sending it to the output (because zero mean and unit variance might not result in the best possible inference results).<br><br><img src='1e86f780184a4e4ef2bd57b9dc02370f6eceac3cb46e88df95516703de19e613.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why is the <b>moving average</b> calculated?<br><br><img src='1e86f780184a4e4ef2bd57b9dc02370f6eceac3cb46e88df95516703de19e613.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why is the <b>moving average</b> calculated?<br><br><img src='1e86f780184a4e4ef2bd57b9dc02370f6eceac3cb46e88df95516703de19e613.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Because this is required when performing inference on a single element, rather than training on a batch.<br><br>In this case, the moving average params are used for normalisation, rather than the batch mean and std dev (which wouldn't make sense in this context, because there's only one datapoint to calculate them from).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which major class of neural networks is <b>Batch Norm</b> not applicable for, and why?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which major class of neural networks is <b>Batch Norm</b> not applicable for, and why?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Batch Norm is not applicable for <b>recurrent neural networks</b>, because activations after each timestep have different distributions, and it would be impractical.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are two mathematical theories for why <b>Batch Norm</b> works?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are two mathematical theories for why <b>Batch Norm</b> works?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	(1) <b>Internal Covariate Shift</b><br><br>This means that the distribution of different layers of your neural network (which covary with each other) shifts as you go deeper into the network. This is bad because we want them to all be around the same values (for GD reasons).<br><br>(2) <b>Loss and Gradient Smoothing</b><br><br>In a typical network, the loss landscape isn't smooth and convex, it's bumpy. Batch Norm smoothes the loss landscape, making GD easier.<br><br><img src='46a7d53faa85612e33c8d8010ec22512a253c391d14ca388c66f5c66d2d3b84f.jpg'><br><br>The paper publishing this result also challenged the claim that Batch Norm reduces ICS (seemingly the challenge hasn't been refuted).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Is this a 1D or 2D convolution?<br><br><img src='5f2d7f1e4da7f19f2fc7da57681d99d55b77b9d362c80d87e41dfdc3ae8e394a.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Is this a 1D or 2D convolution?<br><br><img src='5f2d7f1e4da7f19f2fc7da57681d99d55b77b9d362c80d87e41dfdc3ae8e394a.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is 1D.<br><br>Although the input and kernel are 2D, the kernel only slides along one dimension (because it has the same number of rows as the input).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If the input is 2D and has multiple channels, then how many dimensions will the kernel have, and how many dimensions does this convolution operation have?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If the input is 2D and has multiple channels, then how many dimensions will the kernel have, and how many dimensions does this convolution operation have?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The kernel will have to be 3D, and this is a 2D convolution. See visualisation:<br><br><img src=""Conv_multiple_channel_3d.gif"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two fine-grained ways we can control the operation of a convolution?<br><br>Which one increases the output size, and which decreases it?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two fine-grained ways we can control the operation of a convolution?<br><br>Which one increases the output size, and which decreases it?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	We can change the <b>padding</b>, i.e. the number of cells we apped to the sides of the input before taking conv. This increases the output size.<br><br>We can change the <b>stride</b>, i.e. the number of steps made by the kernel when it moves along the array (think of it as the sampling density for the kernel). Stride is 1 by default; a higher stride will decrease the output size.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following way of defining a module ensures the weights and biases will show up when you call a particular method on the network.<br><br>What method is that, and why is this useful?<br><br><div class='exerciseprecontainer'><pre>def __init__(self, weights: t.Tensor, biases: t.Tensor):<br>    super().__init__()<br>    self.weights = nn.Parameter(weights) # wrapping a tensor in nn.Parameter<br>    self.biases = nn.Parameter(biases)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following way of defining a module ensures the weights and biases will show up when you call a particular method on the network.<br><br>What method is that, and why is this useful?<br><br><div class='exerciseprecontainer'><pre>def __init__(self, weights: t.Tensor, biases: t.Tensor):<br>    super().__init__()<br>    self.weights = nn.Parameter(weights) # wrapping a tensor in nn.Parameter<br>    self.biases = nn.Parameter(biases)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The method is <font color='#ff5500'>model.parameters()</font> (once you've already defined a model as an instance of the class above).<br><br>This is useful because it means you can easily define an optimiser as a function of all the parameters of the model. This way, PyTorch can detect and update them appropriately.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>RNN</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>RNN</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Recurrent Neural Network</b>.<br><br>Different to <b>ResNets</b>!

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Three questions about the following image:<ul><li>What type of neural network is on the right?</li><li>What type of mapping do the long curved arrows represent?</li><li>What is the ame for the type of connections represented by the long curved arrows?</li></ul><img src='837ea6834684ff054488f5c63b4f6ac8a48d1e8cbacb6991839ffeb60f97c60c.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Three questions about the following image:<ul><li>What type of neural network is on the right?</li><li>What type of mapping do the long curved arrows represent?</li><li>What is the ame for the type of connections represented by the long curved arrows?</li></ul><img src='837ea6834684ff054488f5c63b4f6ac8a48d1e8cbacb6991839ffeb60f97c60c.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li>This is a <b>Residual Neural Network</b>, or <b>ResNet</b></li><li>The arrows are <b>identity mappings</b></li><li>They are called <b>shortcut connections</b> in the paper this image is from</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The image below is a <b>residual block</b>. Which part of this network is actually called the residual, and why is it called that?<br><br><img src=""4ce4b9d8ccc1b188f9e787d08bb108590a021f0a52fe8488a8d7cb7d0a95dea7.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The image below is a <b>residual block</b>. Which part of this network is actually called the residual, and why is it called that?<br><br><img src=""4ce4b9d8ccc1b188f9e787d08bb108590a021f0a52fe8488a8d7cb7d0a95dea7.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The function \(F(x)\) is the residual, i.e. it's the residual part of the output \(F(x)+x\). The idea is that this mapping is the identity by default, and \(F(x)\) represents the difference (residual) between the ideal output and the identity.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The image below is an equation from the paper <b>Deep Residual Learning for Image Recognition</b>. What happens when \(F\) and \(x\) are different dimensions?<br><br><img src='22e3f01e35314a4e378b4f511fb39cc742508b8ae1aa06ac14d6399fe1f20fd2.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The image below is an equation from the paper <b>Deep Residual Learning for Image Recognition</b>. What happens when \(F\) and \(x\) are different dimensions?<br><br><img src='22e3f01e35314a4e378b4f511fb39cc742508b8ae1aa06ac14d6399fe1f20fd2.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The equation doesn't work, and so we instead need to perform a linear mapping to match dimensions:<br><br><img src='e1af0803eab9d2a59626e6bf6fcd5758fdc4f154885a248d60faf0e14bddb51d.jpg'><br><br>\(W_s\) could be a projection matrix (to decrease dimensions), or a zero-padding matrix (to increase dimensions).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What was the groundbreaking paper which introduced the concept of <b>Residual Neural Networks</b> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What was the groundbreaking paper which introduced the concept of <b>Residual Neural Networks</b> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Deep Residual Learning for Image Recognition</b>, published by Microsoft Research.<br><br>It led to 1st-place wining entries in all 5 main tracks of the ImageNet and COCO 2015 competitions.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>degradation problem</b>, and what logical response to this problem led to the development of <b>ResNets</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>degradation problem</b>, and what logical response to this problem led to the development of <b>ResNets</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Degradation problem</b> = increasing the depth of a network leads to a decrease in performance on both test and training data. Unexpectedly, this isn't caused by overfitting, and adding more layers can actually increase the training error.<br><br><b>Solution</b> - this problem shouldn't exist if we just construct the deep network from the shallow one by just adding identity mappings to skip layers. If the original problem wasn't caused by overfitting, then this should work at least as well, because the original shallower model is actually a submodel of the deeper one.<br><br><img src='4ce4b9d8ccc1b188f9e787d08bb108590a021f0a52fe8488a8d7cb7d0a95dea7.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	After AlexNet, people proposed four different explanations for why really deep (&gt;50 layers) neural networks were hard to train, in particular why their results were worse than shallow NNs.<br><br>What were those reasons?
	<br>

	
		<br>
		<div id=""hint"" class=""hidden"">
			<p class=""trigger"">[ click to show hint ]</p>
			<p class=""payload"">Two were statistical (to do with behaviour of the gradients and the activations respectively). One came from statistical learning theory. One was to do with learning the identity map.</p>
		</div>
	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	After AlexNet, people proposed four different explanations for why really deep (&gt;50 layers) neural networks were hard to train, in particular why their results were worse than shallow NNs.<br><br>What were those reasons?
	<br>

	
		<br>
		<div id=""hint"" class=""shown"">
			<p class=""payload"">Two were statistical (to do with behaviour of the gradients and the activations respectively). One came from statistical learning theory. One was to do with learning the identity map.</p>
		</div>
	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li><b>Exploding / vanishing gradients</b> (numerical instability - gradients either blow up or go to zero)</li><li><b>Internal covariate shift</b> (the distribution (mean, std) of activations change throughout the network layers)</li><li><b>Overfitting</b> (classic statistical learning theory, although this was a pretty bad explanation because test and training error saw the same outperformance pattern for deep NNs relative to shallow ones)</li><li><b>Hard to learn identity map via SGD</b> (which means it's hard to find the ""simpler version"" within the deep network)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which two breakthroughs came through for the field of ML in 2012 and 2015 respectively?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which two breakthroughs came through for the field of ML in 2012 and 2015 respectively?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	In 2012, <b>AlexNet</b> (the deep CNN) was created, this revolutionised the field by trashing previous ImageNet records (this was called the <b>ImageNet moment</b>!).<br><br>In 2015, <b>Residual Neural Network</b>&nbsp;beat human benchmarks in ImageNet.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Two advantages of skip connections are <b>improving optimisation</b> and <b>implicit ensembles</b>. Explain these two.
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Two advantages of skip connections are <b>improving optimisation</b> and <b>implicit ensembles</b>. Explain these two.
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Improve optimisation</b><ul><li>Faster convergence by GD algs, because the path between the loss and the layer is made shorter by the shortcut connections</li></ul><b>Implicit ensembles</b><ul><li>Skip connections give us a bunch of different paths between layers</li><li>In practice, this can often mean the NN performs different operations on different combinations of layers and then averages them together</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will go wrong with this code?<br><br><div class='exerciseprecontainer'><pre>model = models.resnet34()<br>pretrained_categories = predict(model, images)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will go wrong with this code?<br><br><div class='exerciseprecontainer'><pre>model = models.resnet34()<br>pretrained_categories = predict(model, images)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The model isn't <b>pretrained</b>, so the weights will just be randomly initialised.<br><br>To fix this, we pass <font color='#ff5500'>pretrained=True</font> into the call for <font color='#ff5500'>models.resnet34()</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is an example of the <font color=""#ff5500"">nn.Sequential</font> class, for chaining together different layers and modules in a neural network.<br><br>What will <font color=""#ff5500"">self._modules</font> return in the code below? And what important method is missing in the class definition?<br><br><div class=""exerciseprecontainer""><pre>class Sequential(nn.Module):<br><br>    def __init__(self, *modules: nn.Module):<br>        super().__init__()<br>        for i, mod in enumerate(modules):<br>            self.add_module(str(i), mod)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is an example of the <font color=""#ff5500"">nn.Sequential</font> class, for chaining together different layers and modules in a neural network.<br><br>What will <font color=""#ff5500"">self._modules</font> return in the code below? And what important method is missing in the class definition?<br><br><div class=""exerciseprecontainer""><pre>class Sequential(nn.Module):<br><br>    def __init__(self, *modules: nn.Module):<br>        super().__init__()<br>        for i, mod in enumerate(modules):<br>            self.add_module(str(i), mod)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>self._modules</font> returns a dictionary mapping module names to the actual module.<br><br>The <font color='#ff5500'>forward</font> method is missing (for propagating values forward through the network). It might look something like this:<br><br><div class='exerciseprecontainer'><pre>def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>    for mod in self._modules.values():<br>        x = mod(x)<br>    return x</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>a.shape = (3, 1, 2)</font>, then which of the following will raise an error?<br><br><div class='exerciseprecontainer'><pre>b = t.broadcast_to(a, (1, 3, 1, 2))<br>b = t.broadcast_to(a, (3, 4, 2))<br>b = t.broadcast_to(a, (3, 1, 2, 1))<br>b = t.broadcast_to(a, (3, 1, 4))</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>a.shape = (3, 1, 2)</font>, then which of the following will raise an error?<br><br><div class='exerciseprecontainer'><pre>b = t.broadcast_to(a, (1, 3, 1, 2))<br>b = t.broadcast_to(a, (3, 4, 2))<br>b = t.broadcast_to(a, (3, 1, 2, 1))<br>b = t.broadcast_to(a, (3, 1, 4))</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first two are fine, the last two raise errors.<br><br>Broadcasting rules are: (1) can prepend 1s to match number of dims, and (2) can extend singleton dimensions to be anything.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output?<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x = torch.tensor([1, 2, 3])<br>&gt;&gt;&gt; torch.broadcast_to(x, (3, 3))</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output?<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x = torch.tensor([1, 2, 3])<br>&gt;&gt;&gt; torch.broadcast_to(x, (3, 3))</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<div class='exerciseprecontainer'><pre>tensor([[1, 2, 3],<br>        [1, 2, 3],<br>        [1, 2, 3]])</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this:<br><br><div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; x = t.zeros((1, 2, 3))<br>&gt;&gt;&gt; x.stride()</pre></div><br>and why?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this:<br><br><div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; x = t.zeros((1, 2, 3))<br>&gt;&gt;&gt; x.stride()</pre></div><br>and why?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The output will be <font color='#ff5500'>(6, 3, 1)</font>.<br><br>Explanation: the nth item in the list is the number of steps it takes to move one object in the nth dimension.<br><br>So it takes one step in the last dimension, 3 steps to move in the second dimension (because the last dim has size 3), and 2x3=6 steps to move in the first dimension.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which function from <font color='#ff5500'>pytorch</font> can be used to check that two tensors are close to each other (within some machine error)?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which function from <font color='#ff5500'>pytorch</font> can be used to check that two tensors are close to each other (within some machine error)?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">torch.testing.assert_close</font><br><br>This function takes in two tensors, and raises an <font color=""#ff5500"">AssertionError</font> if they are different (in shape or values).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this kind of initialisation called, and what is the reason behind it?<br><br><img src='7d2176f2c5909827f1d8795637c36880f7718420e41d673705a0671b6d54b790.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this kind of initialisation called, and what is the reason behind it?<br><br><img src='7d2176f2c5909827f1d8795637c36880f7718420e41d673705a0671b6d54b790.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The name is <b>Xavier (uniform) initialisation</b>, and the reason is that it preserves variances.<br><br>To be more specific, if a fully connected layer had all activations iid \(N(0, 1)\), then the sum of weighted inputs for each node in the next layer would also be \(N(0, 1)\) (since for each neuron, the sum has <font color='#ff5500'>in_features</font> independent terms).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the name for the green and blue nodes in this graph?<br><br><img src='1fcaae1e45085b95753c5b247b57e440623eaa8437ba18d010f001657bf41820.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the name for the green and blue nodes in this graph?<br><br><img src='1fcaae1e45085b95753c5b247b57e440623eaa8437ba18d010f001657bf41820.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The green is a <b>root</b> node, the blue are <b>leaves</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What operation kicks off the backward pass in this DAG, and which node is the operation performed on?<br><br><img src='1fcaae1e45085b95753c5b247b57e440623eaa8437ba18d010f001657bf41820.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What operation kicks off the backward pass in this DAG, and which node is the operation performed on?<br><br><img src='1fcaae1e45085b95753c5b247b57e440623eaa8437ba18d010f001657bf41820.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The backward pass kicks off when <font color='#ff5500'>.backward()</font> is called on the DAG root.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color='#ff5500'>torch.Torch</font>. What is the purpose of the <font color='#ff5500'>array</font> attribute?<br><br><div class='exerciseprecontainer'><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color='#ff5500'>torch.Torch</font>. What is the purpose of the <font color='#ff5500'>array</font> attribute?<br><br><div class='exerciseprecontainer'><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>array</font> tracks the underlying array, i.e. the numerical value of the tensor object.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color='#ff5500'>torch.Torch</font>. What is the purpose of the <font color='#ff5500'>requires_grad</font> attribute?<br><br><div class='exerciseprecontainer'><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color='#ff5500'>torch.Torch</font>. What is the purpose of the <font color='#ff5500'>requires_grad</font> attribute?<br><br><div class='exerciseprecontainer'><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	If <font color='#ff5500'>requires_grad</font> is true, then performing operations on this tensor will track relevant data for backprop.<br><br>If it is false, autograd will not record operations on this tensor, and it will become a leaf in the DAG.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color='#ff5500'>torch.Torch</font>. What is the purpose of the <font color='#ff5500'>grad</font> attribute?<br><br><div class='exerciseprecontainer'><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color='#ff5500'>torch.Torch</font>. What is the purpose of the <font color='#ff5500'>grad</font> attribute?<br><br><div class='exerciseprecontainer'><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>grad</font> is used to store the value of the gradients, during <font color='#ff5500'>.backward()</font> calls (if <font color='#ff5500'>requires_grad</font> is true).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color=""#ff5500"">torch.Torch</font>. What is the purpose of the <font color=""#ff5500"">recipe</font> attribute?<br><br><div class=""exerciseprecontainer""><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of a class definition meant to replace <font color=""#ff5500"">torch.Torch</font>. What is the purpose of the <font color=""#ff5500"">recipe</font> attribute?<br><br><div class=""exerciseprecontainer""><pre>class Tensor:<br><br>    array: Arr<br><br>    requires_grad: bool<br><br>    grad: Optional[""Tensor""]<br><br>    recipe: Optional[Recipe]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">recipe</font> stores extra information necessary for running backprop, such as:<ul><li>the value of the function</li><li>the parent tensors which are used when evaluating the function</li><li>the function's derivative (if it is differentiable)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following code is part of an attempt to build a backpropagation framework within PyTorch.<br><br>Explain what the purpose of <font color=""#ff5500"">BACK_FUNCS</font> is here, and why the index <font color=""#ff5500"">[0]</font> is used.<br><br><div class=""exerciseprecontainer""><pre>BACK_FUNCS: defaultdict[Callable, dict[int, Callable]] = defaultdict(dict)<br>BACK_FUNCS[np.log][0] = log_back</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following code is part of an attempt to build a backpropagation framework within PyTorch.<br><br>Explain what the purpose of <font color=""#ff5500"">BACK_FUNCS</font> is here, and why the index <font color=""#ff5500"">[0]</font> is used.<br><br><div class=""exerciseprecontainer""><pre>BACK_FUNCS: defaultdict[Callable, dict[int, Callable]] = defaultdict(dict)<br>BACK_FUNCS[np.log][0] = log_back</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The purpose of <font color=""#ff5500"">BACK_FUNCS</font> is to creat e a dictionary which maps forward functions to functions which calculate their gradients.<br><br>This is necessary to perform backpropagation, because we need some way of going backwards through the computational graph.<br><br>The <font color=""#ff5500"">[0]</font> index is because functions might have multiple arguments, and the gradients might be different wrt each one. For instance:<br><br><div class=""exerciseprecontainer""><pre>def multiply_back0(grad_out: Arr, out: Arr, x: Arr, y: Arr) -&gt; Arr:<br>    """"""<br>    Backwards function for x * y wrt argument 0 aka x.<br>    """"""<br>    return unbroadcast(y * grad_out, x)<br><br>def multiply_back1(grad_out: Arr, out: Arr, x: Arr, y: Arr) -&gt; Arr:<br>    """"""<br>    Backwards function for x * y wrt argument 1 aka y.<br>    """"""<br>    return unbroadcast(x * grad_out, y)<br><br>BACK_FUNCS[np.multiply][0] = multiply_back0<br>BACK_FUNCS[np.multiply][1] = multiply_back1</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Given the code below:<br><br><div class=""exerciseprecontainer""><pre>def wrap(x: int) -&gt; list[int]:<br>    return [x]<br><br>def add(x: int, y: int) -&gt; int:<br>    return x + y<br><pre>def flat_map(func: Callable[[int], list[int]], l: list[int]) -&gt; list[int]:<br>    out = []<br>    for element in l:<br>        out.extend(func(element))<br>    return out</pre></pre></div><br>which of the following would result in a type check error?<br><br><div class=""exerciseprecontainer""><pre>flat_map(wrap, [1, 2, 3])<br>flat_map(add, [1, 2, 3])</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Given the code below:<br><br><div class=""exerciseprecontainer""><pre>def wrap(x: int) -&gt; list[int]:<br>    return [x]<br><br>def add(x: int, y: int) -&gt; int:<br>    return x + y<br><pre>def flat_map(func: Callable[[int], list[int]], l: list[int]) -&gt; list[int]:<br>    out = []<br>    for element in l:<br>        out.extend(func(element))<br>    return out</pre></pre></div><br>which of the following would result in a type check error?<br><br><div class=""exerciseprecontainer""><pre>flat_map(wrap, [1, 2, 3])<br>flat_map(add, [1, 2, 3])</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>flat_map</font> is expecting its first argument to be a function sending <font color='#ff5500'>int -&gt; list[int]</font>.<br><br><font color='#ff5500'>wrap</font> does this, but <font color='#ff5500'>add</font> doesn't.<br><br>So the first one is fine, but the second one results in an error.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following Python function accepts a function:<br><br><div class='exerciseprecontainer'><pre>def apply_func(a: int, b: int, func) -&gt; int:<br>    return func(a, b)</pre></div><br>What would be an appropriate way to type-check <font color='#ff5500'>func</font> in this situation?
	<br>

	
		<br>
		<div id=""hint"" class=""hidden"">
			<p class=""trigger"">[ click to show hint ]</p>
			<p class=""payload"">Use <font color='#ff5500'>typing.Callable</font></p>
		</div>
	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following Python function accepts a function:<br><br><div class='exerciseprecontainer'><pre>def apply_func(a: int, b: int, func) -&gt; int:<br>    return func(a, b)</pre></div><br>What would be an appropriate way to type-check <font color='#ff5500'>func</font> in this situation?
	<br>

	
		<br>
		<div id=""hint"" class=""shown"">
			<p class=""payload"">Use <font color='#ff5500'>typing.Callable</font></p>
		</div>
	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use <font color='#ff5500'>Callable[[int, int], int]</font>. This is because the function <font color='#ff5500'>func</font> needs to take in two integers and return an integer.<br><br><img src='3b90f27b7616863c2d15255bdb65b029aa59f10f2409d0a18f45ebe8c97e0fc3.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's another way to write the following code?<br><br><div class='exerciseprecontainer'><pre>from typing import Union<br><br>t1 = Union[type1, None]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's another way to write the following code?<br><br><div class='exerciseprecontainer'><pre>from typing import Union<br><br>t1 = Union[type1, None]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<div class='exerciseprecontainer'><pre>from typing import Optional<br><br>t1 = Optional[type1]</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of gradient descent is this code for?<br><br><img src='d9e62c138753179bc1f717eb79cb9bd8f233d22f1ee8bebcd140b3fade6c3b78.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of gradient descent is this code for?<br><br><img src='d9e62c138753179bc1f717eb79cb9bd8f233d22f1ee8bebcd140b3fade6c3b78.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Batch gradient descent</b>.<br><br>This is because it's using all the data in each learning step.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of gradient descent is this code for?<br><br><img src='76426f67c3d8a61cba85ea572df40d0addc0a2d315a543409ffcb67c2e533184.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of gradient descent is this code for?<br><br><img src='76426f67c3d8a61cba85ea572df40d0addc0a2d315a543409ffcb67c2e533184.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Stochastic gradient descent</b>.<br><br>This is because it's using just one datapoint in each learning step.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of gradient descent is this code for?<br><br><img src='1614baae7cecf4d68a378c41fd71df0dc6cc83ebd619dc3f63c93241281e1e14.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of gradient descent is this code for?<br><br><img src='1614baae7cecf4d68a378c41fd71df0dc6cc83ebd619dc3f63c93241281e1e14.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Minibatch gradient descent</b>.<br><br>This is because it's splitting the data up into batches (each containing more than one datapoint), and looping through them for each epoch.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(\theta\) are the network's parameters and \(v_t\) are the steps, then what kind of gradient descent is this formula for?<br><br><img src='7aa9ce134a3a4431bb716528cdc19e1d55f352abee82dbeafbea3eefce910a8e.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(\theta\) are the network's parameters and \(v_t\) are the steps, then what kind of gradient descent is this formula for?<br><br><img src='7aa9ce134a3a4431bb716528cdc19e1d55f352abee82dbeafbea3eefce910a8e.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Momentum</b>.<br><br>\(\gamma\) is taking the role of the momentum factor.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(\theta\) are the network's parameters and \(v_t\) are the steps, and \(G_{t, ii}\) is a diagonal matrix where each element is the sum of the squares of all previous gradients in dimension \(i\), then what kind of gradient descent is this formula for?<br><br><img src='eb85f80fdc6fb2416767641793f21070bd34f12ed9343d1c204f3f65bea66a1c.jpg'><br><img src='3b3eed3036c46f33ba6f1901e11327be7c4deb19f790a942cdb6eefe4f56c57d.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(\theta\) are the network's parameters and \(v_t\) are the steps, and \(G_{t, ii}\) is a diagonal matrix where each element is the sum of the squares of all previous gradients in dimension \(i\), then what kind of gradient descent is this formula for?<br><br><img src='eb85f80fdc6fb2416767641793f21070bd34f12ed9343d1c204f3f65bea66a1c.jpg'><br><img src='3b3eed3036c46f33ba6f1901e11327be7c4deb19f790a942cdb6eefe4f56c57d.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>AdaGrad</b>.<br><br>This is distinguished by the fact that the learning rate is automatically tuned, but also that it constantly increases, which can be a problem.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(\theta\) are the network's parameters and \(v_t\) are the steps, then what kind of gradient descent are these formulae for?<br>\[\begin{aligned}m_t &amp; =\beta_1 m_{t-1}+\left(1-\beta_1\right) g_t \\v_t &amp; =\beta_2 v_{t-1}+\left(1-\beta_2\right) g_t^2\end{aligned}\]...then scaling by two hyperparameters:<br>\[\begin{aligned}\hat{m}_t &amp; =\frac{m_t}{1-\beta_1^t} \\\hat{v}_t &amp; =\frac{v_t}{1-\beta_2^t}\end{aligned}\]...and finally making this gradient update:<br>\[\theta_{t+1}=\theta_t-\frac{\eta}{\sqrt{\hat{v}_t}+\epsilon} \hat{m}_t .\]<br>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(\theta\) are the network's parameters and \(v_t\) are the steps, then what kind of gradient descent are these formulae for?<br>\[\begin{aligned}m_t &amp; =\beta_1 m_{t-1}+\left(1-\beta_1\right) g_t \\v_t &amp; =\beta_2 v_{t-1}+\left(1-\beta_2\right) g_t^2\end{aligned}\]...then scaling by two hyperparameters:<br>\[\begin{aligned}\hat{m}_t &amp; =\frac{m_t}{1-\beta_1^t} \\\hat{v}_t &amp; =\frac{v_t}{1-\beta_2^t}\end{aligned}\]...and finally making this gradient update:<br>\[\theta_{t+1}=\theta_t-\frac{\eta}{\sqrt{\hat{v}_t}+\epsilon} \hat{m}_t .\]<br>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Adam</b> (Adaptive Moment Estimation).<br><br>This is distinguished by having terms for first and second moments. The first moment gives us <b>momentum</b>, and the second moment slows us down in dimensions where the change is very large (thereby dampening extreme oscillations).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between how <b>RMSProp</b> and <b>AdaGrad</b> dampen extreme oscillations in specific directions?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between how <b>RMSProp</b> and <b>AdaGrad</b> dampen extreme oscillations in specific directions?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>RMSProp</b> divides by the moving average of squared differences.<br><br><b>AdaGrad</b> divides by the square root of a cumulative sum of previous gradients (i.e. the dampening term can only increase).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a user-defined version of <font color='#ff5500'>torch.utils.data.dataset.TensorDataset</font>.<br><br>Two questions:<ul><li>What kinds of arguments does an instantiation of this class need?</li><li>What is the <font color='#ff5500'>assert</font> statement doing here?</li></ul><div class='exerciseprecontainer'><pre>class TensorDataset:<br><br>    def __init__(self, *tensors: t.Tensor):<br>        if tensors:<br>            size = tensors[0].shape[0]<br>            assert all(tensor.shape[0] == size for tensor in tensors), ""Size mismatch between tensors""<br>        self.tensors = tensors<br><br>    def __getitem__(self, index: Union[int, slice]) -&gt; tuple[t.Tensor, ...]:<br>        return tuple(tensor[index] for tensor in self.tensors)<br><br>    def __len__(self):<br>        return self.tensors[0].shape[0]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a user-defined version of <font color='#ff5500'>torch.utils.data.dataset.TensorDataset</font>.<br><br>Two questions:<ul><li>What kinds of arguments does an instantiation of this class need?</li><li>What is the <font color='#ff5500'>assert</font> statement doing here?</li></ul><div class='exerciseprecontainer'><pre>class TensorDataset:<br><br>    def __init__(self, *tensors: t.Tensor):<br>        if tensors:<br>            size = tensors[0].shape[0]<br>            assert all(tensor.shape[0] == size for tensor in tensors), ""Size mismatch between tensors""<br>        self.tensors = tensors<br><br>    def __getitem__(self, index: Union[int, slice]) -&gt; tuple[t.Tensor, ...]:<br>        return tuple(tensor[index] for tensor in self.tensors)<br><br>    def __len__(self):<br>        return self.tensors[0].shape[0]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li>We call <font color='#ff5500'>TensorDataset</font> with a list of tensors, with each one having 0th dimension corresponding to the batch (e.g. we could have two tensors representing input data <font color='#ff5500'>X</font> and labels <font color='#ff5500'>y</font> respectively)</li><li>The <font color='#ff5500'>assert</font> statement is checking that all tensors have the same batch number</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a user-defined version of <font color='#ff5500'>torch.utils.data.dataset.TensorDataset</font>.<br><br>Suppose you initialised it with <font color='#ff5500'>ds = TensorDataset(X, y)</font>, where <font color='#ff5500'>X</font> is a batch of input data and <font color='#ff5500'>y</font> are labels.<br><br>Two questions:<ul><li>What will you get when you index a member of this class?</li><li>What will you get when you call <font color='#ff5500'>len()</font> on a member of this class?</li></ul><div class='exerciseprecontainer'><pre>class TensorDataset:<br><br>    def __init__(self, *tensors: t.Tensor):<br>        if tensors:<br>            size = tensors[0].shape[0]<br>            assert all(tensor.shape[0] == size for tensor in tensors), ""Size mismatch between tensors""<br>        self.tensors = tensors<br><br>    def __getitem__(self, index: Union[int, slice]) -&gt; tuple[t.Tensor, ...]:<br>        return tuple(tensor[index] for tensor in self.tensors)<br><br>    def __len__(self):<br>        return self.tensors[0].shape[0]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a user-defined version of <font color='#ff5500'>torch.utils.data.dataset.TensorDataset</font>.<br><br>Suppose you initialised it with <font color='#ff5500'>ds = TensorDataset(X, y)</font>, where <font color='#ff5500'>X</font> is a batch of input data and <font color='#ff5500'>y</font> are labels.<br><br>Two questions:<ul><li>What will you get when you index a member of this class?</li><li>What will you get when you call <font color='#ff5500'>len()</font> on a member of this class?</li></ul><div class='exerciseprecontainer'><pre>class TensorDataset:<br><br>    def __init__(self, *tensors: t.Tensor):<br>        if tensors:<br>            size = tensors[0].shape[0]<br>            assert all(tensor.shape[0] == size for tensor in tensors), ""Size mismatch between tensors""<br>        self.tensors = tensors<br><br>    def __getitem__(self, index: Union[int, slice]) -&gt; tuple[t.Tensor, ...]:<br>        return tuple(tensor[index] for tensor in self.tensors)<br><br>    def __len__(self):<br>        return self.tensors[0].shape[0]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li>Indexing will return a tuple <font color='#ff5500'>(X_slice, y_slice)</font> representing a single element (or slice) of the full batch</li><li><font color='#ff5500'>len()</font> will return the number of batches (since this is the 0th dimension of <font color='#ff5500'>X</font>)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following code is meant to convert a (possibly RGBA) image to a tensor with just 3 color channels (RGB).<br><br>Why will this code fail, and how to fix it?<br><br><div class='exerciseprecontainer'><pre>img_t = transforms.ToTensor(img)[:3, :, :]</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following code is meant to convert a (possibly RGBA) image to a tensor with just 3 color channels (RGB).<br><br>Why will this code fail, and how to fix it?<br><br><div class='exerciseprecontainer'><pre>img_t = transforms.ToTensor(img)[:3, :, :]</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Because <font color='#ff5500'>transforms.ToTensor</font> is itself a function which returns a transformation. We need to replace this code with:<br><br><div class='exerciseprecontainer'><pre>img_t = transforms.ToTensor()(img)[:3, :, :]</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this matplotlib code.<br><br><div class='exerciseprecontainer'><pre>fig = plt.<input maxlength='6' name='figure_88980835' style='width: 6ch;'>()<br><br>ax1 = <input maxlength='15' name='fig.add_subplot_62473259' style='width: 15ch;'>(1, 1, 1)<br>ax1.plot([1, 2, 3])<br><br>ax2 = <input maxlength='15' name='fig.add_subplot_34623609' style='width: 15ch;'>(2, 2, 1, facecolor=""w"")<br>ax2.plot(np.sin(np.linspace(0, 2 * np.pi)))</pre></div><br><img src='1c54f9f3f649a0ada144e526f9fc9f522a7dce74fecaceb8c1dff68d31a7c828.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this matplotlib code.<br><br><div class='exerciseprecontainer'><pre>fig = plt.<input maxlength='6' name='figure_88980835' style='width: 6ch;'>()<br><br>ax1 = <input maxlength='15' name='fig.add_subplot_62473259' style='width: 15ch;'>(1, 1, 1)<br>ax1.plot([1, 2, 3])<br><br>ax2 = <input maxlength='15' name='fig.add_subplot_34623609' style='width: 15ch;'>(2, 2, 1, facecolor=""w"")<br>ax2.plot(np.sin(np.linspace(0, 2 * np.pi)))</pre></div><br><img src='1c54f9f3f649a0ada144e526f9fc9f522a7dce74fecaceb8c1dff68d31a7c828.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in some boilerplate matplotlib code, to produce the graph below.<br><br><div class='exerciseprecontainer'><pre>from itertools import <input maxlength='7' name='product_72636584' style='width: 7ch;'><br><br>x = np.linspace(0, 2*np.pi, 400)<br>y = np.sin(x**2)<br><br>fix, axs = plt.subplots(<input maxlength='5' name='nrows_52762610' style='width: 5ch;'>=2, <input maxlength='5' name='ncols_73822218' style='width: 5ch;'>=3)<br><br>for xy in <input maxlength='7' name='product_32142964' style='width: 7ch;'>(range(2), range(3)):<br>    <input maxlength='12' name='axs[xy].plot_40352157' style='width: 12ch;'>(x, y)</pre></div><br><img src='8923e8a0ed5b5d62da8e40f66127974970926243d6c178fa6ac7930a6a19ed94.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in some boilerplate matplotlib code, to produce the graph below.<br><br><div class='exerciseprecontainer'><pre>from itertools import <input maxlength='7' name='product_72636584' style='width: 7ch;'><br><br>x = np.linspace(0, 2*np.pi, 400)<br>y = np.sin(x**2)<br><br>fix, axs = plt.subplots(<input maxlength='5' name='nrows_52762610' style='width: 5ch;'>=2, <input maxlength='5' name='ncols_73822218' style='width: 5ch;'>=3)<br><br>for xy in <input maxlength='7' name='product_32142964' style='width: 7ch;'>(range(2), range(3)):<br>    <input maxlength='12' name='axs[xy].plot_40352157' style='width: 12ch;'>(x, y)</pre></div><br><img src='8923e8a0ed5b5d62da8e40f66127974970926243d6c178fa6ac7930a6a19ed94.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in some boilerplate matplotlib code, to produce the graphs below.<br><br><div class='exerciseprecontainer'><pre>x = np.linspace(0, 2*np.pi, 400)<br>y = np.sin(x**2)<br><br><input maxlength='8' name='plt.plot_30270208' style='width: 8ch;'>(x, y)<br><input maxlength='9' name='plt.title_03610092' style='width: 9ch;'>('Simple plot')<br><input maxlength='10' name='plt.xlabel_29516264' style='width: 10ch;'>('x')<br><input maxlength='10' name='plt.ylabel_45072307' style='width: 10ch;'>('y')</pre></div><br><img src='97eb4dae23ae335790f80c248496d86469ea7f14c4746f5b6bccddf2b4cbe2c0.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in some boilerplate matplotlib code, to produce the graphs below.<br><br><div class='exerciseprecontainer'><pre>x = np.linspace(0, 2*np.pi, 400)<br>y = np.sin(x**2)<br><br><input maxlength='8' name='plt.plot_30270208' style='width: 8ch;'>(x, y)<br><input maxlength='9' name='plt.title_03610092' style='width: 9ch;'>('Simple plot')<br><input maxlength='10' name='plt.xlabel_29516264' style='width: 10ch;'>('x')<br><input maxlength='10' name='plt.ylabel_45072307' style='width: 10ch;'>('y')</pre></div><br><img src='97eb4dae23ae335790f80c248496d86469ea7f14c4746f5b6bccddf2b4cbe2c0.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in some boilerplate matplotlib code, to produce the graphs below.<br><br><div class='exerciseprecontainer'><pre>x = np.linspace(0, 2*np.pi, 400)<br>y = np.sin(x**2)<br><br>f, (ax1, ax2) = <input maxlength='12' name='plt.subplots_33830368' style='width: 12ch;'>(<input maxlength='5' name='nrows_52762610' style='width: 5ch;'>=1, <input maxlength='5' name='ncols_73822218' style='width: 5ch;'>=2, <input maxlength='6' name='sharey_15722886' style='width: 6ch;'>=True)<br>ax1.<input maxlength='4' name='plot_97150344' style='width: 4ch;'>(x, y)<br>ax1.<input maxlength='9' name='set_title_19937145' style='width: 9ch;'>('Sharing Y axis')<br>ax2.<input maxlength='7' name='scatter_89536663' style='width: 7ch;'>(x, y)</pre></div><br><img src='fb4b4fa57ad4ec4e3a348ce8d1847dd1c023e2675b235ad348d5f63ad95ad7a4.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in some boilerplate matplotlib code, to produce the graphs below.<br><br><div class='exerciseprecontainer'><pre>x = np.linspace(0, 2*np.pi, 400)<br>y = np.sin(x**2)<br><br>f, (ax1, ax2) = <input maxlength='12' name='plt.subplots_33830368' style='width: 12ch;'>(<input maxlength='5' name='nrows_52762610' style='width: 5ch;'>=1, <input maxlength='5' name='ncols_73822218' style='width: 5ch;'>=2, <input maxlength='6' name='sharey_15722886' style='width: 6ch;'>=True)<br>ax1.<input maxlength='4' name='plot_97150344' style='width: 4ch;'>(x, y)<br>ax1.<input maxlength='9' name='set_title_19937145' style='width: 9ch;'>('Sharing Y axis')<br>ax2.<input maxlength='7' name='scatter_89536663' style='width: 7ch;'>(x, y)</pre></div><br><img src='fb4b4fa57ad4ec4e3a348ce8d1847dd1c023e2675b235ad348d5f63ad95ad7a4.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the <font color='#ff5500'>make_rays_2d</font> function below, which uses lines between the origin and another point to create a regularly spaced grid of straight lines.<br><br><div class='exerciseprecontainer'><pre>def make_rays_2d(num_pixels_y: int, num_pixels_z) -&gt; t.Tensor:<br>    """"""<br>    num_pixels_y / num_pixels_z: The number of pixels in the y / z dimensions<br><br>    Returns: shape (num_rays = num_pixels_y * num_pixels_z, num_points = 2, num_dims = 3).<br>    """"""<br>    n_pixels = num_pixels_y * num_pixels_z<br>    ygrid = t.linspace(-1, 1, num_pixels_y)<br>    zgrid = t.linspace(-1, 1, num_pixels_z)<br>    rays = t.zeros((n_pixels, 2, 3), dtype=t.float32)<br>    rays[:, 1, 0] = 1<br>    rays[:, 1, 1] = einops.<input maxlength='6' name='repeat_07988920' style='width: 6ch;'>(ygrid, ""y -&gt; <input maxlength='5' name='(y z)_34326334' style='width: 5ch;'>"", <input maxlength='14' name='z=num_pixels_z_29263478' style='width: 14ch;'>)<br>    rays[:, 1, 2] = einops.<input maxlength='6' name='repeat_41205204' style='width: 6ch;'>(zgrid, ""z -&gt; <input maxlength='5' name='(y z)_17447818' style='width: 5ch;'>"", <input maxlength='14' name='y=num_pixels_y_06753690' style='width: 14ch;'>)<br>    return rays<br><br>rays_2d = make_rays_2d(6, 2)<br><br>(fig, ax) = plt.subplots(figsize=(8, 8), <input maxlength='10' name='subplot_kw_38602690' style='width: 10ch;'>={""projection"": ""3d""})<br>for ray in rays_2d:<br>    ax.plot(ray[:, 1].numpy(), ray[:, 0].numpy(), ray[:, 2].numpy())<br>ax.set(xlabel=""Y"", ylabel=""X"", zlabel=""Z"");</pre></div><br><img src='9d6b7508441579550ada0f405926977002bcdb5504d697b36e19946058cd71cb.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the <font color='#ff5500'>make_rays_2d</font> function below, which uses lines between the origin and another point to create a regularly spaced grid of straight lines.<br><br><div class='exerciseprecontainer'><pre>def make_rays_2d(num_pixels_y: int, num_pixels_z) -&gt; t.Tensor:<br>    """"""<br>    num_pixels_y / num_pixels_z: The number of pixels in the y / z dimensions<br><br>    Returns: shape (num_rays = num_pixels_y * num_pixels_z, num_points = 2, num_dims = 3).<br>    """"""<br>    n_pixels = num_pixels_y * num_pixels_z<br>    ygrid = t.linspace(-1, 1, num_pixels_y)<br>    zgrid = t.linspace(-1, 1, num_pixels_z)<br>    rays = t.zeros((n_pixels, 2, 3), dtype=t.float32)<br>    rays[:, 1, 0] = 1<br>    rays[:, 1, 1] = einops.<input maxlength='6' name='repeat_07988920' style='width: 6ch;'>(ygrid, ""y -&gt; <input maxlength='5' name='(y z)_34326334' style='width: 5ch;'>"", <input maxlength='14' name='z=num_pixels_z_29263478' style='width: 14ch;'>)<br>    rays[:, 1, 2] = einops.<input maxlength='6' name='repeat_41205204' style='width: 6ch;'>(zgrid, ""z -&gt; <input maxlength='5' name='(y z)_17447818' style='width: 5ch;'>"", <input maxlength='14' name='y=num_pixels_y_06753690' style='width: 14ch;'>)<br>    return rays<br><br>rays_2d = make_rays_2d(6, 2)<br><br>(fig, ax) = plt.subplots(figsize=(8, 8), <input maxlength='10' name='subplot_kw_38602690' style='width: 10ch;'>={""projection"": ""3d""})<br>for ray in rays_2d:<br>    ax.plot(ray[:, 1].numpy(), ray[:, 0].numpy(), ray[:, 2].numpy())<br>ax.set(xlabel=""Y"", ylabel=""X"", zlabel=""Z"");</pre></div><br><img src='9d6b7508441579550ada0f405926977002bcdb5504d697b36e19946058cd71cb.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is the code for LeNet implementation via inheriting from <font color='#ff5500'>nn.Module</font>.<br><br>The purpose is to classify MNIST images.<br><br>Fill in the gaps.<br><br><div class='exerciseprecontainer'><pre>import torch<br>import torch.nn as nn<br>import torch.nn.<input maxlength='10' name='functional_51035531' style='width: 10ch;'> as F<br><br>class Net(nn.Module):<br><br>    def __init__(self):<br>        super(Net, self).__init__()<br>        # 1 input image channel, 6 output channels, 5x5 square convolution kernel<br>        self.conv1 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(1, 6, 5)<br>        self.conv2 = nn.<input maxlength='6' name='Conv2d_17419437' style='width: 6ch;'>(6, 16, 5)<br>        # an affine operation: y = Wx + b<br>        self.fc1 = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension<br>        self.fc2 = nn.Linear(120, 84)<br>        self.fc3 = nn.Linear(84, <input maxlength='2' name='10_57366865' style='width: 2ch;'>)<br><br>    def forward(self, x):<br>        # Max pooling over a (2, 2) window<br>        x = F.<input maxlength='10' name='max_pool2d_70731639' style='width: 10ch;'>(F.relu(self.conv1(x)), (2, 2))<br>        # If the size is a square, you can specify with a single number<br>        x = F.<input maxlength='10' name='max_pool2d_51594484' style='width: 10ch;'>(F.relu(self.conv2(x)), 2)<br>        x = torch.flatten(x, 1) # flatten all dimensions except the batch dimension<br>        x = F.relu(self.fc1(x))<br>        x = F.relu(self.fc2(x))<br>        x = self.fc3(x)<br>        return x</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is the code for LeNet implementation via inheriting from <font color='#ff5500'>nn.Module</font>.<br><br>The purpose is to classify MNIST images.<br><br>Fill in the gaps.<br><br><div class='exerciseprecontainer'><pre>import torch<br>import torch.nn as nn<br>import torch.nn.<input maxlength='10' name='functional_51035531' style='width: 10ch;'> as F<br><br>class Net(nn.Module):<br><br>    def __init__(self):<br>        super(Net, self).__init__()<br>        # 1 input image channel, 6 output channels, 5x5 square convolution kernel<br>        self.conv1 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(1, 6, 5)<br>        self.conv2 = nn.<input maxlength='6' name='Conv2d_17419437' style='width: 6ch;'>(6, 16, 5)<br>        # an affine operation: y = Wx + b<br>        self.fc1 = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension<br>        self.fc2 = nn.Linear(120, 84)<br>        self.fc3 = nn.Linear(84, <input maxlength='2' name='10_57366865' style='width: 2ch;'>)<br><br>    def forward(self, x):<br>        # Max pooling over a (2, 2) window<br>        x = F.<input maxlength='10' name='max_pool2d_70731639' style='width: 10ch;'>(F.relu(self.conv1(x)), (2, 2))<br>        # If the size is a square, you can specify with a single number<br>        x = F.<input maxlength='10' name='max_pool2d_51594484' style='width: 10ch;'>(F.relu(self.conv2(x)), 2)<br>        x = torch.flatten(x, 1) # flatten all dimensions except the batch dimension<br>        x = F.relu(self.fc1(x))<br>        x = F.relu(self.fc2(x))<br>        x = self.fc3(x)<br>        return x</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is an example of subclassing a particular sub-library of PyTorch, for a convenient way to create neural networks.<br><br>It involves 2 convolutional steps, and a relu after each of them.<br><br>Fill in the missing code.<br><br><div class='exerciseprecontainer'><pre>import torch.nn as nn<br>import torch.nn.functional as F<br><br>class Model(<input maxlength='9' name='nn.Module_19023391' style='width: 9ch;'>):<br>    def __init__(self):<br>        <input maxlength='5' name='super_12450672' style='width: 5ch;'>().__init__()<br>        self.conv1 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(1, 20, 5)<br>        self.conv2 = nn.<input maxlength='6' name='Conv2d_17419437' style='width: 6ch;'>(20, 20, 5)<br><br>    def forward(self, x):<br>        x = <input maxlength='6' name='F.relu_71492460' style='width: 6ch;'>(self.conv1(x))<br>        return <input maxlength='6' name='F.relu_62027704' style='width: 6ch;'>(self.conv2(x))</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is an example of subclassing a particular sub-library of PyTorch, for a convenient way to create neural networks.<br><br>It involves 2 convolutional steps, and a relu after each of them.<br><br>Fill in the missing code.<br><br><div class='exerciseprecontainer'><pre>import torch.nn as nn<br>import torch.nn.functional as F<br><br>class Model(<input maxlength='9' name='nn.Module_19023391' style='width: 9ch;'>):<br>    def __init__(self):<br>        <input maxlength='5' name='super_12450672' style='width: 5ch;'>().__init__()<br>        self.conv1 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(1, 20, 5)<br>        self.conv2 = nn.<input maxlength='6' name='Conv2d_17419437' style='width: 6ch;'>(20, 20, 5)<br><br>    def forward(self, x):<br>        x = <input maxlength='6' name='F.relu_71492460' style='width: 6ch;'>(self.conv1(x))<br>        return <input maxlength='6' name='F.relu_62027704' style='width: 6ch;'>(self.conv2(x))</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is an example of subclassing <font color='#ff5500'>nn.Module</font>, to create the framework for a CNN.<br><br>Initialise the first layer to have a 2D convolution followed by a relu activation.<br><br><div class='exerciseprecontainer'><pre>class Convolutional(nn.Module):<br>    def __init__(self, input_channels=3, num_classes=10):<br>        <input maxlength='5' name='super_12450672' style='width: 5ch;'>(Convolutional, self).__init__()<br>        self.layer1 = <input maxlength='15' name='nn.Sequential()_52715335' style='width: 15ch;'><br>        self.layer1.<input maxlength='10' name='add_module_22620776' style='width: 10ch;'>(""Conv1"", nn.Conv2d(in_channels=input_channels, out_channels=16, kernel_size=3, padding=1))<br>        self.layer1.<input maxlength='10' name='add_module_08635368' style='width: 10ch;'>(""Relu1"", nn.ReLU(inplace=False))</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is an example of subclassing <font color='#ff5500'>nn.Module</font>, to create the framework for a CNN.<br><br>Initialise the first layer to have a 2D convolution followed by a relu activation.<br><br><div class='exerciseprecontainer'><pre>class Convolutional(nn.Module):<br>    def __init__(self, input_channels=3, num_classes=10):<br>        <input maxlength='5' name='super_12450672' style='width: 5ch;'>(Convolutional, self).__init__()<br>        self.layer1 = <input maxlength='15' name='nn.Sequential()_52715335' style='width: 15ch;'><br>        self.layer1.<input maxlength='10' name='add_module_22620776' style='width: 10ch;'>(""Conv1"", nn.Conv2d(in_channels=input_channels, out_channels=16, kernel_size=3, padding=1))<br>        self.layer1.<input maxlength='10' name='add_module_08635368' style='width: 10ch;'>(""Relu1"", nn.ReLU(inplace=False))</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the purpose of the two arguments for the <font color=""#ff5500"">add_module</font> function?<br><br><div class=""exerciseprecontainer""><pre>class Convolutional(nn.Module):<br>    def __init__(self, input_channels=3, num_classes=10):<br>        super(Convolutional, self).__init__()<br>        self.layer1 = nn.Sequential()<br>        self.layer1.add_module(""Conv1"", nn.Conv2d(in_channels=input_channels, out_channels=16, kernel_size=3, padding=1))<br>        self.layer1.add_module(""Relu1"", nn.ReLU(inplace=False))</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the purpose of the two arguments for the <font color=""#ff5500"">add_module</font> function?<br><br><div class=""exerciseprecontainer""><pre>class Convolutional(nn.Module):<br>    def __init__(self, input_channels=3, num_classes=10):<br>        super(Convolutional, self).__init__()<br>        self.layer1 = nn.Sequential()<br>        self.layer1.add_module(""Conv1"", nn.Conv2d(in_channels=input_channels, out_channels=16, kernel_size=3, padding=1))<br>        self.layer1.add_module(""Relu1"", nn.ReLU(inplace=False))</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first one is the name, which is what you see when you print the network.<br><br>The second one is the module itself.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This code showcases two methods of adding modules to a layer. The second one uses a particular type of datastructure.<br><br><div class='exerciseprecontainer'><pre>class Convolutional(nn.Module):<br>    def __init__(self, input_channels=3, num_classes=10):<br>        super(Convolutional, self).__init__()<br>        self.layer1 = nn.Sequential()<br>        self.layer1.<input maxlength='10' name='add_module_22620776' style='width: 10ch;'>(""Conv1"", <input maxlength='9' name='nn.Conv2d_32118745' style='width: 9ch;'>(in_channels=input_channels, out_channels=16, kernel_size=3, padding=1))<br>        self.layer1.<input maxlength='10' name='add_module_08635368' style='width: 10ch;'>(""Relu1"", <input maxlength='7' name='nn.ReLU_29128595' style='width: 7ch;'>(inplace=False))<br>        self.layer2 = <input maxlength='13' name='nn.Sequential_39518857' style='width: 13ch;'>(<input maxlength='11' name='OrderedDict_61155517' style='width: 11ch;'>([<br>            ('Conv2', nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, padding=1)),<br>            ('Reul2', nn.ReLU(inplace=False))<br>        ]))<br>    def <input maxlength='7' name='forward_11313902' style='width: 7ch;'>(self, x):<br>        x = <input maxlength='14' name='self.layer1(x)_23992702' style='width: 14ch;'><br>        x = <input maxlength='14' name='self.layer2(x)_44914879' style='width: 14ch;'><br>        return x</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This code showcases two methods of adding modules to a layer. The second one uses a particular type of datastructure.<br><br><div class='exerciseprecontainer'><pre>class Convolutional(nn.Module):<br>    def __init__(self, input_channels=3, num_classes=10):<br>        super(Convolutional, self).__init__()<br>        self.layer1 = nn.Sequential()<br>        self.layer1.<input maxlength='10' name='add_module_22620776' style='width: 10ch;'>(""Conv1"", <input maxlength='9' name='nn.Conv2d_32118745' style='width: 9ch;'>(in_channels=input_channels, out_channels=16, kernel_size=3, padding=1))<br>        self.layer1.<input maxlength='10' name='add_module_08635368' style='width: 10ch;'>(""Relu1"", <input maxlength='7' name='nn.ReLU_29128595' style='width: 7ch;'>(inplace=False))<br>        self.layer2 = <input maxlength='13' name='nn.Sequential_39518857' style='width: 13ch;'>(<input maxlength='11' name='OrderedDict_61155517' style='width: 11ch;'>([<br>            ('Conv2', nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, padding=1)),<br>            ('Reul2', nn.ReLU(inplace=False))<br>        ]))<br>    def <input maxlength='7' name='forward_11313902' style='width: 7ch;'>(self, x):<br>        x = <input maxlength='14' name='self.layer1(x)_23992702' style='width: 14ch;'><br>        x = <input maxlength='14' name='self.layer2(x)_44914879' style='width: 14ch;'><br>        return x</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code for this data transform.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import transforms<br><br>preprocess = transforms.<input maxlength='7' name='Compose_06889480' style='width: 7ch;'>(<br>    [<br>        transforms.<input maxlength='8' name='ToTensor_86198519' style='width: 8ch;'>(),<br>        transforms.<input maxlength='6' name='Resize_92917349' style='width: 6ch;'>((224, 224)),<br>        transforms.<input maxlength='9' name='Normalize_61301880' style='width: 9ch;'>(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),<br>    ]<br>)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code for this data transform.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import transforms<br><br>preprocess = transforms.<input maxlength='7' name='Compose_06889480' style='width: 7ch;'>(<br>    [<br>        transforms.<input maxlength='8' name='ToTensor_86198519' style='width: 8ch;'>(),<br>        transforms.<input maxlength='6' name='Resize_92917349' style='width: 6ch;'>((224, 224)),<br>        transforms.<input maxlength='9' name='Normalize_61301880' style='width: 9ch;'>(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),<br>    ]<br>)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Write the module version of ReLU.<br><br><div class=""exerciseprecontainer""><pre>class ReLU(nn.Module):<br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        return t.<input maxlength=""3"" name=""max_46845065"" style=""width: 7ch;"">(x, t.<input maxlength=""6"" name=""tensor_54569204"" style=""width: 6ch;"">(0.0))</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Write the module version of ReLU.<br><br><div class=""exerciseprecontainer""><pre>class ReLU(nn.Module):<br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        return t.<input maxlength=""3"" name=""max_46845065"" style=""width: 7ch;"">(x, t.<input maxlength=""6"" name=""tensor_54569204"" style=""width: 6ch;"">(0.0))</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this basic version of <font color='#ff5500'>torch.nn.Sequential</font>.<br><br><div class='exerciseprecontainer'><pre>class Sequential(nn.Module):<br>    def __init__(self, *modules: nn.Module):<br>        <input maxlength='7' name='super()_01599443' style='width: 7ch;'>.__init__()<br>        for i, mod in enumerate(modules):<br>            self.<input maxlength='10' name='add_module_22620776' style='width: 10ch;'>(str(i), mod)<br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        for mod in self.<input maxlength='8' name='_modules_69195189' style='width: 8ch;'>.values():<br>            x = mod(x)<br>        return x</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this basic version of <font color='#ff5500'>torch.nn.Sequential</font>.<br><br><div class='exerciseprecontainer'><pre>class Sequential(nn.Module):<br>    def __init__(self, *modules: nn.Module):<br>        <input maxlength='7' name='super()_01599443' style='width: 7ch;'>.__init__()<br>        for i, mod in enumerate(modules):<br>            self.<input maxlength='10' name='add_module_22620776' style='width: 10ch;'>(str(i), mod)<br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        for mod in self.<input maxlength='8' name='_modules_69195189' style='width: 8ch;'>.values():<br>            x = mod(x)<br>        return x</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code for this training loop.<br><br>You should use cross entropy loss, Adam optimisation, and you should use the <font color='#ff5500'>tqdm</font> library to generate a progress bar.<br><br><div class='exerciseprecontainer'><pre>def train(trainloader: DataLoader, epochs: int) -&gt; ResNet34:<br><br>    model = ResNet34(n_classes=10).to(device).train()<br>    optimizer = t.optim.<input maxlength='4' name='Adam_23009455' style='width: 4ch;'>(model.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>())<br>    loss_fn = t.nn.<input maxlength='16' name='CrossEntropyLoss_17268953' style='width: 16ch;'>()<br><br>    for epoch in range(epochs):<br>        for i, (x, y) in enumerate(<input maxlength='4' name='tqdm_31367297' style='width: 4ch;'>(trainloader)):<br>            x = x.to(device)<br>            y = y.to(device)<br>            optimizer.<input maxlength='9' name='zero_grad_18425358' style='width: 9ch;'>()<br>            y_hat = model(x)<br>            loss = loss_fn(y_hat, y)<br>            loss.<input maxlength='8' name='backward_87962158' style='width: 8ch;'>()<br>            optimizer.<input maxlength='4' name='step_79907168' style='width: 4ch;'>()<br><br>        print(f""Epoch {epoch}, train loss is {loss}"")<br>        print(f""Saving model to: {os.path.abspath(MODEL_FILENAME)}"")<br>        t.save(model, MODEL_FILENAME)<br><br>    return model</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code for this training loop.<br><br>You should use cross entropy loss, Adam optimisation, and you should use the <font color='#ff5500'>tqdm</font> library to generate a progress bar.<br><br><div class='exerciseprecontainer'><pre>def train(trainloader: DataLoader, epochs: int) -&gt; ResNet34:<br><br>    model = ResNet34(n_classes=10).to(device).train()<br>    optimizer = t.optim.<input maxlength='4' name='Adam_23009455' style='width: 4ch;'>(model.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>())<br>    loss_fn = t.nn.<input maxlength='16' name='CrossEntropyLoss_17268953' style='width: 16ch;'>()<br><br>    for epoch in range(epochs):<br>        for i, (x, y) in enumerate(<input maxlength='4' name='tqdm_31367297' style='width: 4ch;'>(trainloader)):<br>            x = x.to(device)<br>            y = y.to(device)<br>            optimizer.<input maxlength='9' name='zero_grad_18425358' style='width: 9ch;'>()<br>            y_hat = model(x)<br>            loss = loss_fn(y_hat, y)<br>            loss.<input maxlength='8' name='backward_87962158' style='width: 8ch;'>()<br>            optimizer.<input maxlength='4' name='step_79907168' style='width: 4ch;'>()<br><br>        print(f""Epoch {epoch}, train loss is {loss}"")<br>        print(f""Saving model to: {os.path.abspath(MODEL_FILENAME)}"")<br>        t.save(model, MODEL_FILENAME)<br><br>    return model</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code, which defines a ResidualBlock from ResNet34.<br><br>If <font color='#ff5500'>first_stride=1</font> this indicates the right branch just adds the identity, if not then it performs STrided Conv and BatchNorm.<br><br><div class='exerciseprecontainer'><pre>class ResidualBlock(nn.Module):<br><br>    def __init__(self, in_feats: int, out_feats: int, first_stride=1):<br>        super().__init__()<br>        self.net = Sequential(<br>            <input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(in_feats, out_feats, kernel_size=3, stride=first_stride, padding=1),<br>            <input maxlength='11' name='BatchNorm2d_19862909' style='width: 11ch;'>(out_feats),<br>            <input maxlength='6' name='ReLU()_03438711' style='width: 6ch;'>,<br>            <input maxlength='6' name='Conv2d_17419437' style='width: 6ch;'>(out_feats, out_feats, kernel_size=3, padding=1),<br>            <input maxlength='11' name='BatchNorm2d_01268494' style='width: 11ch;'>(out_feats),<br>        )<br>        self.downsample = (<br>            Sequential(<br>                <input maxlength='6' name='Conv2d_35099212' style='width: 6ch;'>(in_feats, out_feats, kernel_size=1, stride=first_stride),<br>                <input maxlength='11' name='BatchNorm2d_86435323' style='width: 11ch;'>(out_feats),<br>            )<br>            if first_stride != 1<br>            else None<br>        )<br>        self.out_relu = <input maxlength='6' name='ReLU()_50448957' style='width: 6ch;'><br><br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        y_out = self.net(x)<br>        x_out = x if self.downsample is None else self.downsample(x)<br>        out = self.out_relu(x_out + y_out)<br>        return out</pre></div><br><img src='24dc40b3a4cb82d13fadc5ad0f6154eff69097797a8be3c831181d019c08f9d8.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code, which defines a ResidualBlock from ResNet34.<br><br>If <font color='#ff5500'>first_stride=1</font> this indicates the right branch just adds the identity, if not then it performs STrided Conv and BatchNorm.<br><br><div class='exerciseprecontainer'><pre>class ResidualBlock(nn.Module):<br><br>    def __init__(self, in_feats: int, out_feats: int, first_stride=1):<br>        super().__init__()<br>        self.net = Sequential(<br>            <input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(in_feats, out_feats, kernel_size=3, stride=first_stride, padding=1),<br>            <input maxlength='11' name='BatchNorm2d_19862909' style='width: 11ch;'>(out_feats),<br>            <input maxlength='6' name='ReLU()_03438711' style='width: 6ch;'>,<br>            <input maxlength='6' name='Conv2d_17419437' style='width: 6ch;'>(out_feats, out_feats, kernel_size=3, padding=1),<br>            <input maxlength='11' name='BatchNorm2d_01268494' style='width: 11ch;'>(out_feats),<br>        )<br>        self.downsample = (<br>            Sequential(<br>                <input maxlength='6' name='Conv2d_35099212' style='width: 6ch;'>(in_feats, out_feats, kernel_size=1, stride=first_stride),<br>                <input maxlength='11' name='BatchNorm2d_86435323' style='width: 11ch;'>(out_feats),<br>            )<br>            if first_stride != 1<br>            else None<br>        )<br>        self.out_relu = <input maxlength='6' name='ReLU()_50448957' style='width: 6ch;'><br><br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        y_out = self.net(x)<br>        x_out = x if self.downsample is None else self.downsample(x)<br>        out = self.out_relu(x_out + y_out)<br>        return out</pre></div><br><img src='24dc40b3a4cb82d13fadc5ad0f6154eff69097797a8be3c831181d019c08f9d8.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code defining a ResidualBlock from ResNet34.<br><br>If <font color='#ff5500'>first_stride=1</font> this indicates the right branch just adds the identity, if not then it performs STrided Conv and BatchNorm.<br><br><div class='exerciseprecontainer'><pre>class ResidualBlock(nn.Module):<br><br>    def __init__(self, in_feats: int, out_feats: int, first_stride=1):<br>        super().__init__()<br>        self.net = Sequential(<br>            Conv2d(in_feats, out_feats, <input maxlength='11' name='kernel_size_81659186' style='width: 11ch;'>=3, stride=first_stride, padding=1),<br>            BatchNorm2d(out_feats),<br>            ReLU(),<br>            Conv2d(out_feats, out_feats, <input maxlength='11' name='kernel_size_65778912' style='width: 11ch;'>=3, padding=1),<br>            BatchNorm2d(out_feats),<br>        )<br>        self.downsample = (<br>            Sequential(<br>                Conv2d(in_feats, out_feats, kernel_size=1, stride=first_stride),<br>                BatchNorm2d(out_feats),<br>            )<br>            if first_stride != 1<br>            else None<br>        )<br>        self.out_relu = ReLU()<br><br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        y_out = <input maxlength='11' name='self.net(x)_74058408' style='width: 11ch;'><br>        x_out = x if self.downsample is None else <input maxlength='18' name='self.downsample(x)_06484473' style='width: 18ch;'><br>        out = <input maxlength='13' name='self.out_relu_32480541' style='width: 13ch;'>(x_out + y_out)<br>        return out</pre></div><br><img src='24dc40b3a4cb82d13fadc5ad0f6154eff69097797a8be3c831181d019c08f9d8.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code defining a ResidualBlock from ResNet34.<br><br>If <font color='#ff5500'>first_stride=1</font> this indicates the right branch just adds the identity, if not then it performs STrided Conv and BatchNorm.<br><br><div class='exerciseprecontainer'><pre>class ResidualBlock(nn.Module):<br><br>    def __init__(self, in_feats: int, out_feats: int, first_stride=1):<br>        super().__init__()<br>        self.net = Sequential(<br>            Conv2d(in_feats, out_feats, <input maxlength='11' name='kernel_size_81659186' style='width: 11ch;'>=3, stride=first_stride, padding=1),<br>            BatchNorm2d(out_feats),<br>            ReLU(),<br>            Conv2d(out_feats, out_feats, <input maxlength='11' name='kernel_size_65778912' style='width: 11ch;'>=3, padding=1),<br>            BatchNorm2d(out_feats),<br>        )<br>        self.downsample = (<br>            Sequential(<br>                Conv2d(in_feats, out_feats, kernel_size=1, stride=first_stride),<br>                BatchNorm2d(out_feats),<br>            )<br>            if first_stride != 1<br>            else None<br>        )<br>        self.out_relu = ReLU()<br><br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        y_out = <input maxlength='11' name='self.net(x)_74058408' style='width: 11ch;'><br>        x_out = x if self.downsample is None else <input maxlength='18' name='self.downsample(x)_06484473' style='width: 18ch;'><br>        out = <input maxlength='13' name='self.out_relu_32480541' style='width: 13ch;'>(x_out + y_out)<br>        return out</pre></div><br><img src='24dc40b3a4cb82d13fadc5ad0f6154eff69097797a8be3c831181d019c08f9d8.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to multiply two matrices (same as <font color='#ff5500'>a @ b</font>).<br><br><div class='exerciseprecontainer'><pre>def einsum_matmul(a: t.Tensor, b: t.Tensor) -&gt; t.Tensor:<br><br>    return t.<input maxlength='6' name='einsum_74974662' style='width: 6ch;'>(""ik,kj-&gt;<input maxlength='2' name='ij_38271924' style='width: 2ch;'>"", a, b)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to multiply two matrices (same as <font color='#ff5500'>a @ b</font>).<br><br><div class='exerciseprecontainer'><pre>def einsum_matmul(a: t.Tensor, b: t.Tensor) -&gt; t.Tensor:<br><br>    return t.<input maxlength='6' name='einsum_74974662' style='width: 6ch;'>(""ik,kj-&gt;<input maxlength='2' name='ij_38271924' style='width: 2ch;'>"", a, b)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to pad a vector with a specified value.<br><br><div class='exerciseprecontainer'><pre>def pad2d(x: t.Tensor, left: int, right: int, top: int, bottom: int, pad_value: float) -&gt; t.Tensor:<br>    """"""<br>    Return a new tensor with padding applied to the edges.<br>    x: shape (batch, in_channels, height, width), dtype float32<br>    Return: shape (batch, in_channels, top + height + bottom, left + width + right)<br>    """"""<br><br>    assert left &gt;= 0 and right &gt;= 0 and top &gt;= 0 and bottom &gt;= 0<br><br>    B, C, H, W = x.shape<br><br>    out = x.new_full((B, C, top + H + bottom, left + W + right), pad_value)<br><br>    out[<input maxlength='3' name='..._47557961' style='width: 3ch;'>, top : top <input maxlength='3' name='+ H_76913206' style='width: 3ch;'>, left : left <input maxlength='3' name='+ W_13050850' style='width: 3ch;'>] = x<br><br>    return out</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to pad a vector with a specified value.<br><br><div class='exerciseprecontainer'><pre>def pad2d(x: t.Tensor, left: int, right: int, top: int, bottom: int, pad_value: float) -&gt; t.Tensor:<br>    """"""<br>    Return a new tensor with padding applied to the edges.<br>    x: shape (batch, in_channels, height, width), dtype float32<br>    Return: shape (batch, in_channels, top + height + bottom, left + width + right)<br>    """"""<br><br>    assert left &gt;= 0 and right &gt;= 0 and top &gt;= 0 and bottom &gt;= 0<br><br>    B, C, H, W = x.shape<br><br>    out = x.new_full((B, C, top + H + bottom, left + W + right), pad_value)<br><br>    out[<input maxlength='3' name='..._47557961' style='width: 3ch;'>, top : top <input maxlength='3' name='+ H_76913206' style='width: 3ch;'>, left : left <input maxlength='3' name='+ W_13050850' style='width: 3ch;'>] = x<br><br>    return out</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x = t.rand((3, 4, 5))<br>&gt;&gt;&gt; x.stride()<br>(<input maxlength='8' name='20, 5, 1_15526461' style='width: 8ch;'>)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x = t.rand((3, 4, 5))<br>&gt;&gt;&gt; x.stride()<br>(<input maxlength='8' name='20, 5, 1_15526461' style='width: 8ch;'>)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), x.stride())<br>tensor([[<input maxlength='1' name='0_15343922' style='width: 1ch;'>, <input maxlength='1' name='1_44415364' style='width: 1ch;'>],<br>        [<input maxlength='1' name='4_59107841' style='width: 1ch;'>, <input maxlength='1' name='5_16562590' style='width: 1ch;'>]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), x.stride())<br>tensor([[<input maxlength='1' name='0_15343922' style='width: 1ch;'>, <input maxlength='1' name='1_44415364' style='width: 1ch;'>],<br>        [<input maxlength='1' name='4_59107841' style='width: 1ch;'>, <input maxlength='1' name='5_16562590' style='width: 1ch;'>]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), (1, 1))<br>tensor([[<input maxlength='1' name='0_15343922' style='width: 1ch;'>, <input maxlength='1' name='1_44415364' style='width: 1ch;'>],<br>        [<input maxlength='1' name='1_48226472' style='width: 1ch;'>, <input maxlength='1' name='2_53874816' style='width: 1ch;'>]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), (1, 1))<br>tensor([[<input maxlength='1' name='0_15343922' style='width: 1ch;'>, <input maxlength='1' name='1_44415364' style='width: 1ch;'>],<br>        [<input maxlength='1' name='1_48226472' style='width: 1ch;'>, <input maxlength='1' name='2_53874816' style='width: 1ch;'>]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), (0, 0), 3)<br>tensor([[<input maxlength='1' name='3_62460589' style='width: 1ch;'>, <input maxlength='1' name='3_13388169' style='width: 1ch;'>],<br>        [<input maxlength='1' name='3_29918062' style='width: 1ch;'>, <input maxlength='1' name='3_63579445' style='width: 1ch;'>]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), (0, 0), 3)<br>tensor([[<input maxlength='1' name='3_62460589' style='width: 1ch;'>, <input maxlength='1' name='3_13388169' style='width: 1ch;'>],<br>        [<input maxlength='1' name='3_29918062' style='width: 1ch;'>, <input maxlength='1' name='3_63579445' style='width: 1ch;'>]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), (1, 2))<br>tensor([[<input maxlength='1' name='0_15343922' style='width: 1ch;'>, <input maxlength='1' name='2_53874816' style='width: 1ch;'>],<br>        [<input maxlength='1' name='1_44415364' style='width: 1ch;'>, <input maxlength='1' name='3_62460589' style='width: 1ch;'>]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; x<br>tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]])<br><br>&gt;&gt;&gt; t.as_strided(x, (2, 2), (1, 2))<br>tensor([[<input maxlength='1' name='0_15343922' style='width: 1ch;'>, <input maxlength='1' name='2_53874816' style='width: 1ch;'>],<br>        [<input maxlength='1' name='1_44415364' style='width: 1ch;'>, <input maxlength='1' name='3_62460589' style='width: 1ch;'>]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code, using <font color='#ff5500'>as_strided</font>.<br><br><div class='exerciseprecontainer'><pre>def as_strided_trace(a: t.Tensor) -&gt; t.Tensor:<br>    """"""<br>    Compute the trace of the square 2D input using as_strided and sum.<br>    Tip: the stride argument to `as_strided` must account for the stride of the inputs `a.stride()`.<br>    """"""<br><br>    N, _ = a.shape<br>    stride = a.stride()<br>    a_strided = t.as_strided(a, size=(N,), stride=(<input maxlength='9' name='stride[0]_32445098' style='width: 9ch;'> + <input maxlength='9' name='stride[1]_57134421' style='width: 9ch;'>,))<br>    return <input maxlength='5' name='t.sum_99336989' style='width: 5ch;'>(a_strided)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code, using <font color='#ff5500'>as_strided</font>.<br><br><div class='exerciseprecontainer'><pre>def as_strided_trace(a: t.Tensor) -&gt; t.Tensor:<br>    """"""<br>    Compute the trace of the square 2D input using as_strided and sum.<br>    Tip: the stride argument to `as_strided` must account for the stride of the inputs `a.stride()`.<br>    """"""<br><br>    N, _ = a.shape<br>    stride = a.stride()<br>    a_strided = t.as_strided(a, size=(N,), stride=(<input maxlength='9' name='stride[0]_32445098' style='width: 9ch;'> + <input maxlength='9' name='stride[1]_57134421' style='width: 9ch;'>,))<br>    return <input maxlength='5' name='t.sum_99336989' style='width: 5ch;'>(a_strided)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code, using <font color='#ff5500'>as_strided</font>. (the arguments have spaces where appropriate)<br><br><div class='exerciseprecontainer'><pre>def as_strided_matmul(a: t.Tensor, b: t.Tensor) -&gt; t.Tensor:<br>    """"""<br>    Matrix multiply 2D matrices a and b (same as a @ b), but use as_strided this time.<br>    Use elementwise multiplication and sum.<br>    Tip: the stride argument to `as_strided` must account for the stride of the inputs `a.stride()` and `b.stride()`.<br>    """"""<br><br>    A0, A1 = a.shape<br>    B0, B1 = b.shape<br>    assert A1 == B0<br><br>    AS = a.stride()<br>    BS = b.stride()<br><br>    a_strided = a.as_strided(size=(<input maxlength='2' name='A0_02610708' style='width: 2ch;'>, A1, <input maxlength='2' name='B1_54112928' style='width: 2ch;'>), stride=(<input maxlength='15' name='AS[0], AS[1], 0_02441552' style='width: 15ch;'>))<br>    b_strided = b.as_strided(size=(<input maxlength='2' name='A0_98805714' style='width: 2ch;'>, A1, <input maxlength='2' name='B1_87967820' style='width: 2ch;'>), stride=(<input maxlength='15' name='0, BS[0], BS[1]_49998907' style='width: 15ch;'>))<br>    return (a_strided * b_strided).sum(dim=<input maxlength='1' name='1_44415364' style='width: 1ch;'>)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code, using <font color='#ff5500'>as_strided</font>. (the arguments have spaces where appropriate)<br><br><div class='exerciseprecontainer'><pre>def as_strided_matmul(a: t.Tensor, b: t.Tensor) -&gt; t.Tensor:<br>    """"""<br>    Matrix multiply 2D matrices a and b (same as a @ b), but use as_strided this time.<br>    Use elementwise multiplication and sum.<br>    Tip: the stride argument to `as_strided` must account for the stride of the inputs `a.stride()` and `b.stride()`.<br>    """"""<br><br>    A0, A1 = a.shape<br>    B0, B1 = b.shape<br>    assert A1 == B0<br><br>    AS = a.stride()<br>    BS = b.stride()<br><br>    a_strided = a.as_strided(size=(<input maxlength='2' name='A0_02610708' style='width: 2ch;'>, A1, <input maxlength='2' name='B1_54112928' style='width: 2ch;'>), stride=(<input maxlength='15' name='AS[0], AS[1], 0_02441552' style='width: 15ch;'>))<br>    b_strided = b.as_strided(size=(<input maxlength='2' name='A0_98805714' style='width: 2ch;'>, A1, <input maxlength='2' name='B1_87967820' style='width: 2ch;'>), stride=(<input maxlength='15' name='0, BS[0], BS[1]_49998907' style='width: 15ch;'>))<br>    return (a_strided * b_strided).sum(dim=<input maxlength='1' name='1_44415364' style='width: 1ch;'>)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement outer product using <font color=""#ff5500"">as_strided</font>.<br><br><div class=""exerciseprecontainer""><pre>u = t.rand(16)<br>v = t.rand(8)<br><br>outer_0 = t.outer(u, v)<br>outer_1 = t.as_strided(u, (<input maxlength=""5"" name=""16, 8_46157932"" style=""width: 5ch;"">), (<input maxlength=""4"" name=""1, 0_46294931"" style=""width: 4ch;"">)) * t.as_strided(v, (<input maxlength=""5"" name=""16, 8_46154931"" style=""width: 5ch;"">), (<input maxlength=""4"" name=""0, 1_46294962"" style=""width: 4ch;"">))<br><br>t.testing.assert_<input maxlength=""5"" name=""close_84899008"" style=""width: 5ch;"">(outer_0, outer_1)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement outer product using <font color=""#ff5500"">as_strided</font>.<br><br><div class=""exerciseprecontainer""><pre>u = t.rand(16)<br>v = t.rand(8)<br><br>outer_0 = t.outer(u, v)<br>outer_1 = t.as_strided(u, (<input maxlength=""5"" name=""16, 8_46157932"" style=""width: 5ch;"">), (<input maxlength=""4"" name=""1, 0_46294931"" style=""width: 4ch;"">)) * t.as_strided(v, (<input maxlength=""5"" name=""16, 8_46154931"" style=""width: 5ch;"">), (<input maxlength=""4"" name=""0, 1_46294962"" style=""width: 4ch;"">))<br><br>t.testing.assert_<input maxlength=""5"" name=""close_84899008"" style=""width: 5ch;"">(outer_0, outer_1)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement matrix multiplication using <font color=""#ff5500"">as_strided</font>.<br><br><div class=""exerciseprecontainer""><pre>a = t.randn(4, 5)<br>b = t.randn(5, 3)<br><br>mm_0 = t.mm(a, b)<br>mm_1 = (t.as_strided(a, (<input maxlength=""7"" name=""4, 5, 3_47002038"" style=""width: 7ch;"">), (<input maxlength=""7"" name=""5, 1, 0_54078270"" style=""width: 7ch;"">)) * t.as_strided(b, (<input maxlength=""7"" name=""4, 5, 3_38706725"" style=""width: 7ch;"">), (<input maxlength=""7"" name=""0, 3, 1_34975299"" style=""width: 7ch;"">))).sum(1)<br><br>t.testing.assert_allclose(mm_0, mm_1)<br></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement matrix multiplication using <font color=""#ff5500"">as_strided</font>.<br><br><div class=""exerciseprecontainer""><pre>a = t.randn(4, 5)<br>b = t.randn(5, 3)<br><br>mm_0 = t.mm(a, b)<br>mm_1 = (t.as_strided(a, (<input maxlength=""7"" name=""4, 5, 3_47002038"" style=""width: 7ch;"">), (<input maxlength=""7"" name=""5, 1, 0_54078270"" style=""width: 7ch;"">)) * t.as_strided(b, (<input maxlength=""7"" name=""4, 5, 3_38706725"" style=""width: 7ch;"">), (<input maxlength=""7"" name=""0, 3, 1_34975299"" style=""width: 7ch;"">))).sum(1)<br><br>t.testing.assert_allclose(mm_0, mm_1)<br></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Check that two tensors of the same size are close to each other (within some presumably very small epsilon error).<br><br><div class=""exerciseprecontainer""><pre>torch.t<input maxlength=""6"" name=""esting_97020025"" style=""width: 6ch;"">.<input maxlength=""12"" name=""assert_close_67623992"" style=""width: 12ch;"">(t0, t1)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Check that two tensors of the same size are close to each other (within some presumably very small epsilon error).<br><br><div class=""exerciseprecontainer""><pre>torch.t<input maxlength=""6"" name=""esting_97020025"" style=""width: 6ch;"">.<input maxlength=""12"" name=""assert_close_67623992"" style=""width: 12ch;"">(t0, t1)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function, which is meant to replicate the basic functionality of <font color=""#ff5500"">torch.nn.functional.conv2d</font>.<br><br><div class=""exerciseprecontainer""><pre>def conv2d_minimal(x: t.Tensor, weights: t.Tensor) -&gt; t.Tensor:<br>    """"""<br>    Like torch's conv2d using bias=False and all other keyword arguments left at their default values.<br><br>    x: shape (batch, in_channels, height, width)<br>    weights: shape (out_channels, in_channels, kernel_height, kernel_width)<br><br>    Returns: shape (batch, out_channels, output_height, output_width)<br>    """"""<br>    batch_size, in_channels, in_height, in_width = x.shape<br>    out_channels, _, kernel_height, kernel_width = weights.shape<br><br>    out_height = in_height<input maxlength=""1"" name=""-_79260341"" style=""width: 1ch;"">kernel_height<input maxlength=""2"" name=""+1_92869199"" style=""width: 2ch;""><br>    out_width = in_width<input maxlength=""1"" name=""-_16897131"" style=""width: 1ch;"">kernel_width<input maxlength=""2"" name=""+1_39385040"" style=""width: 2ch;""><br><br>    xs = <input maxlength=""10"" name=""x.stride()_21746079"" style=""width: 10ch;""><br><br>    conv_size = (batch_size, in_channels, out_channels, out_height, out_width, kernel_height, kernel_width)<br>    conv_stride = (xs[0], xs[1], xs[2], xs[3], xs[2], xs[3])<br><br>    strided_x = x.as_strided(size=conv_size, stride=conv_stride)<br><br>    return t.einsum(""bcxyij,ocij-&gt;<input maxlength=""4"" name=""boxy_62453223"" style=""width: 4ch;"">"", strided_x, weights)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function, which is meant to replicate the basic functionality of <font color=""#ff5500"">torch.nn.functional.conv2d</font>.<br><br><div class=""exerciseprecontainer""><pre>def conv2d_minimal(x: t.Tensor, weights: t.Tensor) -&gt; t.Tensor:<br>    """"""<br>    Like torch's conv2d using bias=False and all other keyword arguments left at their default values.<br><br>    x: shape (batch, in_channels, height, width)<br>    weights: shape (out_channels, in_channels, kernel_height, kernel_width)<br><br>    Returns: shape (batch, out_channels, output_height, output_width)<br>    """"""<br>    batch_size, in_channels, in_height, in_width = x.shape<br>    out_channels, _, kernel_height, kernel_width = weights.shape<br><br>    out_height = in_height<input maxlength=""1"" name=""-_79260341"" style=""width: 1ch;"">kernel_height<input maxlength=""2"" name=""+1_92869199"" style=""width: 2ch;""><br>    out_width = in_width<input maxlength=""1"" name=""-_16897131"" style=""width: 1ch;"">kernel_width<input maxlength=""2"" name=""+1_39385040"" style=""width: 2ch;""><br><br>    xs = <input maxlength=""10"" name=""x.stride()_21746079"" style=""width: 10ch;""><br><br>    conv_size = (batch_size, in_channels, out_channels, out_height, out_width, kernel_height, kernel_width)<br>    conv_stride = (xs[0], xs[1], xs[2], xs[3], xs[2], xs[3])<br><br>    strided_x = x.as_strided(size=conv_size, stride=conv_stride)<br><br>    return t.einsum(""bcxyij,ocij-&gt;<input maxlength=""4"" name=""boxy_62453223"" style=""width: 4ch;"">"", strided_x, weights)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of code meant to build up backprop from scratch.<br><br>Fill in this ""backwards function"" for <font color='#ff5500'>log</font> (i.e. it returns the gradient, for use in backprop).<br><br>Use spaces when appropriate.<br><br><div class='exerciseprecontainer'><pre>def log_back(grad_out: Arr, out: Arr, x: Arr) -&gt; Arr:<br>    """"""<br>    Backwards function for f(x) = log(x)<br>    grad_out: Gradient of some loss wrt out<br>    out: the output of np.log(x). Provided as an optimization in case it's cheaper to express the gradient in terms of the output.<br>    x: the input of np.log.<br>    Return: gradient of the given loss wrt x<br>    """"""<br><br>    return <input maxlength='12' name='grad_out / x_48051212' style='width: 12ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of code meant to build up backprop from scratch.<br><br>Fill in this ""backwards function"" for <font color='#ff5500'>log</font> (i.e. it returns the gradient, for use in backprop).<br><br>Use spaces when appropriate.<br><br><div class='exerciseprecontainer'><pre>def log_back(grad_out: Arr, out: Arr, x: Arr) -&gt; Arr:<br>    """"""<br>    Backwards function for f(x) = log(x)<br>    grad_out: Gradient of some loss wrt out<br>    out: the output of np.log(x). Provided as an optimization in case it's cheaper to express the gradient in terms of the output.<br>    x: the input of np.log.<br>    Return: gradient of the given loss wrt x<br>    """"""<br><br>    return <input maxlength='12' name='grad_out / x_48051212' style='width: 12ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of code meant to build up backprop from scratch.<br><br>Fill in this ""backwards function"" for <font color='#ff5500'>max</font> (i.e. it returns the gradient, for use in backprop). It uses the PyTorch convention of how to treat the gradient when both elements are the same.<br><br>Note that <font color='#ff5500'>unbroadcast</font> is meant to reverse any broadcasting which might have been used to produce <font color='#ff5500'>out = max(x, y)</font> from <font color='#ff5500'>x.</font><br><br>Use spaces when appropriate.<br><br><div class='exerciseprecontainer'><pre>def maximum_back0(grad_out: Arr, out: Arr, x: Arr, y: Arr):<br>    """"""<br>    Backwards function for max(x, y) wrt x.<br>    """"""<br><br>    out = grad_out.copy()<br>    out = np.<input maxlength='5' name='where_78328187' style='width: 5ch;'>(<input maxlength='6' name='x == y_81645190' style='width: 6ch;'>, grad_out / 2, out)<br>    out = np.<input maxlength='5' name='where_48178689' style='width: 5ch;'>(<input maxlength='5' name='x &lt; y_59690007' style='width: 5ch;'>, 0.0, out)<br>    return unbroadcast(out, x)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is part of code meant to build up backprop from scratch.<br><br>Fill in this ""backwards function"" for <font color='#ff5500'>max</font> (i.e. it returns the gradient, for use in backprop). It uses the PyTorch convention of how to treat the gradient when both elements are the same.<br><br>Note that <font color='#ff5500'>unbroadcast</font> is meant to reverse any broadcasting which might have been used to produce <font color='#ff5500'>out = max(x, y)</font> from <font color='#ff5500'>x.</font><br><br>Use spaces when appropriate.<br><br><div class='exerciseprecontainer'><pre>def maximum_back0(grad_out: Arr, out: Arr, x: Arr, y: Arr):<br>    """"""<br>    Backwards function for max(x, y) wrt x.<br>    """"""<br><br>    out = grad_out.copy()<br>    out = np.<input maxlength='5' name='where_78328187' style='width: 5ch;'>(<input maxlength='6' name='x == y_81645190' style='width: 6ch;'>, grad_out / 2, out)<br>    out = np.<input maxlength='5' name='where_48178689' style='width: 5ch;'>(<input maxlength='5' name='x &lt; y_59690007' style='width: 5ch;'>, 0.0, out)<br>    return unbroadcast(out, x)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the following array, using the \(U[0, 1]\) distribution.<br><br><div class='exerciseprecontainer'><pre>import torch as t<br><br>w = t.empty(3, 5)<br><br>t.nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='8' name='uniform__80134487' style='width: 8ch;'>(w)<br>tensor([[0.9433, 0.9823, 0.1521, 0.3475, 0.9287],<br>        [0.5930, 0.2135, 0.8058, 0.3852, 0.5228],<br>        [0.9380, 0.1480, 0.5991, 0.1289, 0.0797]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the following array, using the \(U[0, 1]\) distribution.<br><br><div class='exerciseprecontainer'><pre>import torch as t<br><br>w = t.empty(3, 5)<br><br>t.nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='8' name='uniform__80134487' style='width: 8ch;'>(w)<br>tensor([[0.9433, 0.9823, 0.1521, 0.3475, 0.9287],<br>        [0.5930, 0.2135, 0.8058, 0.3852, 0.5228],<br>        [0.9380, 0.1480, 0.5991, 0.1289, 0.0797]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the weights of thie convolutional layer using the Xavier method (uniform).<br><br><div class='exerciseprecontainer'><pre>conv1 = t.nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3)<br><br>conv1.weight = t.nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='15' name='xavier_uniform__19637541' style='width: 15ch;'>(conv1.weight);</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the weights of thie convolutional layer using the Xavier method (uniform).<br><br><div class='exerciseprecontainer'><pre>conv1 = t.nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3)<br><br>conv1.weight = t.nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='15' name='xavier_uniform__19637541' style='width: 15ch;'>(conv1.weight);</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the array <font color=""#ff5500"">weights</font> as you would for the weights in a neural network.<br><br><div class=""exerciseprecontainer""><pre>bound = in_features ** -0.5<br><br>weights = t.e<input maxlength=""4"" name=""mpty_46294962"" style=""width: 4ch;"">(out_features).<input maxlength=""8"" name=""uniform__80134487"" style=""width: 8ch;"">(-bound, bound)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the array <font color=""#ff5500"">weights</font> as you would for the weights in a neural network.<br><br><div class=""exerciseprecontainer""><pre>bound = in_features ** -0.5<br><br>weights = t.e<input maxlength=""4"" name=""mpty_46294962"" style=""width: 4ch;"">(out_features).<input maxlength=""8"" name=""uniform__80134487"" style=""width: 8ch;"">(-bound, bound)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete the following code, to define a class for linear layers of a neural network.<br><br><div class='exerciseprecontainer'><pre>class Linear(nn.Module):<br><br>    def __init__(self, in_features: int, out_features: int, bias=True):<br>        self.in_features = in_features<br>        self.out_features = out_features<br>        super().__init__()<br>        bound = in_features**-0.5<br>        self.weight = Parameter(empty(out_features, in_features).uniform_(-bound, bound))<br>        self.bias = Parameter(empty(out_features).uniform_(-bound, bound)) if bias else None<br><br>    def forward(self, x: Tensor) -&gt; Tensor:<br>        """"""<br>        x: shape (*, in_features)<br>        Return: shape (*, out_features)<br>        """"""<br>        out = x <input maxlength='1' name='@_19203385' style='width: 1ch;'> einops.<input maxlength='9' name='rearrange_81339819' style='width: 9ch;'>(self.weight, ""out in -&gt; <input maxlength='6' name='in out_05225067' style='width: 6ch;'>"")<br>        if self.bias is not None:<br>            out = out + self.bias<br>        return out</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete the following code, to define a class for linear layers of a neural network.<br><br><div class='exerciseprecontainer'><pre>class Linear(nn.Module):<br><br>    def __init__(self, in_features: int, out_features: int, bias=True):<br>        self.in_features = in_features<br>        self.out_features = out_features<br>        super().__init__()<br>        bound = in_features**-0.5<br>        self.weight = Parameter(empty(out_features, in_features).uniform_(-bound, bound))<br>        self.bias = Parameter(empty(out_features).uniform_(-bound, bound)) if bias else None<br><br>    def forward(self, x: Tensor) -&gt; Tensor:<br>        """"""<br>        x: shape (*, in_features)<br>        Return: shape (*, out_features)<br>        """"""<br>        out = x <input maxlength='1' name='@_19203385' style='width: 1ch;'> einops.<input maxlength='9' name='rearrange_81339819' style='width: 9ch;'>(self.weight, ""out in -&gt; <input maxlength='6' name='in out_05225067' style='width: 6ch;'>"")<br>        if self.bias is not None:<br>            out = out + self.bias<br>        return out</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to train a neural network.<br><br><div class='exerciseprecontainer'><pre>def train(model, train_loader, optimizer, criterion, epoch):<br><br>    for batch_idx, (data, target) in enumerate(train_loader):<br><br>        optimizer.<input maxlength='11' name='zero_grad()_95267376' style='width: 11ch;'><br>        output = <input maxlength='11' name='model(data)_32906766' style='width: 11ch;'><br>        loss = criterion(output, <input maxlength='6' name='target_07527631' style='width: 6ch;'>)<br>        loss.<input maxlength='10' name='backward()_92041112' style='width: 10ch;'><br>        <input maxlength='16' name='optimizer.step()_66529365' style='width: 16ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to train a neural network.<br><br><div class='exerciseprecontainer'><pre>def train(model, train_loader, optimizer, criterion, epoch):<br><br>    for batch_idx, (data, target) in enumerate(train_loader):<br><br>        optimizer.<input maxlength='11' name='zero_grad()_95267376' style='width: 11ch;'><br>        output = <input maxlength='11' name='model(data)_32906766' style='width: 11ch;'><br>        loss = criterion(output, <input maxlength='6' name='target_07527631' style='width: 6ch;'>)<br>        loss.<input maxlength='10' name='backward()_92041112' style='width: 10ch;'><br>        <input maxlength='16' name='optimizer.step()_66529365' style='width: 16ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code using the <font color='#ff5500'>typing</font> module.<br><br>The function <font color='#ff5500'>foo</font> should have no type conditions on its input argument, but should output an integer.<br><br><div class='exerciseprecontainer'><pre>from typing import <input maxlength='3' name='Any_03383644' style='width: 3ch;'><br><br>def foo(item: <input maxlength='3' name='Any_90111340' style='width: 3ch;'>) <input maxlength='2' name='-&gt;_15353440' style='width: 2ch;'> <input maxlength='3' name='int_65092950' style='width: 3ch;'>:<br><br>    ...</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code using the <font color='#ff5500'>typing</font> module.<br><br>The function <font color='#ff5500'>foo</font> should have no type conditions on its input argument, but should output an integer.<br><br><div class='exerciseprecontainer'><pre>from typing import <input maxlength='3' name='Any_03383644' style='width: 3ch;'><br><br>def foo(item: <input maxlength='3' name='Any_90111340' style='width: 3ch;'>) <input maxlength='2' name='-&gt;_15353440' style='width: 2ch;'> <input maxlength='3' name='int_65092950' style='width: 3ch;'>:<br><br>    ...</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code to typecheck a function that scales a list of floats.<br><br><div class='exerciseprecontainer'><pre>Vector = <input maxlength='11' name='list[float]_17517032' style='width: 11ch;'><br><br>def scale(scalar: float, vector: Vector) -&gt; Vector:<br>    return [scalar * num for num in vector]</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code to typecheck a function that scales a list of floats.<br><br><div class='exerciseprecontainer'><pre>Vector = <input maxlength='11' name='list[float]_17517032' style='width: 11ch;'><br><br>def scale(scalar: float, vector: Vector) -&gt; Vector:<br>    return [scalar * num for num in vector]</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The variable <font color='#ff5500'>a</font> can be either a list or a dictionary.<br><br>Assume the relevant three objects have already been imported from <font color='#ff5500'>typing</font>.<br><br><div class='exerciseprecontainer'><pre>a: <input maxlength='5' name='Union_82552732' style='width: 5ch;'>[<input maxlength='4' name='List_03685269' style='width: 4ch;'>, <input maxlength='4' name='Dict_46850927' style='width: 4ch;'>]</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The variable <font color='#ff5500'>a</font> can be either a list or a dictionary.<br><br>Assume the relevant three objects have already been imported from <font color='#ff5500'>typing</font>.<br><br><div class='exerciseprecontainer'><pre>a: <input maxlength='5' name='Union_82552732' style='width: 5ch;'>[<input maxlength='4' name='List_03685269' style='width: 4ch;'>, <input maxlength='4' name='Dict_46850927' style='width: 4ch;'>]</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Define a function which takes zero or more floats as arguments. Use&nbsp;<font color=""#ff5500"">args</font>&nbsp;as the keyword.<br><br><div class=""exerciseprecontainer""><pre>def func(<input maxlength=""12"" name=""*args: float_72786521"" style=""width: 12ch;"">):<br>    ...</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Define a function which takes zero or more floats as arguments. Use&nbsp;<font color=""#ff5500"">args</font>&nbsp;as the keyword.<br><br><div class=""exerciseprecontainer""><pre>def func(<input maxlength=""12"" name=""*args: float_72786521"" style=""width: 12ch;"">):<br>    ...</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'><i>Weight decay</i> means that on each iteration, in addition to a regular step, we also shrink each parameter very slightly towards 0 by multiplying a scaling factor close to 1, e.g. 0.9999. Empirically, this seems to help but there are no proofs that apply to deep neural networks.<br><br>In the case of linear regression, weight decay is mathematically equivalent to having a <i>prior</i> that each parameter is <i>Gaussian distributed</i>. This is an example of <i>inductive bias</i> - we make an assumption that helps us in the case where it's justified, and hurts us in the case where it's not justified.</div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'><i>Weight decay</i> means that on each iteration, in addition to a regular step, we also shrink each parameter very slightly towards 0 by multiplying a scaling factor close to 1, e.g. 0.9999. Empirically, this seems to help but there are no proofs that apply to deep neural networks.<br><br>In the case of linear regression, weight decay is mathematically equivalent to having a <i>prior</i> that each parameter is <i>Gaussian distributed</i>. This is an example of <i>inductive bias</i> - we make an assumption that helps us in the case where it's justified, and hurts us in the case where it's not justified.</div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the second block of code with a different function (which does the same thing as the first one).<br><br><div class=""exerciseprecontainer""><pre>if MAIN:<br>    x = t.ones(1, 2, 3, requires_grad=True)<br>    y = x * x<br>    with t.inference_mode():<br>        z = x * x<br>    assert y.requires_grad<br>    assert not z.requires_grad<br><br>if MAIN:<br>    x = t.ones(1, 2, 3, requires_grad=True)<br>    y = x * x<br>    with t.<input maxlength=""8"" name=""no_grad()_12623307"" style=""width: 8ch;"">:<br>        z = x * x<br>    assert y.requires_grad<br>    assert not z.requires_grad</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the second block of code with a different function (which does the same thing as the first one).<br><br><div class=""exerciseprecontainer""><pre>if MAIN:<br>    x = t.ones(1, 2, 3, requires_grad=True)<br>    y = x * x<br>    with t.inference_mode():<br>        z = x * x<br>    assert y.requires_grad<br>    assert not z.requires_grad<br><br>if MAIN:<br>    x = t.ones(1, 2, 3, requires_grad=True)<br>    y = x * x<br>    with t.<input maxlength=""8"" name=""no_grad()_12623307"" style=""width: 8ch;"">:<br>        z = x * x<br>    assert y.requires_grad<br>    assert not z.requires_grad</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code, to switch to the GPU if possible.<br><br><div class='exerciseprecontainer'><pre>device = t.device(""cuda"" if t.<input maxlength='4' name='cuda_59834153' style='width: 4ch;'>.<input maxlength='14' name='is_available()_12160139' style='width: 14ch;'> else ""cpu"")</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code, to switch to the GPU if possible.<br><br><div class='exerciseprecontainer'><pre>device = t.device(""cuda"" if t.<input maxlength='4' name='cuda_59834153' style='width: 4ch;'>.<input maxlength='14' name='is_available()_12160139' style='width: 14ch;'> else ""cpu"")</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import a function which can take <font color='#ff5500'>*args</font> representing an array of tensors (each one has 0th dimension corresponding to batch), and output a dataset.<br><br><div class='exerciseprecontainer'><pre>from torch.<input maxlength='5' name='utils_61916564' style='width: 5ch;'>.<input maxlength='4' name='data_42851083' style='width: 4ch;'>.<input maxlength='7' name='dataset_92821086' style='width: 7ch;'> import T<input maxlength='12' name='ensorDataset_33165782' style='width: 12ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import a function which can take <font color='#ff5500'>*args</font> representing an array of tensors (each one has 0th dimension corresponding to batch), and output a dataset.<br><br><div class='exerciseprecontainer'><pre>from torch.<input maxlength='5' name='utils_61916564' style='width: 5ch;'>.<input maxlength='4' name='data_42851083' style='width: 4ch;'>.<input maxlength='7' name='dataset_92821086' style='width: 7ch;'> import T<input maxlength='12' name='ensorDataset_33165782' style='width: 12ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code.<br><br>The function <font color='#ff5500'>preprocess_image</font> should take a <font color='#ff5500'>PIL.Image.Image</font> object, and return a <font color='#ff5500'>TensorDataset</font> where the input data is a tensor of coordinates (each row is a pixel, so batch size = number of pixels), and the output data is a tensor of RGB-values.<br><br>The coordinates should also be normalised, i.e. <font color='#ff5500'>all_coordinates_scaled</font> should return values mapped to \([-1, 1]\).<br><br><div class='exerciseprecontainer'><pre>import torch as t<br>from torch.utils.data.<input maxlength='7' name='dataset_92821086' style='width: 7ch;'> import TensorDataset<br>from <input maxlength='6' name='einops_35854873' style='width: 6ch;'> import repeat, rearrange<br>from PIL import Image<br><br>def all_coordinates_scaled(height: int, width: int) -&gt; t.Tensor:<br><br>    xs = <input maxlength='6' name='repeat_07988920' style='width: 6ch;'>(t.arange(width, dtype=t.float32), ""w -&gt; (h w)"", <input maxlength='8' name='h=height_28870789' style='width: 8ch;'>) / width<br>    ys = <input maxlength='6' name='repeat_41205204' style='width: 6ch;'>(t.arange(height, dtype=t.float32), ""h -&gt; (h w)"", <input maxlength='7' name='w=width_03404876' style='width: 7ch;'>) / height<br>    return t.stack((xs, ys), dim=1) * 2.0 - 1.0<br><br>def preprocess_image(img: Image.Image) -&gt; TensorDataset:<br><br>    img_t = transforms.ToTensor()(img)[:3, :, :]<br>    _, height, width = img_t.shape<br>    X = all_coordinates_scaled(height, width)<br>    labels = <input maxlength='9' name='rearrange_81339819' style='width: 9ch;'>(img_t, ""c h w -&gt; (h w) c"") * 2.0 - 1.0<br>    return TensorDataset(X, labels)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code.<br><br>The function <font color='#ff5500'>preprocess_image</font> should take a <font color='#ff5500'>PIL.Image.Image</font> object, and return a <font color='#ff5500'>TensorDataset</font> where the input data is a tensor of coordinates (each row is a pixel, so batch size = number of pixels), and the output data is a tensor of RGB-values.<br><br>The coordinates should also be normalised, i.e. <font color='#ff5500'>all_coordinates_scaled</font> should return values mapped to \([-1, 1]\).<br><br><div class='exerciseprecontainer'><pre>import torch as t<br>from torch.utils.data.<input maxlength='7' name='dataset_92821086' style='width: 7ch;'> import TensorDataset<br>from <input maxlength='6' name='einops_35854873' style='width: 6ch;'> import repeat, rearrange<br>from PIL import Image<br><br>def all_coordinates_scaled(height: int, width: int) -&gt; t.Tensor:<br><br>    xs = <input maxlength='6' name='repeat_07988920' style='width: 6ch;'>(t.arange(width, dtype=t.float32), ""w -&gt; (h w)"", <input maxlength='8' name='h=height_28870789' style='width: 8ch;'>) / width<br>    ys = <input maxlength='6' name='repeat_41205204' style='width: 6ch;'>(t.arange(height, dtype=t.float32), ""h -&gt; (h w)"", <input maxlength='7' name='w=width_03404876' style='width: 7ch;'>) / height<br>    return t.stack((xs, ys), dim=1) * 2.0 - 1.0<br><br>def preprocess_image(img: Image.Image) -&gt; TensorDataset:<br><br>    img_t = transforms.ToTensor()(img)[:3, :, :]<br>    _, height, width = img_t.shape<br>    X = all_coordinates_scaled(height, width)<br>    labels = <input maxlength='9' name='rearrange_81339819' style='width: 9ch;'>(img_t, ""c h w -&gt; (h w) c"") * 2.0 - 1.0<br>    return TensorDataset(X, labels)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code.<br><br>The function <font color='#ff5500'>preprocess_image</font> should take a <font color='#ff5500'>PIL.Image.Image</font> object, and return a <font color='#ff5500'>TensorDataset</font> where the input data is a tensor of coordinates (each row is a pixel, so batch size = number of pixels), and the output data is a tensor of RGB-values.<br><br>The coordinates should also be normalised, i.e. <font color='#ff5500'>all_coordinates_scaled</font> should return values mapped to \([-1, 1]\).<br><br><div class='exerciseprecontainer'><pre>import torch as t<br>from torch.utils.data.dataset import TensorDataset<br>from einops import repeat, rearrange<br>from PIL import Image<br><br>def all_coordinates_scaled(height: int, width: int) -&gt; t.Tensor:<br><br>    xs = repeat(t.arange(width, dtype=t.float32), ""w -&gt; <input maxlength='5' name='(h w)_89959822' style='width: 5ch;'>"", h=height) / width<br>    ys = repeat(t.arange(height, dtype=t.float32), ""h -&gt; <input maxlength='5' name='(h w)_32464261' style='width: 5ch;'>"", w=width) / height<br>    return t.<input maxlength='5' name='stack_94669254' style='width: 5ch;'>((xs, ys), dim=1) * 2.0 - 1.0<br><br>def preprocess_image(img: Image.Image) -&gt; TensorDataset:<br><br>    img_t = transforms.ToTensor()(img)[:3, :, :]<br>    _, height, width = img_t.shape<br>    X = all_coordinates_scaled(height, width)<br>    labels = rearrange(img_t, ""c h w -&gt; <input maxlength='7' name='(h w) c_27378395' style='width: 7ch;'>"") * 2.0 - 1.0<br>    return TensorDataset(X, labels)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the following code.<br><br>The function <font color='#ff5500'>preprocess_image</font> should take a <font color='#ff5500'>PIL.Image.Image</font> object, and return a <font color='#ff5500'>TensorDataset</font> where the input data is a tensor of coordinates (each row is a pixel, so batch size = number of pixels), and the output data is a tensor of RGB-values.<br><br>The coordinates should also be normalised, i.e. <font color='#ff5500'>all_coordinates_scaled</font> should return values mapped to \([-1, 1]\).<br><br><div class='exerciseprecontainer'><pre>import torch as t<br>from torch.utils.data.dataset import TensorDataset<br>from einops import repeat, rearrange<br>from PIL import Image<br><br>def all_coordinates_scaled(height: int, width: int) -&gt; t.Tensor:<br><br>    xs = repeat(t.arange(width, dtype=t.float32), ""w -&gt; <input maxlength='5' name='(h w)_89959822' style='width: 5ch;'>"", h=height) / width<br>    ys = repeat(t.arange(height, dtype=t.float32), ""h -&gt; <input maxlength='5' name='(h w)_32464261' style='width: 5ch;'>"", w=width) / height<br>    return t.<input maxlength='5' name='stack_94669254' style='width: 5ch;'>((xs, ys), dim=1) * 2.0 - 1.0<br><br>def preprocess_image(img: Image.Image) -&gt; TensorDataset:<br><br>    img_t = transforms.ToTensor()(img)[:3, :, :]<br>    _, height, width = img_t.shape<br>    X = all_coordinates_scaled(height, width)<br>    labels = rearrange(img_t, ""c h w -&gt; <input maxlength='7' name='(h w) c_27378395' style='width: 7ch;'>"") * 2.0 - 1.0<br>    return TensorDataset(X, labels)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code, to plot contours of any user-defined function.<br><br><div class='exerciseprecontainer'><pre>def plot_contours_of_func(func, xmin=-2, xmax=2, ymin=-2, ymax=2, n_points=50, log_scale=False):<br><br>    func_vectorized = np.<input maxlength='9' name='vectorize_24065160' style='width: 9ch;'>(func)<br><br>    fig, ax = <input maxlength='14' name='plt.subplots()_43368421' style='width: 14ch;'><br>    x = np.linspace(xmin, xmax, n_points)<br>    y = np.linspace(ymin, ymax, n_points)<br>    xx = einops.repeat(x, ""x -&gt; <input maxlength='3' name='y x_16300976' style='width: 3ch;'>"", y=n_points)<br>    yy = einops.repeat(y, ""y -&gt; <input maxlength='3' name='y x_05695834' style='width: 3ch;'>"", x=n_points)<br>    zz = func_vectorized(xx, yy)<br>    contour = ax.contourf(x, y, np.log(zz) if log_scale else zz)<br>    ax.contour(contour)<br>    ax.set(xlabel=""x"", ylabel=""y"")</pre></div><br>Example of use:<br><br><div class='exerciseprecontainer'><pre>plot_contours_of_func(lambda x, y: np.linalg.norm([x, y]), log_scale=True)</pre></div><br><img src='f691815d22fb0c7ae2afde94736038acf2da65ed6b834c113db9811e750d9338.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code, to plot contours of any user-defined function.<br><br><div class='exerciseprecontainer'><pre>def plot_contours_of_func(func, xmin=-2, xmax=2, ymin=-2, ymax=2, n_points=50, log_scale=False):<br><br>    func_vectorized = np.<input maxlength='9' name='vectorize_24065160' style='width: 9ch;'>(func)<br><br>    fig, ax = <input maxlength='14' name='plt.subplots()_43368421' style='width: 14ch;'><br>    x = np.linspace(xmin, xmax, n_points)<br>    y = np.linspace(ymin, ymax, n_points)<br>    xx = einops.repeat(x, ""x -&gt; <input maxlength='3' name='y x_16300976' style='width: 3ch;'>"", y=n_points)<br>    yy = einops.repeat(y, ""y -&gt; <input maxlength='3' name='y x_05695834' style='width: 3ch;'>"", x=n_points)<br>    zz = func_vectorized(xx, yy)<br>    contour = ax.contourf(x, y, np.log(zz) if log_scale else zz)<br>    ax.contour(contour)<br>    ax.set(xlabel=""x"", ylabel=""y"")</pre></div><br>Example of use:<br><br><div class='exerciseprecontainer'><pre>plot_contours_of_func(lambda x, y: np.linalg.norm([x, y]), log_scale=True)</pre></div><br><img src='f691815d22fb0c7ae2afde94736038acf2da65ed6b834c113db9811e750d9338.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this a representation of? What is a <b>Gabor filter</b>?<br><br><br><img src=""961KiosPIVdh9Mn7R8gP-BDGHiXR4sxq-q4oHFnHqMRV_YJsNnXxlrlYRIMDJhW_YVZcs_A8ZCxf3C0fjtd15aqKiytVCJxgiyX-3EnxtqEnj3odiC4.png"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this a representation of? What is a <b>Gabor filter</b>?<br><br><br><img src=""961KiosPIVdh9Mn7R8gP-BDGHiXR4sxq-q4oHFnHqMRV_YJsNnXxlrlYRIMDJhW_YVZcs_A8ZCxf3C0fjtd15aqKiytVCJxgiyX-3EnxtqEnj3odiC4.png"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is a representation of the neural network <b>Inception</b>, which was trained to classify images.<br><br>A <b>Gabor filter is&nbsp;</b>a linear filter used for texture analysis, which essentially means that it analyzes whether there is any specific frequency content in the image in specific directions in a localized region around the point or region of analysis.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What (at a high-level, i.e. without specifics) differs between&nbsp;<b>convolutional networks</b>, <b>recurrent networks</b>, and <b>transfomers</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What (at a high-level, i.e. without specifics) differs between&nbsp;<b>convolutional networks</b>, <b>recurrent networks</b>, and <b>transfomers</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	These are 3 prominent <b>neural network architectures</b>, i.e. ways that neurons in layers are connected to each other.<br><br>For example, an RNN feeds back into itself:<br><br><img src=""paste-15323849f187c82c8fbf67c4d5882983d2dce80f.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Summarise&nbsp;<b>supervised</b>, <b>unsupervised </b>and <b>reinforcement learning</b>.
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Summarise&nbsp;<b>supervised</b>, <b>unsupervised </b>and <b>reinforcement learning</b>.
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Supervised learning </b>= labelled data, specified objective. Could be <b>regression </b>or <b>classification</b><br><br><b>Unsupervised learning </b>= unlabelled data, unspecified objective. Aim is to <b>predict or compress</b> the dataset, which often allows us to<b> generate more data</b> that is similar to the training data<br><br><b>Reinforcement learning </b>= data takes the form of an <b>environment</b>&nbsp;in which the AI takes actions and receives <b>rewards</b>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>generalisation </b>and <b>transfer learning</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>generalisation </b>and <b>transfer learning</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Generalisation </b>= the ability to generalise from training data to examples it hasn't already seen, i.e. <b>different examples of the same task</b><br><br><b>Transfer learning </b>= the ability to transfer its experience at one task to a <b>new task</b>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>ReLU</b>? What are 3 advantages of it over the historical alternative?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>ReLU</b>? What are 3 advantages of it over the historical alternative?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src=""1XxxiA0jJvPrHEJHD4z893g.png""><br><br>Relu stands for <b>rectified linear units</b>. It's used more commonly than the traditional <b>sigmoid function </b>these days.<br><br>3 advantages are:<ol><li>Easier to compute</li><li><b>Sparsity </b>(many weights will be set to zero, whereas sigmoid usually gives <b>dense representations </b>because they never vanish)</li><li>Gradient unlikely to vanish (results in faster learning)</li></ol>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <b>policy-based </b>and <b>value-based </b>methods?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <b>policy-based </b>and <b>value-based </b>methods?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	In <b>policy-based </b>methods, we learn a policy function directly, and keep it in memory during learning. A policy function maps states to actions.<br><img src=""paste-7ca654ab479990e92377569a0d0781338d59c159.jpg""><br><br>In <b>value-based </b>methods, we train a value function that maps a state to the expected value of being at that state. The policy here is implicit, and can be derived directly from the value function.<br><img src=""paste-81f19aa228385da1007b98842b1a3c83b2814cc8.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>CNN</b>, and why is it useful?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>CNN</b>, and why is it useful?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>CNN </b>= convolutional neural network.<br><br>They're also known as <b>shift invariant </b>or <b>space invariant</b>. This is because they use <b>convolutional filters </b>(or <b>kernels</b>), which are translation-invariant filters that are applied to a layer of neurons. These filters are sometimes defined, and sometimes are themselves learned by the network.<br><br>They are useful because they avoid overfitting - filters can look for specific translation-invariant features (patterns such as edges). For instance, the filter below detects gradients from light in the top-left to dark in the top-right.<br><br><img src=""paste-59daffc7fb55fb059da796cd58d117015ef495ee.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>MNIST</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>MNIST</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It is a large database of <b>handwritten digits</b>, that is commonly used for training <b>image processing systems</b>.<br><br><img src=""320px-MnistExamples.png"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>pooling</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>pooling</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Pooling is a technique to<b> reduce the dimensions of the feature maps</b> by summarising the features present in a region of the feature map. <br><br>It usually involves taking the <b>maximum </b>or <b>average </b>across the pooled area.<br><br><img src=""MaxpoolSample2.png"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>stride</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>stride</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	In a convolutional operation or pooling, the delta in each dimension of the next series of input slices. <br><br>For example, below shows a (1,1) stride during a convolutional operation.<br><br><img src=""paste-617801f89b07e6028342396ed00c68dae91d97d1.jpg"">&nbsp; &nbsp;<img src=""paste-cb5ce46193cebee40b8ea154276059df24184a75.jpg"">&nbsp; ...&nbsp;&nbsp;<img src=""paste-d697ca4351932c6ff4557d36a8276270afd7cc82.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are 3 important invariances often required in image classification? Which one isn't always desirable?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are 3 important invariances often required in image classification? Which one isn't always desirable?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li><b>Translational invariance</b></li><li><b>Size invariance</b></li><li><b>Rotational invariance </b>(this is not always desirable, e.g. 9 vs 6)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>GPT</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>GPT</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>GPT </b>= Generative Pre-trained Transformer<br><br>A family of <b>Transformer</b>-based <b>language models </b>developed by <b>OpenAI</b>. They use deep learning to produce human-like text.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>attention </b>and&nbsp;<b>self-attention</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>attention </b>and&nbsp;<b>self-attention</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Attention </b>is a process that mimics <b>cognitive attention</b>, i.e. enhancing the important parts of the input data and fading out the rest.<br><br><b>Self-attention </b>uses an attention mechanism to transform a sequence of embeddings into another sequence of embeddings. For instance, below is an example of a <b>self-attention layer </b>which returns how much each word contributes to the representation of the word ""it"".<br><br><img src=""self-attention.png"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>embedding</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>embedding</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A <b>categorical feature </b>represented as a <b>continuous-valued feature</b>.<br><br>Typically, this is a translation of a high-dimensional vector into a low-dimensional space.&nbsp;<br><br>It is used a lot in language models (e.g. you can represent English words as a several-hundred <b>dense vector</b>&nbsp;in which each element holds a floating point value between 0 and 1).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	A typical CNN usually consists of some combination of the following layers:<br><ul><li><b><i>Convolutional layers</i></b>&nbsp;(apply a filter)</li><li><b><i>Pooling layers</i></b>&nbsp;(reduce dimensionality)</li><li><b><i>Dense layers</i></b>&nbsp;(all neurons connected to all others)</li></ul>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	A typical CNN usually consists of some combination of the following layers:<br><ul><li><b><i>Convolutional layers</i></b>&nbsp;(apply a filter)</li><li><b><i>Pooling layers</i></b>&nbsp;(reduce dimensionality)</li><li><b><i>Dense layers</i></b>&nbsp;(all neurons connected to all others)</li></ul>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>RNN</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>RNN</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>RNN = Recurrent Neural Network</b><br><br>This is intentionally run multiple times, where parts of each run feed into the next run. In this way, they can gradually understand and predict an entire sequence rather than just the meaning of individual words.<br><br><img src=""paste-18788d7159c179779035dad275ae772154c6f332.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>LSTM</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>LSTM</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>LSTM = Long Short Term Memory</b><br><br>These are a special kind of RNN, capable of learning long-term dependencies. They've broken records for language modelling and translation.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Define <b>machine learning</b>.<br><br>A program or system that <b><i>builds</i></b> (<b><i>trains</i></b>) a&nbsp;<b><i>predictive model</i></b>&nbsp;from <b><i>input data</i></b>. The system uses the learned model to make <b><i>useful&nbsp;predictions</i>&nbsp;</b>from <b><i>new data</i></b> drawn from the <b><i>same distribution</i></b> as the one used to train the model.&nbsp;<br><br>Machine learning also refers to the <b><i>field of study</i></b> concerned with these programs or systems.
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Define <b>machine learning</b>.<br><br>A program or system that <b><i>builds</i></b> (<b><i>trains</i></b>) a&nbsp;<b><i>predictive model</i></b>&nbsp;from <b><i>input data</i></b>. The system uses the learned model to make <b><i>useful&nbsp;predictions</i>&nbsp;</b>from <b><i>new data</i></b> drawn from the <b><i>same distribution</i></b> as the one used to train the model.&nbsp;<br><br>Machine learning also refers to the <b><i>field of study</i></b> concerned with these programs or systems.
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>MDP</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is an <b>MDP</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>MDP = Markov Decision Process</b><br><br>A decision-making model where actions are taken to navigate a series of steps, under the assumption that the <b>Markov property </b>holds (i.e. state transitions are determined entirely by information implicit in the current state and the agent's action). <br><br><b>Reinforcement learning</b> uses MDPs where the probabilities / rewards are unknown.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Define an <b>agent </b>in the context of RL.<br><br>Use the terms <b>state</b>, <b>policy</b>, and <b>expected return</b>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Define an <b>agent </b>in the context of RL.<br><br>Use the terms <b>state</b>, <b>policy</b>, and <b>expected return</b>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The entity that uses a&nbsp;<b>policy&nbsp;</b>to <b>maximize expected&nbsp;return&nbsp;</b>gained from <b>transitioning between&nbsp;states&nbsp;</b>of the&nbsp;environment.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<b>Q-function</b>&nbsp;= function that predicts the expected return from taking an <b><i>action</i></b> in a <b><i>state</i></b>, then following a given <b><i>policy</i></b><br><br><b>Q-learning</b>&nbsp;=&nbsp;algorithm that allows an agent to learn the optimal&nbsp;Q-function&nbsp;of an <b><i>MDP</i></b> by applying the&nbsp;<b><i>Bellman</i></b> equation. It is&nbsp;<b><i>model-free</i></b>, which means it doesn't require a model of the environment (e.g. the&nbsp;<i><b>transition probabilities</b><b>&nbsp;of the MDP</b></i>).&nbsp;<br><br><b style="""">DQN</b>&nbsp;=&nbsp;<b><i>Deep Q-Network</i></b>; a <b><i>neural network</i></b> that uses Q-learning
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<b>Q-function</b>&nbsp;= function that predicts the expected return from taking an <b><i>action</i></b> in a <b><i>state</i></b>, then following a given <b><i>policy</i></b><br><br><b>Q-learning</b>&nbsp;=&nbsp;algorithm that allows an agent to learn the optimal&nbsp;Q-function&nbsp;of an <b><i>MDP</i></b> by applying the&nbsp;<b><i>Bellman</i></b> equation. It is&nbsp;<b><i>model-free</i></b>, which means it doesn't require a model of the environment (e.g. the&nbsp;<i><b>transition probabilities</b><b>&nbsp;of the MDP</b></i>).&nbsp;<br><br><b style="""">DQN</b>&nbsp;=&nbsp;<b><i>Deep Q-Network</i></b>; a <b><i>neural network</i></b> that uses Q-learning
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>AlexNet</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>AlexNet</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A&nbsp;<b>CNN </b>created in <b>2012</b>, designed for image recognition. It won the <b>ImageNet Large Scale Visual Recognition Challenge</b>&nbsp;with an error rate 10.8% lower than the runner-up.<br><br>The paper published on it is considered&nbsp;one of the most influential papers published in computer vision, having spurred many more papers published employing CNNs and GPUs to accelerate deep learning.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the Bitter Lesson?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the Bitter Lesson?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The observation that, over the 70 year history of AI research, <b>general methods that leverage computation</b>&nbsp;are ultimately the most effective; in particular more effective than short-term improvements coming from <b>leveraging human-specific knowledge</b>.<br><br>The field of AI has been slow to recognise this in many domains (e.g. <b>chess</b>, <b>Go</b>, <b>computer vision</b>, <b>speech recognition</b>). The result of the human-knowledge approach has been to complicate matters, and make AI less suited to taking advantage of general methods.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>inverse reinforcement learning</b>? When was it introduced, and by whom?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>inverse reinforcement learning</b>? When was it introduced, and by whom?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Classic RL</b>: the goal is to learn a policy whichc maximises reward according to some predefined reward function.<br><br><b>Inverse reinforcement learning </b>(IRL): flips the problem; it tries to extract the reward function from the observed behavior of an agent. In other words, an agent can observe human behaviour and infer things about the human's values &amp; preferences.<br><br>It was introduced by Stuart Russell and Andrew Ng, in a 2000 paper.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this?<br><br><img src=""humanfeedbackjump.gif"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this?<br><br><img src=""humanfeedbackjump.gif"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is the so-called <b>backflipping noodle</b>, programmed by OpenAI and DeepMind.&nbsp;<br><br>It used <b>reward modelling&nbsp;</b>to learn to backflip from human preferences with only 900 bits of feedback. This is impressive because backflipping is a seemingly simple task which is easy to judge but challenging to specify.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between a <b>sigmoid neuron</b> and a <b>perceptron</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between a <b>sigmoid neuron</b> and a <b>perceptron</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Perceptron was the original design. It takes a weighted sum as input, and returns a step function.<br><br>Sigmoid is a modern improvement, with a smooth output. This means that incremental changes in the input will always lead to incremental changes in the output.<br><br><img src=""933e80c7f825a5340904dc06816872cdab32a08a494ecc35c61fdf397f06c6ac.jpg""><br><img src=""7ec7b6209ea8b07cb1a4b462ee6c1d4850283db6980a01c5b2d4340326f7ead0.jpg""><br><br>Note that in practice, most NNs today tend to use ReLU.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The image below shows weights and biases of a perceptron. Which logical function is it implementing, and what is the big-picture significance of this?<br><br><img src='f91d32ec3a52070c9da1bcffb12169abbdbce13d12a975cedd8e71e13540ac43.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The image below shows weights and biases of a perceptron. Which logical function is it implementing, and what is the big-picture significance of this?<br><br><img src='f91d32ec3a52070c9da1bcffb12169abbdbce13d12a975cedd8e71e13540ac43.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's implementing a NAND gate.<br>The big-picture significance is that NAND gates are <b>universal for computation</b>, i.e. we can build any computation by combining NAND gates.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between a <b>parameter</b> and a <b>hyperparameter</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between a <b>parameter</b> and a <b>hyperparameter</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A <b>hyperparameter</b> is a type of parameter whose value is used to control the learning process. In contrast, other parameters' values are derived via training.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the batch number in the following gradient descent processes:<br><ul><li>SGD</li><li>Batch gradient descent</li><li>Mini-batch gradient descent</li></ul>?<br>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the batch number in the following gradient descent processes:<br><ul><li>SGD</li><li>Batch gradient descent</li><li>Mini-batch gradient descent</li></ul>?<br>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li>SGD: <b>one</b> (or pure SGD has batch number one at any rate; SGD is sometimes used as a broader term)</li><li>Batch gradient descent: <b>same size as training set</b></li><li>Mini-batch gradient descent: <b>between one and size of training set</b></li></ul>Note that in practice, when we refer to SGD, it often means the mini-batch version.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(w\) is the matrix of neuron weights, \(b\) is the bias, and \(a\) and \(a'\) are the activations in the previous and current layers respectively, then what's the equation for calculating the activations in a forward-feeding network using sigmoid neurons?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If \(w\) is the matrix of neuron weights, \(b\) is the bias, and \(a\) and \(a'\) are the activations in the previous and current layers respectively, then what's the equation for calculating the activations in a forward-feeding network using sigmoid neurons?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	\[a' = \sigma(wa + b)\]<br>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between softmax and sigmoid? What is the interpretation of this?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between softmax and sigmoid? What is the interpretation of this?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They are different activation functions (i.e. they are applied to the weighted inputs \(z = w \cdot a + b\)).<br><br>The <b>softmax</b>&nbsp;function is given by:<br><br><img src=""be26836425dfb93469c7072a459712ab16cdf2314092a01829fdacd26692655c.jpg""><br><br>These all sum to 1, and the log of the ratio between two values becomes the ratio of their softmax value, so they can be naturally interpreted as a probability distribution.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the softmax function?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the softmax function?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Softmax function is a special case of the function below:<br>\[f(x_i) = \frac{\exp(x_i)}{1 + \sum_j \exp(x_j)}\]<br>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the context of neural networks, what is this the formula for?<br><br><img src=""20f835e73807f283d1ed1715fe5dca3f7de1100bc41a961695de35f04758d843.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the context of neural networks, what is this the formula for?<br><br><img src=""20f835e73807f283d1ed1715fe5dca3f7de1100bc41a961695de35f04758d843.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is the update rule for weights in some layer of a neural network, given \(l_1\)-regularisation, and a single sample.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Describe the <b>dropout</b> process for a neural network.
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Describe the <b>dropout</b> process for a neural network.
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Dropout is a type of <b>regularisation</b> method.<br><br>We ""drop out"" a random subset of the network's neurons, choosing each one with some probability \(p\). We then train the network (i.e. forward-propagating the inputs x, then backpropagating the results to get our update rules) using only this subset of neurons.<br><br>Since only a fraction of neurons will be active during training, the weights they learn will be larger, so we scale down all the weights before we finalise the network.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are three methods of <b>artificially expanding the training data</b> which can be used for neural networks performing handwriting recognition? What are two for voice recognition?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are three methods of <b>artificially expanding the training data</b> which can be used for neural networks performing handwriting recognition? What are two for voice recognition?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	For handwriting recognition:<br><ul><li><b>Rotating</b></li><li><b>Shearing</b></li><li><b>Elastic distortions</b> (designed to mimic random oscillations of hand muscles)</li></ul>For voice recognition:<br><ul><li>Altering <b>background noise</b></li><li><b>Speeding up / slowing down</b> the recording</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>learning rate schedule</b>, and what is the motivation behind it?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>learning rate schedule</b>, and what is the motivation behind it?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's a way to change the learning rate \(\eta\) during training.<br><br>One main motivation is that you might want it to be large at the start (because the weights are random and very far from any optima, so you want to make large movements), but smaller as training goes on, i.e. transitioning to making more fine-tuned adjustments.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>class relu_activation():<br>    """"""<br>    Computes ReLU and ReLU deriv, as an activation function<br>    """"""<br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def fn(z):<br>        return z * (<input maxlength=""6"" name=""z >= 0_56636762"" style=""width: 6ch;"">)<br><br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def deriv_fn(z):<br>        return (<input maxlength=""6"" name=""z >= 0_56636762"" style=""width: 6ch;"">).<input maxlength=""11"" name=""astype(int)_06216350"" style=""width: 11ch;""></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>class relu_activation():<br>    """"""<br>    Computes ReLU and ReLU deriv, as an activation function<br>    """"""<br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def fn(z):<br>        return z * (<input maxlength=""6"" name=""z >= 0_56636762"" style=""width: 6ch;"">)<br><br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def deriv_fn(z):<br>        return (<input maxlength=""6"" name=""z >= 0_56636762"" style=""width: 6ch;"">).<input maxlength=""11"" name=""astype(int)_06216350"" style=""width: 11ch;""></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>class sigmoid_activation():<br>    """"""<br>    Computes sigmoid and sigmoid deriv, as an activation function<br>    """"""<br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def fn(z):<br>        return 1 / (1 + <input maxlength=""10"" name=""np.exp(-z)_67603595"" style=""width: 10ch;"">)<br><br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def deriv_fn(z):<br>        σ = 1 / (1 + <input maxlength=""10"" name=""np.exp(-z)_67603595"" style=""width: 10ch;"">)<br>        return <input maxlength=""11"" name=""σ * (1 - σ)_76955196"" style=""width: 11ch;""></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>class sigmoid_activation():<br>    """"""<br>    Computes sigmoid and sigmoid deriv, as an activation function<br>    """"""<br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def fn(z):<br>        return 1 / (1 + <input maxlength=""10"" name=""np.exp(-z)_67603595"" style=""width: 10ch;"">)<br><br>    @<input maxlength=""12"" name=""staticmethod_31116838"" style=""width: 12ch;""><br>    def deriv_fn(z):<br>        σ = 1 / (1 + <input maxlength=""10"" name=""np.exp(-z)_67603595"" style=""width: 10ch;"">)<br>        return <input maxlength=""11"" name=""σ * (1 - σ)_76955196"" style=""width: 11ch;""></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a class method to initialise weights. Implement the Xavier method.<br><br><div class='exerciseprecontainer'><pre>def weight_initializer(self, mode):<br><br>    self.weights = [np.random.uniform(-1, 1, size=(<input maxlength='4' name='y, x_97975811' style='width: 4ch;'>)) <input maxlength='12' name='/ np.sqrt(x)_66467967' style='width: 12ch;'> for x, y in zip(self.sizes, self.sizes[1:])]</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a class method to initialise weights. Implement the Xavier method.<br><br><div class='exerciseprecontainer'><pre>def weight_initializer(self, mode):<br><br>    self.weights = [np.random.uniform(-1, 1, size=(<input maxlength='4' name='y, x_97975811' style='width: 4ch;'>)) <input maxlength='12' name='/ np.sqrt(x)_66467967' style='width: 12ch;'> for x, y in zip(self.sizes, self.sizes[1:])]</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is a chunk of code from a very basic backpropagation algorithm found in the <b>Neural Networks and Deep Learning</b> online textbook. It updates based on a single x sample. Fill the code in, using the four fundamental equations of backpropagation.<br><br><div class=""exerciseprecontainer""><pre>def backprop(self, x, y):<br><br>    dC_db = [np.zeros(b.shape) for b in self.biases]<br>    dC_dw = [np.zeros(w.shape) for w in self.weights]<br>    a = x<br>    a_list = [x]<br>    z_list = []<br><br>    for b, w in zip(self.biases, self.weights):<br>        z = np.einsum(""ij,j-&gt;i"", w, a) + b<br>        z_list.append(z)<br>        a = σ(z)<br>        a_list.append(a)<br><br>    δ = (<input maxlength=""1"" name=""a_61954009"" style=""width: 1ch;""> - y) * <input maxlength=""10"" name=""σ_prime(z)_48202992"" style=""width: 10ch;""><br>    dC_db[-1] = δ<br>    dC_dw[-1] = np.einsum(""i,j-&gt;ij"", <input maxlength=""1"" name=""δ_73082276"" style=""width: 1ch;"">, a_list[-2])<br><br>    for l in range(2, self.num_layers):<br><br>        z = z_list[-l]<br>        w = self.weights[-l+1]<br>        a = a_list[-l-1]<br><br>        δ = np.einsum(""ij,i-&gt;j"", <input maxlength=""4"" name=""w, δ_07880550"" style=""width: 4ch;"">) * <input maxlength=""10"" name=""σ_prime(z)_57602475"" style=""width: 10ch;""><br>        dC_db[-l] = δ<br>        dC_dw[-l] = np.einsum(""i,j-&gt;ij"", δ, a)<br><br>    return (dC_db, dC_dw)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is a chunk of code from a very basic backpropagation algorithm found in the <b>Neural Networks and Deep Learning</b> online textbook. It updates based on a single x sample. Fill the code in, using the four fundamental equations of backpropagation.<br><br><div class=""exerciseprecontainer""><pre>def backprop(self, x, y):<br><br>    dC_db = [np.zeros(b.shape) for b in self.biases]<br>    dC_dw = [np.zeros(w.shape) for w in self.weights]<br>    a = x<br>    a_list = [x]<br>    z_list = []<br><br>    for b, w in zip(self.biases, self.weights):<br>        z = np.einsum(""ij,j-&gt;i"", w, a) + b<br>        z_list.append(z)<br>        a = σ(z)<br>        a_list.append(a)<br><br>    δ = (<input maxlength=""1"" name=""a_61954009"" style=""width: 1ch;""> - y) * <input maxlength=""10"" name=""σ_prime(z)_48202992"" style=""width: 10ch;""><br>    dC_db[-1] = δ<br>    dC_dw[-1] = np.einsum(""i,j-&gt;ij"", <input maxlength=""1"" name=""δ_73082276"" style=""width: 1ch;"">, a_list[-2])<br><br>    for l in range(2, self.num_layers):<br><br>        z = z_list[-l]<br>        w = self.weights[-l+1]<br>        a = a_list[-l-1]<br><br>        δ = np.einsum(""ij,i-&gt;j"", <input maxlength=""4"" name=""w, δ_07880550"" style=""width: 4ch;"">) * <input maxlength=""10"" name=""σ_prime(z)_57602475"" style=""width: 10ch;""><br>        dC_db[-l] = δ<br>        dC_dw[-l] = np.einsum(""i,j-&gt;ij"", δ, a)<br><br>    return (dC_db, dC_dw)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is a chunk of code from a very basic backpropagation algorithm found in the <b>Neural Networks and Deep Learning</b> online textbook. It updates based on a single x sample. Fill the code in, using the four fundamental equations of backpropagation.<br><br><div class=""exerciseprecontainer""><pre>def backprop(self, x, y):<br><br>    dC_db = [np.zeros(b.shape) for b in self.biases]<br>    dC_dw = [np.zeros(w.shape) for w in self.weights]<br>    a = x<br>    a_list = [x]<br>    z_list = []<br><br>    for b, w in zip(self.biases, self.weights):<br>        z = np.einsum(""ij,j-&gt;i"", w, a) + b<br>        z_list.append(z)<br>        a = σ(z)<br>        a_list.append(a)<br><br>    δ = (a_list[-1] - <input maxlength=""1"" name=""y_29476314"" style=""width: 1ch;"">) * σ_prime(z_list[-1])<br>    dC_db[-1] = δ<br>    dC_dw[-1] = np.einsum(""i,j-&gt;ij"", <input maxlength=""13"" name=""δ, a_list[-2]_23579089"" style=""width: 13ch;"">)<br><br>    for l in range(2, self.num_layers):<br><br>        z = z_list[<input maxlength=""2"" name=""-l_58454754"" style=""width: 2ch;"">]<br>        w = self.weights[<input maxlength=""4"" name=""-l+1_91210947"" style=""width: 4ch;"">]<br>        a = a_list[<input maxlength=""4"" name=""-l-1_55655191"" style=""width: 4ch;"">]<br>        δ = np.einsum(""ij,i-&gt;j"", w, δ) * σ_prime(z)<br>        dC_db[-l] = δ<br>        dC_dw[-l] = np.einsum(""i,j-&gt;ij"", <input maxlength=""4"" name=""δ, a_62783815"" style=""width: 4ch;"">)<br><br>    return (dC_db, dC_dw)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is a chunk of code from a very basic backpropagation algorithm found in the <b>Neural Networks and Deep Learning</b> online textbook. It updates based on a single x sample. Fill the code in, using the four fundamental equations of backpropagation.<br><br><div class=""exerciseprecontainer""><pre>def backprop(self, x, y):<br><br>    dC_db = [np.zeros(b.shape) for b in self.biases]<br>    dC_dw = [np.zeros(w.shape) for w in self.weights]<br>    a = x<br>    a_list = [x]<br>    z_list = []<br><br>    for b, w in zip(self.biases, self.weights):<br>        z = np.einsum(""ij,j-&gt;i"", w, a) + b<br>        z_list.append(z)<br>        a = σ(z)<br>        a_list.append(a)<br><br>    δ = (a_list[-1] - <input maxlength=""1"" name=""y_29476314"" style=""width: 1ch;"">) * σ_prime(z_list[-1])<br>    dC_db[-1] = δ<br>    dC_dw[-1] = np.einsum(""i,j-&gt;ij"", <input maxlength=""13"" name=""δ, a_list[-2]_23579089"" style=""width: 13ch;"">)<br><br>    for l in range(2, self.num_layers):<br><br>        z = z_list[<input maxlength=""2"" name=""-l_58454754"" style=""width: 2ch;"">]<br>        w = self.weights[<input maxlength=""4"" name=""-l+1_91210947"" style=""width: 4ch;"">]<br>        a = a_list[<input maxlength=""4"" name=""-l-1_55655191"" style=""width: 4ch;"">]<br>        δ = np.einsum(""ij,i-&gt;j"", w, δ) * σ_prime(z)<br>        dC_db[-l] = δ<br>        dC_dw[-l] = np.einsum(""i,j-&gt;ij"", <input maxlength=""4"" name=""δ, a_62783815"" style=""width: 4ch;"">)<br><br>    return (dC_db, dC_dw)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is a chunk of code from a very basic backpropagation algorithm found in the <b>Neural Networks and Deep Learning</b> online textbook. It updates based on a single x sample. Fill the code in, using the four fundamental equations of backpropagation.<br><br><div class=""exerciseprecontainer""><pre>def backprop(self, x, y):<br><br>    dC_db = [np.zeros(b.shape) for b in self.biases]<br>    dC_dw = [np.zeros(w.shape) for w in self.weights]<br>    a = x<br>    a_list = [x]<br>    z_list = []<br><br>    for b, w in zip(self.biases, self.weights):<br>        z = np.einsum(""<input maxlength=""7"" name=""ij,j->i_19380137"" style=""width: 7ch;"">"", w, a) + b<br>        z_list.append(z)<br>        a = σ(z)<br>        a_list.append(a)<br><br>    δ = (a_list[-1] - y) * σ_prime(z_list[-1])<br>    dC_db[-1] = δ<br>    dC_dw[-1] = np.einsum(""<input maxlength=""7"" name=""i,j->ij_03251246"" style=""width: 7ch;"">"", δ, a_list[-2])<br><br>    for l in range(2, self.num_layers):<br><br>        z = z_list[-l]<br>        w = self.weights[-l+1]<br>        a = a_list[-l-1]<br><br>        δ = np.einsum(""<input maxlength=""7"" name=""ij,i->j_81001729"" style=""width: 7ch;"">"", w, δ) * σ_prime(z)<br>        dC_db[-l] = δ<br>        dC_dw[-l] = np.einsum(""<input maxlength=""7"" name=""i,j->ij_03251246"" style=""width: 7ch;"">"", δ, a)<br><br>    return (dC_db, dC_dw)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is a chunk of code from a very basic backpropagation algorithm found in the <b>Neural Networks and Deep Learning</b> online textbook. It updates based on a single x sample. Fill the code in, using the four fundamental equations of backpropagation.<br><br><div class=""exerciseprecontainer""><pre>def backprop(self, x, y):<br><br>    dC_db = [np.zeros(b.shape) for b in self.biases]<br>    dC_dw = [np.zeros(w.shape) for w in self.weights]<br>    a = x<br>    a_list = [x]<br>    z_list = []<br><br>    for b, w in zip(self.biases, self.weights):<br>        z = np.einsum(""<input maxlength=""7"" name=""ij,j->i_19380137"" style=""width: 7ch;"">"", w, a) + b<br>        z_list.append(z)<br>        a = σ(z)<br>        a_list.append(a)<br><br>    δ = (a_list[-1] - y) * σ_prime(z_list[-1])<br>    dC_db[-1] = δ<br>    dC_dw[-1] = np.einsum(""<input maxlength=""7"" name=""i,j->ij_03251246"" style=""width: 7ch;"">"", δ, a_list[-2])<br><br>    for l in range(2, self.num_layers):<br><br>        z = z_list[-l]<br>        w = self.weights[-l+1]<br>        a = a_list[-l-1]<br><br>        δ = np.einsum(""<input maxlength=""7"" name=""ij,i->j_81001729"" style=""width: 7ch;"">"", w, δ) * σ_prime(z)<br>        dC_db[-l] = δ<br>        dC_dw[-l] = np.einsum(""<input maxlength=""7"" name=""i,j->ij_03251246"" style=""width: 7ch;"">"", δ, a)<br><br>    return (dC_db, dC_dw)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'>The universality construction we've developed uses just two hidden layers to compute an arbitrary function. Furthermore, as we've discussed, it's possible to get the same result with just a single hidden layer. Given this, you might wonder why we would ever be interested in deep networks, i.e., networks with many hidden layers. Can't we simply replace those networks with shallow, single hidden layer networks?<br><br>While in principle that's possible, there are good practical reasons to use deep networks. As argued in Chapter 1, deep networks have a <i>hierarchical</i> structure which makes them particularly well adapted to learn the <i>hierarchies of knowledge</i> that seem to be useful in solving real-world problems. Put more concretely, when attacking problems such as image recognition, it helps to use a system that understands not just individual pixels, but also increasingly more complex concepts: from edges to simple geometric shapes, all the way up through complex, multi-object scenes. In later chapters, we'll see evidence suggesting that deep networks do a better job than shallow networks at learning such <i>hierarchies of knowledge</i>.<br><br>To sum up: <i>universality</i> tells us that neural networks can compute any function; and <i>empirical</i> evidence suggests that deep networks are the networks best adapted to learn the functions useful in solving many real-world problems.<div class='q-desc q-desc-1'>Michael Nielsen</div><div class='q-desc q-desc-2'>Neural Networks and Deep Learning</div></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'>The universality construction we've developed uses just two hidden layers to compute an arbitrary function. Furthermore, as we've discussed, it's possible to get the same result with just a single hidden layer. Given this, you might wonder why we would ever be interested in deep networks, i.e., networks with many hidden layers. Can't we simply replace those networks with shallow, single hidden layer networks?<br><br>While in principle that's possible, there are good practical reasons to use deep networks. As argued in Chapter 1, deep networks have a <i>hierarchical</i> structure which makes them particularly well adapted to learn the <i>hierarchies of knowledge</i> that seem to be useful in solving real-world problems. Put more concretely, when attacking problems such as image recognition, it helps to use a system that understands not just individual pixels, but also increasingly more complex concepts: from edges to simple geometric shapes, all the way up through complex, multi-object scenes. In later chapters, we'll see evidence suggesting that deep networks do a better job than shallow networks at learning such <i>hierarchies of knowledge</i>.<br><br>To sum up: <i>universality</i> tells us that neural networks can compute any function; and <i>empirical</i> evidence suggests that deep networks are the networks best adapted to learn the functions useful in solving many real-world problems.<div class='q-desc q-desc-1'>Michael Nielsen</div><div class='q-desc q-desc-2'>Neural Networks and Deep Learning</div></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the Xavier method, and what are the motivations behind it?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the Xavier method, and what are the motivations behind it?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The Xavier method is a method of neural network weight initialisations. It sets weights \(W_{ij}\) as follows:<br><br><img src=""193e90808578f17bf288a85f41747d1b6402ad106e1746163a306b7d55360df3.jpg""><br><br>where \(n\) is the number of neurons in the previous layer.<br><br>This fulfills the two properties we would want any initialisation method to have:<ul><li>Expected value of neuron activations is zero</li><li>Variance of neuron activations is the same between layers</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>universal approximation theorem</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>universal approximation theorem</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It tells us that NNs are <b>universal</b>, in the sense that an NN with activation function satisfying certain properties can arbitrarily accurately approximate any function \(f(x)\).<br><br>The classical form of this is the <b>arbitrary-width case</b>, where all you need is a NN with a single hidden layer, and you can get it to approximate any function by adding enough neurons to this hidden layer.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>vanishing gradient problem</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <b>vanishing gradient problem</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The vanishing gradient problem is encountered when training NNs with gradient-based learning methods and backpropagation. In such methods, during each iteration of training, each of the NN's weights receives an update proportional to the partial derivative of the error function with respect to the current weight. The problem is that in some cases, the gradient will be vanishingly small, effectively preventing the weight from changing its value. In the worst case, this may completely stop the neural network from further training.<br><br>In particular, this can be a problem with activation functions like <b>hyperbolic tan</b> or <b>sigmoid</b>, because the early layers will learn much slower than the later layers (we're essentially multiplying together many different small derivatives).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the three basic ideas of CNNs, as described in the book <b>Neural Networks and Deep Learning</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the three basic ideas of CNNs, as described in the book <b>Neural Networks and Deep Learning</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li><b>Local receptive fields</b> (i.e. using kernels which are only dependent on local features)</li><li><b>Shared weights</b> (i.e. the kernel is translation invariant - it has the same weight across the whole image)</li><li><b>Pooling</b> (i.e. taking the output of a convolutional layer and simplifying it, e.g. by taking maximum across a 2x2 matrix)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>kernel</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>kernel</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A filter that is used to extract features from images.<br><br>Mathematically, it's a matrix that moves over the input data, performs dot product with the sub-region of input data, and gets the output as a matrix of dot products.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Describe the processes that are taking place in these steps of a CNN.<br><br><img src=""2ec57eaff49d4bff4d90e19b61e8a875785fbe8e410bd1eb0cfb95049bb05567.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Describe the processes that are taking place in these steps of a CNN.<br><br><img src=""2ec57eaff49d4bff4d90e19b61e8a875785fbe8e410bd1eb0cfb95049bb05567.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first step is <b>convolutional</b>, using three different 5x5 <b>kernels</b>.<br><br>The second step is <b>pooling</b>, e.g. it could be <b>max-pooling</b> where we take the maximum value in each 2x2 grid. Other options are <b>l2-pooling</b> or <b>average pooling</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the three types of layers in CNNs?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the three types of layers in CNNs?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li>Convolutional layers</li><li>Pooling layers</li><li>Fully connected layers</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the learning rule for weights under \(l_2\)-regularisation, where:<ul><li>\(\eta\) is the learning rate</li><li>\(\lambda\) is the regularisation parameter</li><li>\(n\) is the number of samples in the training set</li><li>\(m\) is the number of samples in the mini batch that we're training on</li><li>\(C_x\) is the cost function for each input \(x\) in the mini batch</li></ul>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the learning rule for weights under \(l_2\)-regularisation, where:<ul><li>\(\eta\) is the learning rate</li><li>\(\lambda\) is the regularisation parameter</li><li>\(n\) is the number of samples in the training set</li><li>\(m\) is the number of samples in the mini batch that we're training on</li><li>\(C_x\) is the cost function for each input \(x\) in the mini batch</li></ul>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src='16a4e350e22e523bd70f333b69bf72c0c342cf39ba66d06f7faaab3a9421af4e.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>GPGPU</b>, and when did it start?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>GPGPU</b>, and when did it start?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This stands for <b>general purpose GPU</b>.<br><br>Originally, GPUs required users to understand specialised languages, e.g. <b>OpenGL</b>. This was impractical, and presented a barrier to use.<br><br>But in 2007, with the launch of the <b>NVIDIA CUDA</b> framework, this barrier was broken, providing wider access to GPU resources. After this, several DL frameworks were developed around CUDA, such as <b>PyTorch</b> and <b>TensorFlow</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between the cores of a GPU and a CPU?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between the cores of a GPU and a CPU?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li>A CPU is divided into multiple cores (usually between 2 and 18), so they can take on multiple tasks at the same time</li><li>A GPU has hundreds of thousands of cores, all of which are dedicated towards a single task</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two main companies that sell GPUs, and which one is dominant for deep learning?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two main companies that sell GPUs, and which one is dominant for deep learning?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>AMD</b> and <b>NVIDIA</b>. NVIDIA is dominant for deep learning; they've been the pioneer for a long time (e.g. CUDA in 2007).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>CUDA</b>, and what was its significance in the history of deep learning?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>CUDA</b>, and what was its significance in the history of deep learning?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>CUDA</b> stands for <b>Compute Unified Device Architecture</b>. It's an API that allows software to access certain types of GPU for general purpose computing (an approach called <b>GPGPU</b>).<br><br>It's designed to work with programming languages like C, C++ and Fortran (unlike prior APIs like <b>OpenGL</b>, which required advanced skills in graphics programming).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	There are three slices in the middle image below; what are they called? And what are the two stages in this image called?<br><br><img src='e848b168406da9c6696820aa166800dbb2f227f0b9cfdd450689e4cbb857ed9a.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	There are three slices in the middle image below; what are they called? And what are the two stages in this image called?<br><br><img src='e848b168406da9c6696820aa166800dbb2f227f0b9cfdd450689e4cbb857ed9a.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They are called <b>feature maps</b>. The stages shown here are <b>convolution</b> and <b>pooling</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the key benefit of GPUs over CPUs for deep learning?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the key benefit of GPUs over CPUs for deep learning?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	GPUs are well-suited to parallelisation, whereas CPUs are often more suited to serialisation.<br><br>Many DL tasks require parallelisation, because computations like convolution are executed in the same way across the array, and the calculations don't rely on each others output so they can all be done at once.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; np.<input maxlength='4' name='full_16581069' style='width: 4ch;'>(<input maxlength='6' name='(3, 2)_57311327' style='width: 6ch;'>, 1.5)<br>array([[1.5, 1.5],<br>       [1.5, 1.5],<br>       [1.5, 1.5]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; np.<input maxlength='4' name='full_16581069' style='width: 4ch;'>(<input maxlength='6' name='(3, 2)_57311327' style='width: 6ch;'>, 1.5)<br>array([[1.5, 1.5],<br>       [1.5, 1.5],<br>       [1.5, 1.5]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre>&gt;&gt;&gt; f""CUDA is available: {torch.<input maxlength=""4"" name=""cuda_57088350"" style=""width: 4ch;"">.<input maxlength=""12"" name=""is_available_95072106"" style=""width: 12ch;"">()}""
'CUDA is available: True'
&gt;&gt;&gt; f""Device name is {torch.<input maxlength=""4"" name=""cuda_29864123"" style=""width: 4ch;"">.<input maxlength=""15"" name=""get_device_name_74420209"" style=""width: 15ch;"">()}""
'Device name is NVIDIA GeForce RTX 3050 Laptop GPU'</pre>
</div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre>&gt;&gt;&gt; f""CUDA is available: {torch.<input maxlength=""4"" name=""cuda_57088350"" style=""width: 4ch;"">.<input maxlength=""12"" name=""is_available_95072106"" style=""width: 12ch;"">()}""
'CUDA is available: True'
&gt;&gt;&gt; f""Device name is {torch.<input maxlength=""4"" name=""cuda_29864123"" style=""width: 4ch;"">.<input maxlength=""15"" name=""get_device_name_74420209"" style=""width: 15ch;"">()}""
'Device name is NVIDIA GeForce RTX 3050 Laptop GPU'</pre>
</div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Move the object <font color='#ff5500'>tensor</font> to the GPU, if it's available.<br><br><div class='exerciseprecontainer'><pre>if torch.<input maxlength='4' name='cuda_59834153' style='width: 4ch;'>.<input maxlength='12' name='is_available_52957226' style='width: 12ch;'>():<br>    tensor = tensor.<input maxlength='2' name='to_54276012' style='width: 2ch;'>(<input maxlength='6' name='""cuda""_92767606' style='width: 6ch;'>)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Move the object <font color='#ff5500'>tensor</font> to the GPU, if it's available.<br><br><div class='exerciseprecontainer'><pre>if torch.<input maxlength='4' name='cuda_59834153' style='width: 4ch;'>.<input maxlength='12' name='is_available_52957226' style='width: 12ch;'>():<br>    tensor = tensor.<input maxlength='2' name='to_54276012' style='width: 2ch;'>(<input maxlength='6' name='""cuda""_92767606' style='width: 6ch;'>)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; np_array = np.array([[1, 2], [3, 4]])<br><br>&gt;&gt;&gt; x_np = torch.<input maxlength='10' name='from_numpy_54759170' style='width: 10ch;'>(np_array)<br><br>&gt;&gt;&gt; x_np<br>tensor([[1, 2],<br>        [3, 4]], dtype=torch.int32)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; np_array = np.array([[1, 2], [3, 4]])<br><br>&gt;&gt;&gt; x_np = torch.<input maxlength='10' name='from_numpy_54759170' style='width: 10ch;'>(np_array)<br><br>&gt;&gt;&gt; x_np<br>tensor([[1, 2],<br>        [3, 4]], dtype=torch.int32)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>shape = (2, 3)<br>a_tensor = torch.<input maxlength=""4"" name=""rand_53779633"" style=""width: 4ch;"">(shape)<br>b_tensor = torch.<input maxlength=""4"" name=""ones_66323645"" style=""width: 4ch;"">(shape)<br>c_tensor = torch.<input maxlength=""5"" name=""zeros_75496113"" style=""width: 5ch;"">(shape)<br><br>print(f""Random Tensor: \n {a_tensor} \n"")<br>print(f""Ones Tensor: \n {b_tensor} \n"")<br>print(f""Zeros Tensor: \n {c_tensor}"")</pre></div><br><img src=""d1887ac49d15e75d4c5fd64ef43bc8c245f40d8c8404c9911797ff6b0268ba87.jpg"">
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>shape = (2, 3)<br>a_tensor = torch.<input maxlength=""4"" name=""rand_53779633"" style=""width: 4ch;"">(shape)<br>b_tensor = torch.<input maxlength=""4"" name=""ones_66323645"" style=""width: 4ch;"">(shape)<br>c_tensor = torch.<input maxlength=""5"" name=""zeros_75496113"" style=""width: 5ch;"">(shape)<br><br>print(f""Random Tensor: \n {a_tensor} \n"")<br>print(f""Ones Tensor: \n {b_tensor} \n"")<br>print(f""Zeros Tensor: \n {c_tensor}"")</pre></div><br><img src=""d1887ac49d15e75d4c5fd64ef43bc8c245f40d8c8404c9911797ff6b0268ba87.jpg"">
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; tensor = torch.rand(3, 4)<br><br>&gt;&gt;&gt; tensor.<input maxlength=""5"" name=""shape_02424090"" style=""width: 5ch;""><br>torch.Size([3, 4])<br><br>&gt;&gt;&gt; tensor.<input maxlength=""5"" name=""dtype_99509760"" style=""width: 5ch;""><br>torch.float32<br><br>&gt;&gt;&gt; tensor.<input maxlength=""6"" name=""device_60031739"" style=""width: 6ch;""><br>cpu<br><br>&gt;&gt;&gt; tensor.<input maxlength=""7"" name=""numel()_20033143"" style=""width: 7ch;""><br>12</pre></div>
	<br>

	
		<br>
		<div id=""hint"" class=""hidden"">
			<p class=""trigger"">[ click to show hint ]</p>
			<p class=""payload"">last one starts with <font color=""#ff5500"">num</font></p>
		</div>
	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; tensor = torch.rand(3, 4)<br><br>&gt;&gt;&gt; tensor.<input maxlength=""5"" name=""shape_02424090"" style=""width: 5ch;""><br>torch.Size([3, 4])<br><br>&gt;&gt;&gt; tensor.<input maxlength=""5"" name=""dtype_99509760"" style=""width: 5ch;""><br>torch.float32<br><br>&gt;&gt;&gt; tensor.<input maxlength=""6"" name=""device_60031739"" style=""width: 6ch;""><br>cpu<br><br>&gt;&gt;&gt; tensor.<input maxlength=""7"" name=""numel()_20033143"" style=""width: 7ch;""><br>12</pre></div>
	<br>

	
		<br>
		<div id=""hint"" class=""shown"">
			<p class=""payload"">last one starts with <font color=""#ff5500"">num</font></p>
		</div>
	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; y = torch.tensor(3, dtype=torch.int64)<br>&gt;&gt;&gt; z = torch.zeros(10, dtype=torch.float)<br><br>&gt;&gt;&gt; z.scatter_(<input maxlength=""3"" name=""dim_23443335"" style=""width: 3ch;"">=0, <input maxlength=""5"" name=""index_34941174"" style=""width: 5ch;"">=y, <input maxlength=""5"" name=""value_60188323"" style=""width: 5ch;"">=1)<br>tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; y = torch.tensor(3, dtype=torch.int64)<br>&gt;&gt;&gt; z = torch.zeros(10, dtype=torch.float)<br><br>&gt;&gt;&gt; z.scatter_(<input maxlength=""3"" name=""dim_23443335"" style=""width: 3ch;"">=0, <input maxlength=""5"" name=""index_34941174"" style=""width: 5ch;"">=y, <input maxlength=""5"" name=""value_60188323"" style=""width: 5ch;"">=1)<br>tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Load a training dataset with minibatch number 64, which randomly permutes after each epoch.<br><br><div class=""exerciseprecontainer""><pre>from torch.utils.<input maxlength=""4"" name=""data_42851083"" style=""width: 4ch;""> import Dataset, <input maxlength=""10"" name=""DataLoader_12554839"" style=""width: 10ch;""><br><br>train_data_loaded = <input maxlength=""10"" name=""DataLoader_12554839"" style=""width: 10ch;"">(training_data, <input maxlength=""10"" name=""batch_size_56973906"" style=""width: 10ch;"">=64, <input maxlength=""7"" name=""shuffle_24110389"" style=""width: 7ch;"">=True)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Load a training dataset with minibatch number 64, which randomly permutes after each epoch.<br><br><div class=""exerciseprecontainer""><pre>from torch.utils.<input maxlength=""4"" name=""data_42851083"" style=""width: 4ch;""> import Dataset, <input maxlength=""10"" name=""DataLoader_12554839"" style=""width: 10ch;""><br><br>train_data_loaded = <input maxlength=""10"" name=""DataLoader_12554839"" style=""width: 10ch;"">(training_data, <input maxlength=""10"" name=""batch_size_56973906"" style=""width: 10ch;"">=64, <input maxlength=""7"" name=""shuffle_24110389"" style=""width: 7ch;"">=True)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; torch.zeros(10, dtype=torch.float).<input maxlength='8' name='scatter__18881385' style='width: 8ch;'>(0, <input maxlength='12' name='torch.tensor_74075765' style='width: 12ch;'>(3), value=1)<br>tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; torch.zeros(10, dtype=torch.float).<input maxlength='8' name='scatter__18881385' style='width: 8ch;'>(0, <input maxlength='12' name='torch.tensor_74075765' style='width: 12ch;'>(3), value=1)<br>tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create training data, and a dataloader. Print out some of its attributes.<br><br><img src='5edfd4098f2c0e0fc61cf8923524b6ec612d34be141e8c216101bd252856aff1.jpg'><br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; train_dataloader = <input maxlength='10' name='DataLoader_12554839' style='width: 10ch;'>(training_data, <input maxlength='5' name='batch_79944622' style='width: 5ch;'>_size=60)<br><br>&gt;&gt;&gt; len(training_data)<br>60000<br><br>&gt;&gt;&gt; len(train_dataloader.<input maxlength='7' name='dataset_92821086' style='width: 7ch;'>)<br>60000<br><br>&gt;&gt;&gt; train_dataloader.<input maxlength='5' name='batch_79944622' style='width: 5ch;'>_size<br>60<br><br>&gt;&gt;&gt; len(<input maxlength='16' name='train_dataloader_31989084' style='width: 16ch;'>)<br>1000</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create training data, and a dataloader. Print out some of its attributes.<br><br><img src='5edfd4098f2c0e0fc61cf8923524b6ec612d34be141e8c216101bd252856aff1.jpg'><br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; train_dataloader = <input maxlength='10' name='DataLoader_12554839' style='width: 10ch;'>(training_data, <input maxlength='5' name='batch_79944622' style='width: 5ch;'>_size=60)<br><br>&gt;&gt;&gt; len(training_data)<br>60000<br><br>&gt;&gt;&gt; len(train_dataloader.<input maxlength='7' name='dataset_92821086' style='width: 7ch;'>)<br>60000<br><br>&gt;&gt;&gt; train_dataloader.<input maxlength='5' name='batch_79944622' style='width: 5ch;'>_size<br>60<br><br>&gt;&gt;&gt; len(<input maxlength='16' name='train_dataloader_31989084' style='width: 16ch;'>)<br>1000</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise a neural network with the following characteristics:<ul><li>Flattening the data (from a 28x28 pixel 2D image) before inputting it to the first layer</li><li>Using two fully connected ReLU layers (both with 512 nodes)</li><li>Finishing with a linear transformation (which we will apply softmax to when calculating the cost, although that's not included here)</li></ul><div class=""exerciseprecontainer""><pre>from torch import nn<br><br>class NeuralNetwork(nn.Module):<br>    def __init__(self):<br>        super(NeuralNetwork, self).__init__()<br>        self.flatten = <input maxlength=""12"" name=""nn.Flatten()_41635376"" style=""width: 12ch;""><br>        self.linear_relu_stack = <input maxlength=""13"" name=""nn.Sequential_39518857"" style=""width: 13ch;"">(<br>            <input maxlength=""9"" name=""nn.Linear_50182055"" style=""width: 9ch;"">(28*28, 512),<br>            <input maxlength=""9"" name=""nn.ReLU()_22172729"" style=""width: 9ch;"">,<br>            <input maxlength=""9"" name=""nn.Linear_50182055"" style=""width: 9ch;"">(512, 512),<br>            <input maxlength=""9"" name=""nn.ReLU()_22172729"" style=""width: 9ch;"">,<br>            <input maxlength=""9"" name=""nn.Linear_50182055"" style=""width: 9ch;"">(512, 10),<br>        )<br><br>    def forward(self, x):<br>        x = <input maxlength=""15"" name=""self.flatten(x)_54627840"" style=""width: 15ch;""><br>        logits = self.linear_relu_stack(x)<br>        return logits</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise a neural network with the following characteristics:<ul><li>Flattening the data (from a 28x28 pixel 2D image) before inputting it to the first layer</li><li>Using two fully connected ReLU layers (both with 512 nodes)</li><li>Finishing with a linear transformation (which we will apply softmax to when calculating the cost, although that's not included here)</li></ul><div class=""exerciseprecontainer""><pre>from torch import nn<br><br>class NeuralNetwork(nn.Module):<br>    def __init__(self):<br>        super(NeuralNetwork, self).__init__()<br>        self.flatten = <input maxlength=""12"" name=""nn.Flatten()_41635376"" style=""width: 12ch;""><br>        self.linear_relu_stack = <input maxlength=""13"" name=""nn.Sequential_39518857"" style=""width: 13ch;"">(<br>            <input maxlength=""9"" name=""nn.Linear_50182055"" style=""width: 9ch;"">(28*28, 512),<br>            <input maxlength=""9"" name=""nn.ReLU()_22172729"" style=""width: 9ch;"">,<br>            <input maxlength=""9"" name=""nn.Linear_50182055"" style=""width: 9ch;"">(512, 512),<br>            <input maxlength=""9"" name=""nn.ReLU()_22172729"" style=""width: 9ch;"">,<br>            <input maxlength=""9"" name=""nn.Linear_50182055"" style=""width: 9ch;"">(512, 10),<br>        )<br><br>    def forward(self, x):<br>        x = <input maxlength=""15"" name=""self.flatten(x)_54627840"" style=""width: 15ch;""><br>        logits = self.linear_relu_stack(x)<br>        return logits</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; t = torch.arange(-5, 5)<br><br>&gt;&gt;&gt; <input maxlength='9' name='nn.ReLU()_22172729' style='width: 9ch;'>(t)<br>tensor([0, 0, 0, 0, 0, 0, 1, 2, 3, 4])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; t = torch.arange(-5, 5)<br><br>&gt;&gt;&gt; <input maxlength='9' name='nn.ReLU()_22172729' style='width: 9ch;'>(t)<br>tensor([0, 0, 0, 0, 0, 0, 1, 2, 3, 4])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code at the end: get a prediction from a randomly-generated simulated MNIST input.<br><br><div class=""exerciseprecontainer""><pre>class NeuralNetwork(nn.Module):<br>    def __init__(self):<br>        super(NeuralNetwork, self).__init__()<br>        self.flatten = nn.Flatten()<br>        self.linear_relu_stack = nn.Sequential(<br>            nn.Linear(28*28, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 10),<br>        )<br><br>    def forward(self, x):<br>        x = self.flatten(x)<br>        logits = self.linear_relu_stack(x)<br>        return logits<br><br>model = NeuralNetwork().to(""cuda"")<br><br>x = torch.rand(1, 28, 28, device=""cuda"")<br>logits = <input maxlength=""8"" name=""model(x)_34240856"" style=""width: 8ch;""><br>pred_probab = <input maxlength=""10"" name=""nn.Softmax_64597862"" style=""width: 10ch;"">(dim=1)(logits)<br>y_pred = pred_probab.<input maxlength=""6"" name=""argmax_11851365"" style=""width: 6ch;"">()<br>print(f""Predicted class: {y_pred}"")</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code at the end: get a prediction from a randomly-generated simulated MNIST input.<br><br><div class=""exerciseprecontainer""><pre>class NeuralNetwork(nn.Module):<br>    def __init__(self):<br>        super(NeuralNetwork, self).__init__()<br>        self.flatten = nn.Flatten()<br>        self.linear_relu_stack = nn.Sequential(<br>            nn.Linear(28*28, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 10),<br>        )<br><br>    def forward(self, x):<br>        x = self.flatten(x)<br>        logits = self.linear_relu_stack(x)<br>        return logits<br><br>model = NeuralNetwork().to(""cuda"")<br><br>x = torch.rand(1, 28, 28, device=""cuda"")<br>logits = <input maxlength=""8"" name=""model(x)_34240856"" style=""width: 8ch;""><br>pred_probab = <input maxlength=""10"" name=""nn.Softmax_64597862"" style=""width: 10ch;"">(dim=1)(logits)<br>y_pred = pred_probab.<input maxlength=""6"" name=""argmax_11851365"" style=""width: 6ch;"">()<br>print(f""Predicted class: {y_pred}"")</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	You should use a relu activation function.<br><br><div class=""exerciseprecontainer""><pre>seq_modules = nn.<input maxlength=""10"" name=""Sequential_84321228"" style=""width: 10ch;"">(<br>    nn.<input maxlength=""7"" name=""Flatten_97461534"" style=""width: 7ch;"">(),<br>    nn.<input maxlength=""6"" name=""Linear_66045967"" style=""width: 6ch;"">(in_features=28*28, out_features=20),<br>    nn.<input maxlength=""4"" name=""ReLU_42047088"" style=""width: 4ch;"">(),<br>    nn.<input maxlength=""6"" name=""Linear_66045967"" style=""width: 6ch;"">(20, 10)<br>)<br>input_image = torch.rand(3,28,28)<br>logits = seq_modules(input_image)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	You should use a relu activation function.<br><br><div class=""exerciseprecontainer""><pre>seq_modules = nn.<input maxlength=""10"" name=""Sequential_84321228"" style=""width: 10ch;"">(<br>    nn.<input maxlength=""7"" name=""Flatten_97461534"" style=""width: 7ch;"">(),<br>    nn.<input maxlength=""6"" name=""Linear_66045967"" style=""width: 6ch;"">(in_features=28*28, out_features=20),<br>    nn.<input maxlength=""4"" name=""ReLU_42047088"" style=""width: 4ch;"">(),<br>    nn.<input maxlength=""6"" name=""Linear_66045967"" style=""width: 6ch;"">(20, 10)<br>)<br>input_image = torch.rand(3,28,28)<br>logits = seq_modules(input_image)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create an optimiser that uses stochastic gradient descent.<br><br><div class='exerciseprecontainer'><pre>class NeuralNetwork(nn.Module):<br>    def __init__(self):<br>        super(NeuralNetwork, self).__init__()<br>        self.flatten = nn.Flatten()<br>        self.linear_relu_stack = nn.Sequential(<br>            nn.Linear(28*28, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 10),<br>        )<br><br>    def forward(self, x):<br>        x = self.flatten(x)<br>        logits = self.linear_relu_stack(x)<br>        return logits<br><br>learning_rate = 1e-3<br>optimizer = torch.<input maxlength='5' name='optim_02570727' style='width: 5ch;'>.<input maxlength='3' name='SGD_23492614' style='width: 3ch;'>(model.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>(), <input maxlength='2' name='lr_67183625' style='width: 2ch;'>=learning_rate)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create an optimiser that uses stochastic gradient descent.<br><br><div class='exerciseprecontainer'><pre>class NeuralNetwork(nn.Module):<br>    def __init__(self):<br>        super(NeuralNetwork, self).__init__()<br>        self.flatten = nn.Flatten()<br>        self.linear_relu_stack = nn.Sequential(<br>            nn.Linear(28*28, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 512),<br>            nn.ReLU(),<br>            nn.Linear(512, 10),<br>        )<br><br>    def forward(self, x):<br>        x = self.flatten(x)<br>        logits = self.linear_relu_stack(x)<br>        return logits<br><br>learning_rate = 1e-3<br>optimizer = torch.<input maxlength='5' name='optim_02570727' style='width: 5ch;'>.<input maxlength='3' name='SGD_23492614' style='width: 3ch;'>(model.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>(), <input maxlength='2' name='lr_67183625' style='width: 2ch;'>=learning_rate)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to perform training on a neural network.<br><br><div class='exerciseprecontainer'><pre>optimizer = torch.<input maxlength='5' name='optim_02570727' style='width: 5ch;'>.SGD(model.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>(), lr=learning_rate)<br><br>def train_loop(dataloader, model, loss_fn, optimizer):<br><br>    # get the total number of datapoints<br>    size = len(dataloader.dataset)<br><br>    # iterate over each minibatch<br>    for batch_no, (X, y) in enumerate(dataloader):<br><br>        # compute prediction and loss<br>        pred = model(X)<br>        loss = loss_fn(pred, y)<br><br>        # backpropagation<br>        <input maxlength='21' name='optimizer.zero_grad()_68747662' style='width: 21ch;'>       # reset gradients to zero (preventing default behaviour of aggregation)<br>        <input maxlength='15' name='loss.backward()_16679007' style='width: 15ch;'>             # calculate gradients of loss wrt parameters, and store them in each parameter<br>        <input maxlength='16' name='optimizer.step()_66529365' style='width: 16ch;'>            # perform gradient adjustment, in this case SGD<br><br>        # print out the current progress<br>        if batch % 100 == 0:<br>            loss, current = loss.<input maxlength='6' name='item()_17049754' style='width: 6ch;'>, batch_no * len(X)<br>            print(f""loss: {loss:&gt;7f}  [{current:&gt;5d}/{size:&gt;5d}]"")</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to perform training on a neural network.<br><br><div class='exerciseprecontainer'><pre>optimizer = torch.<input maxlength='5' name='optim_02570727' style='width: 5ch;'>.SGD(model.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>(), lr=learning_rate)<br><br>def train_loop(dataloader, model, loss_fn, optimizer):<br><br>    # get the total number of datapoints<br>    size = len(dataloader.dataset)<br><br>    # iterate over each minibatch<br>    for batch_no, (X, y) in enumerate(dataloader):<br><br>        # compute prediction and loss<br>        pred = model(X)<br>        loss = loss_fn(pred, y)<br><br>        # backpropagation<br>        <input maxlength='21' name='optimizer.zero_grad()_68747662' style='width: 21ch;'>       # reset gradients to zero (preventing default behaviour of aggregation)<br>        <input maxlength='15' name='loss.backward()_16679007' style='width: 15ch;'>             # calculate gradients of loss wrt parameters, and store them in each parameter<br>        <input maxlength='16' name='optimizer.step()_66529365' style='width: 16ch;'>            # perform gradient adjustment, in this case SGD<br><br>        # print out the current progress<br>        if batch % 100 == 0:<br>            loss, current = loss.<input maxlength='6' name='item()_17049754' style='width: 6ch;'>, batch_no * len(X)<br>            print(f""loss: {loss:&gt;7f}  [{current:&gt;5d}/{size:&gt;5d}]"")</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this function to train &amp; test a neural network (which classifies MNIST fashion data).<br><br><div class=""exerciseprecontainer""><pre>def test_loop(dataloader, model, loss_fn):<br><br>    size = len(dataloader.dataset)<br>    num_batches = len(dataloader)<br>    test_loss, pct_correct = 0, 0<br><br>    with torch.<input maxlength=""7"" name=""no_grad_41366940"" style=""width: 7ch;"">():<br>        for X, y in dataloader:<br>            pred = model(X)<br>            test_loss += loss_fn(pred, y).<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;""><br>            pct_correct += (pred.<input maxlength=""9"" name=""argmax(1)_52952663"" style=""width: 9ch;""> == y).sum().<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;""><br><br>    test_loss /= <input maxlength=""11"" name=""num_batches_63640480"" style=""width: 11ch;""><br>    pct_correct /= <input maxlength=""4"" name=""size_22114242"" style=""width: 4ch;""><br><br>    print(f""Test Error: \n Accuracy: {correct:&gt;0.1%}, Avg loss: {test_loss:&gt;8f} \n"")</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this function to train &amp; test a neural network (which classifies MNIST fashion data).<br><br><div class=""exerciseprecontainer""><pre>def test_loop(dataloader, model, loss_fn):<br><br>    size = len(dataloader.dataset)<br>    num_batches = len(dataloader)<br>    test_loss, pct_correct = 0, 0<br><br>    with torch.<input maxlength=""7"" name=""no_grad_41366940"" style=""width: 7ch;"">():<br>        for X, y in dataloader:<br>            pred = model(X)<br>            test_loss += loss_fn(pred, y).<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;""><br>            pct_correct += (pred.<input maxlength=""9"" name=""argmax(1)_52952663"" style=""width: 9ch;""> == y).sum().<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;""><br><br>    test_loss /= <input maxlength=""11"" name=""num_batches_63640480"" style=""width: 11ch;""><br>    pct_correct /= <input maxlength=""4"" name=""size_22114242"" style=""width: 4ch;""><br><br>    print(f""Test Error: \n Accuracy: {correct:&gt;0.1%}, Avg loss: {test_loss:&gt;8f} \n"")</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The loop below contains the core of the logic for training a neural network <font color='#ff5500'>model</font>, with an optimiser <font color='#ff5500'>optimizer</font>, and a loss function <font color='#ff5500'>loss_fn</font>.<br><br><div class='exerciseprecontainer'><pre>for input, target in dataset:<br>    optimizer.<input maxlength='9' name='zero_grad_18425358' style='width: 9ch;'>()<br>    output = <input maxlength='5' name='model_95517463' style='width: 5ch;'>(input)<br>    loss = loss_fn(output, <input maxlength='6' name='target_07527631' style='width: 6ch;'>)<br>    loss.<input maxlength='8' name='backward_87962158' style='width: 8ch;'>()<br>    optimizer.<input maxlength='4' name='step_79907168' style='width: 4ch;'>()</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The loop below contains the core of the logic for training a neural network <font color='#ff5500'>model</font>, with an optimiser <font color='#ff5500'>optimizer</font>, and a loss function <font color='#ff5500'>loss_fn</font>.<br><br><div class='exerciseprecontainer'><pre>for input, target in dataset:<br>    optimizer.<input maxlength='9' name='zero_grad_18425358' style='width: 9ch;'>()<br>    output = <input maxlength='5' name='model_95517463' style='width: 5ch;'>(input)<br>    loss = loss_fn(output, <input maxlength='6' name='target_07527631' style='width: 6ch;'>)<br>    loss.<input maxlength='8' name='backward_87962158' style='width: 8ch;'>()<br>    optimizer.<input maxlength='4' name='step_79907168' style='width: 4ch;'>()</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color=""#ff5500"">z</font> is the linear combination of activations that go into the final layer. <font color=""#ff5500"">y = torch.tensor(2)</font>, reflecting the fact that the correct classification index is 2.<br><br>Compute the cost from negative log likelihood, after applying (log of) softmax. Also compute all the derivatives.<br><br><div class=""exerciseprecontainer""><pre>import torch.<input maxlength=""13"" name=""nn.functional_22858356"" style=""width: 13ch;""> as F<br><br>C = F.<input maxlength=""8"" name=""nll_loss_85270549"" style=""width: 8ch;"">(F.<input maxlength=""11"" name=""log_softmax_88041185"" style=""width: 11ch;"">(z, dim=0), y)<br>C.<input maxlength=""10"" name=""backward()_92041112"" style=""width: 10ch;""></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color=""#ff5500"">z</font> is the linear combination of activations that go into the final layer. <font color=""#ff5500"">y = torch.tensor(2)</font>, reflecting the fact that the correct classification index is 2.<br><br>Compute the cost from negative log likelihood, after applying (log of) softmax. Also compute all the derivatives.<br><br><div class=""exerciseprecontainer""><pre>import torch.<input maxlength=""13"" name=""nn.functional_22858356"" style=""width: 13ch;""> as F<br><br>C = F.<input maxlength=""8"" name=""nll_loss_85270549"" style=""width: 8ch;"">(F.<input maxlength=""11"" name=""log_softmax_88041185"" style=""width: 11ch;"">(z, dim=0), y)<br>C.<input maxlength=""10"" name=""backward()_92041112"" style=""width: 10ch;""></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following represents an identity concerning the gradient of log likelihood cost function with softmax activations, wrt the parameters.<br><br><div class='exerciseprecontainer'><pre>import torch.nn.functional as F<br><br>a_prev = torch.rand(5, requires_grad=True)<br>y_idx = 2<br>y_vector = torch.zeros(3, dtype=torch.float).scatter_(dim=0, index=torch.tensor(y_idx), value=1)<br><br>w = torch.randn(3, 5, requires_grad=True)<br>b = torch.randn(3, requires_grad=True)<br><br>z = (w @ a_prev) + b<br>a = nn.Softmax(dim=0)(z)<br><br>C = F.nll_loss(F.log_softmax(z, dim=0), torch.tensor(2))<br>C.backward()<br><br>w.<input maxlength='4' name='grad_92229785' style='width: 4ch;'><br>#  -&gt;  tensor([[ 0.0888,  0.0603,  0.0903,  0.1492,  0.0430],<br>               [ 0.3855,  0.2618,  0.3922,  0.6478,  0.1865],<br>               [-0.4742, -0.3221, -0.4825, -0.7970, -0.2295]])<br><br>torch.<input maxlength='5' name='outer_32055163' style='width: 5ch;'>(<input maxlength='10' name='a-y_vector_77752803' style='width: 10ch;'>, <input maxlength='6' name='a_prev_70249439' style='width: 6ch;'>)<br>#  -&gt;  tensor([[ 0.0888,  0.0603,  0.0903,  0.1492,  0.0430],<br>               [ 0.3855,  0.2618,  0.3922,  0.6478,  0.1865],<br>               [-0.4742, -0.3221, -0.4825, -0.7970, -0.2295]],<br>              grad_fn=)<br><br>b.<input maxlength='4' name='grad_92229785' style='width: 4ch;'><br>#  -&gt;  tensor([ 0.1821,  0.7909, -0.9730])<br><br><input maxlength='10' name='a-y_vector_77752803' style='width: 10ch;'><br>#  -&gt;  tensor([ 0.1821,  0.7909, -0.9730], grad_fn=)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following represents an identity concerning the gradient of log likelihood cost function with softmax activations, wrt the parameters.<br><br><div class='exerciseprecontainer'><pre>import torch.nn.functional as F<br><br>a_prev = torch.rand(5, requires_grad=True)<br>y_idx = 2<br>y_vector = torch.zeros(3, dtype=torch.float).scatter_(dim=0, index=torch.tensor(y_idx), value=1)<br><br>w = torch.randn(3, 5, requires_grad=True)<br>b = torch.randn(3, requires_grad=True)<br><br>z = (w @ a_prev) + b<br>a = nn.Softmax(dim=0)(z)<br><br>C = F.nll_loss(F.log_softmax(z, dim=0), torch.tensor(2))<br>C.backward()<br><br>w.<input maxlength='4' name='grad_92229785' style='width: 4ch;'><br>#  -&gt;  tensor([[ 0.0888,  0.0603,  0.0903,  0.1492,  0.0430],<br>               [ 0.3855,  0.2618,  0.3922,  0.6478,  0.1865],<br>               [-0.4742, -0.3221, -0.4825, -0.7970, -0.2295]])<br><br>torch.<input maxlength='5' name='outer_32055163' style='width: 5ch;'>(<input maxlength='10' name='a-y_vector_77752803' style='width: 10ch;'>, <input maxlength='6' name='a_prev_70249439' style='width: 6ch;'>)<br>#  -&gt;  tensor([[ 0.0888,  0.0603,  0.0903,  0.1492,  0.0430],<br>               [ 0.3855,  0.2618,  0.3922,  0.6478,  0.1865],<br>               [-0.4742, -0.3221, -0.4825, -0.7970, -0.2295]],<br>              grad_fn=)<br><br>b.<input maxlength='4' name='grad_92229785' style='width: 4ch;'><br>#  -&gt;  tensor([ 0.1821,  0.7909, -0.9730])<br><br><input maxlength='10' name='a-y_vector_77752803' style='width: 10ch;'><br>#  -&gt;  tensor([ 0.1821,  0.7909, -0.9730], grad_fn=)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in these two different methods for disabling gradient tracking<br><br><div class='exerciseprecontainer'><pre>with torch.<input maxlength='7' name='no_grad_41366940' style='width: 7ch;'>():<br>    z = torch.matmul(x, w)+b<br><br># ==========================<br><br>z = torch.matmul(x, w)+b<br>z_det = z.<input maxlength='6' name='detach_42647125' style='width: 6ch;'>()</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in these two different methods for disabling gradient tracking<br><br><div class='exerciseprecontainer'><pre>with torch.<input maxlength='7' name='no_grad_41366940' style='width: 7ch;'>():<br>    z = torch.matmul(x, w)+b<br><br># ==========================<br><br>z = torch.matmul(x, w)+b<br>z_det = z.<input maxlength='6' name='detach_42647125' style='width: 6ch;'>()</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this?<br><br><img src='594f9f98016c84fe9b81a0f4e037f92927d76cf0cad13662060fc36ce44bc937.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this?<br><br><img src='594f9f98016c84fe9b81a0f4e037f92927d76cf0cad13662060fc36ce44bc937.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src='c37f1c26732439cc4fbac644d5365d7560f1b130a83e408305cc53599e658d00.jpg'><br><br>Explanation: we can think of the <font color='#ff5500'>axis=0</font> command as meaning ""expand <font color='#ff5500'>zi</font> into a grid with same shape as z, along the <font color='#ff5500'>axis=0</font> direction (i.e. expand into rows), where the values in <font color='#ff5500'>zi</font> are interpreted as indices in this direction of expansion.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this?<br><br><img src='100e71d5aec062cc1ec9a643dcbed275ae9c82ed39815846b10ab8b2fef37168.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this?<br><br><img src='100e71d5aec062cc1ec9a643dcbed275ae9c82ed39815846b10ab8b2fef37168.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src=""673aa8b2cbbf68442ffa8f6aa664468640ea686f6afd524e692aeba445060e7b.jpg""><br><br>Explanation: we can think of the <font color=""#ff5500"">axis=1</font> command as meaning ""expand <font color=""#ff5500"">zi</font> into a grid with same shape as z, along the <font color=""#ff5500"">axis=1</font> direction (i.e. expand into columns), where the values in <font color=""#ff5500"">zi</font> are interpreted as indices in this direction of expansion.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are two ways to get a tensor's dimensions?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are two ways to get a tensor's dimensions?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The <font color='#ff5500'>shape</font> attribute, and the <font color='#ff5500'>size</font> method.<br><br><img src='7f7319e923182e0bbcbdc4ec8b68d85ed241018fdce8f5810d21967daf33fea5.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If the GPU is available, how to allocate a tensor <font color='#ff5500'>tensor</font> to the GPU?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If the GPU is available, how to allocate a tensor <font color='#ff5500'>tensor</font> to the GPU?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use <font color='#ff5500'>tensor.to(""cuda"")</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why will this fail, and how to fix it?<br><br><div class='exerciseprecontainer'><pre>x = torch.tensor([[1, 2], [3, 4]])<br>x_ones = torch.ones_like(x)<br>x_rand = torch.rand_like(x)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why will this fail, and how to fix it?<br><br><div class='exerciseprecontainer'><pre>x = torch.tensor([[1, 2], [3, 4]])<br>x_ones = torch.ones_like(x)<br>x_rand = torch.rand_like(x)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It will fail with the following error:<br><br><img src='02dfeda47110626d1e0ba1489bad404bb9aa675d3209ae1d3c71471c9a75a033.jpg'><br><br>because functions with the <font color='#ff5500'>_like</font> suffix also inherit the datatype of the object, which in this case is not compatible (integer vs float).<br><br>The solution to this problem is to specify the datatype of <font color='#ff5500'>x_rand</font>:<br><br><div class='exerciseprecontainer'><pre>x_rand = torch.rand_like(x, dtype=torch.float)</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between the&nbsp;<code>arange</code> and <code>linspace</code> functions? 
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between the&nbsp;<code>arange</code> and <code>linspace</code> functions? 
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	arange generates numbers between start and end parameters that are spaced according to the step parameter.
<code>t.arange(start, end, step)<br></code>
<br>
linspace generates them by fixing the number of elements first, and then spacing them evenly in the given interval.
<code>t.linspace(start, end, num_elements)</code>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between NumPy and PyTorch's concatenation function? (both in terms of the function name and its arguments)
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between NumPy and PyTorch's concatenation function? (both in terms of the function name and its arguments)
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They both behave similarly, but with different names:<ul><li><font color='#ff5500'>np.concatenate((a1, a2, ...), axis=0)</font></li><li><font color='#ff5500'>torch.cat(tensors, dim=0)</font></li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the PyTorch version of the NumPy <font color='#ff5500'>moveaxis</font> function?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the PyTorch version of the NumPy <font color='#ff5500'>moveaxis</font> function?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	PyTorch also has a <font color=""#ff5500"">moveaxis</font> function, but it has an alias <font color=""#ff5500"">movedim</font>. They both behave in the same way, with keyword arguments <font color=""#ff5500"">source</font> and <font color=""#ff5500"">destination</font>.<br><br><img src=""addb42613d62231a7dc79780353ac89990427ccb90c6a9630dde13f013a9d4de.jpg""><br><br>This reflects two themes with PyTorch vs NumPy syntax:<ul><li>They're very analogous, often identical</li><li>PyTorch often uses <font color=""#ff5500"">dim</font> where NumPy uses <font color=""#ff5500"">axis</font></li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a shortcut for matrix multiplication in both NumPy and PyTorch?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a shortcut for matrix multiplication in both NumPy and PyTorch?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The <font color='#ff5500'>@</font> symbol.<br><br><img src='f0a83aff1ed3e78a89f1d6c704224db4c00cd0f7413b003a6dffa8c6f1be89bf.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why are in-place operations discouraged in PyTorch?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why are in-place operations discouraged in PyTorch?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	In-place operations save some memory, but can be problematic when <b>computing gradients</b> because of an immediate <b>loss of history</b>. Hence, their use is discouraged.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to convert a PyTorch tensor into a NumPy array? How about the other way around?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to convert a PyTorch tensor into a NumPy array? How about the other way around?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	From PyTorch to NumPy, you use the PyTorch tensor method <font color=""#ff5500"">t.numpy()</font>. For the other way, it's the PyTorch method <font color=""#ff5500"">t.tensor(n)</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the <font color='#ff5500'>_</font> suffix in PyTorch tensor methods indicate?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the <font color='#ff5500'>_</font> suffix in PyTorch tensor methods indicate?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	That the operation is <b>in-place</b>. For example, <font color='#ff5500'>tensor.t_()</font> will transpose the tensor, and <font color='#ff5500'>tensor.add_(5)</font> will add five to it.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the PyTorch equivalents of the functions <font color=""#ff5500"">np.take_along_axis</font> and <font color=""#ff5500"">np.put_along_axis</font> ? Why are they useful for data manipulation?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the PyTorch equivalents of the functions <font color=""#ff5500"">np.take_along_axis</font> and <font color=""#ff5500"">np.put_along_axis</font> ? Why are they useful for data manipulation?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">torch.gather</font> and <font color=""#ff5500"">torch.scatter</font> respectively. <font color=""#ff5500"">scatter</font> also has a method; <font color=""#ff5500"">torch.Tensor.scatter_()</font>.<br><br>They can ""vectorise"" data, see below:<br><br><img src=""paste-7658c68f2c3c4d79a987e7ee32686e43f13c6e2e.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to construct a PyTorch tensor that's just a scalar value?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to construct a PyTorch tensor that's just a scalar value?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>y = torch.tensor(3)</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to look at the first item in <font color=""#ff5500"">train_dataloader</font> ? What will the dimensions of the first items be?<br><br><img src=""9e92c465ec7f5c8e062c5e374209c6ce5153bc66bfe60bb8842ab827ec795a0c.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to look at the first item in <font color=""#ff5500"">train_dataloader</font> ? What will the dimensions of the first items be?<br><br><img src=""9e92c465ec7f5c8e062c5e374209c6ce5153bc66bfe60bb8842ab827ec795a0c.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Convert it into an iterable, with the Python builtin functions <font color=""#ff5500"">iter</font> and <font color=""#ff5500"">next</font>.<br><br><img src=""af4261b66735c6e4403bed25eeefbe5e093207ca04eb80dcc9a51141e9764487.jpg""><br><br>Note that <font color=""#ff5500"">X, y</font> aren't individual datapoints, they're actually each a collection of 60 datapoints, i.e. they are <b>batches</b>.<br><br><font color=""#ff5500"">x.shape = (batch_size, n_feature_maps, height, width)</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which function is used to construct a container of modules for a standard neural network?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which function is used to construct a container of modules for a standard neural network?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">torch.nn.Sequential(*args)</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How are the weights initialised in <font color=""#ff5500"">nn.Linear</font> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How are the weights initialised in <font color=""#ff5500"">nn.Linear</font> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They're initialised using the Xavier method: \(w\sim U[-\frac{1}{\sqrt{n_{in}}}, \frac{1}{\sqrt{n_{in}}}]\).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the five arguments of <font color='#ff5500'>nn.Linear</font> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the five arguments of <font color='#ff5500'>nn.Linear</font> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src='08a6ee0c7233a636179177581bb5a18b30c571b28337f218fef7fa1385e52dc3.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the problem here?<br><br><div class=""exerciseprecontainer""><pre>x = torch.rand(1, 28, 28, device=""cuda"")<br>logits = model(x)<br>pred_probab = nn.Softmax()(logits)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the problem here?<br><br><div class=""exerciseprecontainer""><pre>x = torch.rand(1, 28, 28, device=""cuda"")<br>logits = model(x)<br>pred_probab = nn.Softmax()(logits)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The softmax layer is now initialised with a mandatory dimension argument. Fix this by replacing the third line with <font color=""#ff5500"">pred_probab = nn.Softmax(dim=1)(logits)</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color=""#ff5500"">t.shape = (n1, n2, ..., nk)</font>, then by default how will <font color=""#ff5500"">nn.Flatten()</font> change this?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color=""#ff5500"">t.shape = (n1, n2, ..., nk)</font>, then by default how will <font color=""#ff5500"">nn.Flatten()</font> change this?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It will change the shape to <font color=""#ff5500"" style="""">(n1, n2 * n3 * ... * nk)</font>.<br><br>This is because <font color=""#ff5500"">n1</font> is generally understood to be the dimension corresponding to batch size.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two functions to save and load a trained model in PyTorch?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two functions to save and load a trained model in PyTorch?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>torch.save</font> and <font color='#ff5500'>torch.load</font>, as shown below:<br><br><img src='e03a0f4310c8b63269bc1b2ed53e1ab10e99bcb27a7f45ea15e3cb82fadff703.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are two common suffixes for saving PyTorch models (by convention) ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are two common suffixes for saving PyTorch models (by convention) ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>.pt</font> and <font color='#ff5500'>.pth</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this graph called? Which nodes can we calculate the derivative of L wrt, and what is the special name for these nodes?<br><br><img src=""full_graph.png"" width=""439"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this graph called? Which nodes can we calculate the derivative of L wrt, and what is the special name for these nodes?<br><br><img src=""full_graph.png"" width=""439"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is called a <b>computational graph</b>.<br><br>The nodes we can calculate the derivative of L wrt are called the <b>leaf nodes</b> (or <b>leaf tensors</b>); they're shown in pink.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain this output:<br><br><img src='ae09f9b61db86d409ec051299d150ddd5133d6666f9b8c996ab30b79a45011e1.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain this output:<br><br><img src='ae09f9b61db86d409ec051299d150ddd5133d6666f9b8c996ab30b79a45011e1.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first cell sets up the final layer of neural network:<ul><li>Final layer is a linear transformation followed by softmax to get output</li><li><font color='#ff5500'>y_idx</font> equals 2, <font color='#ff5500'>y_vector</font> equals (0, 0, 1), i.e. they're equivalent. We need <font color='#ff5500'>y_vector</font> to calculate derivatives, but we need <font color='#ff5500'>y_idx</font> to calculate...</li><li>Cost is measured with nll (negative log likelihood), i.e. \(C=-\ln{a_y^L}\)</li></ul>The next four cells show us the following formulae to be true, with softmax activations and log likelihood cost function:<br><br><img src='41388bf0076f99c164d31c04ff778e17a40915c6991635e96d56d18ebae5989a.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below are two ways we can disable gradient tracking. What are two reasons we might want to do this?<br><br><img src='31379c8b010db8a65f25087197dfe156693308360ac3cb994caa9708fe5a66d2.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below are two ways we can disable gradient tracking. What are two reasons we might want to do this?<br><br><img src='31379c8b010db8a65f25087197dfe156693308360ac3cb994caa9708fe5a66d2.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	We might disable gradient tracking in order to:<ul><li>Mark some parameters as <b>frozen parameters</b> (if you're just <b>finetuning a pretrained network</b>)</li><li><b>Speed up computations</b> when you're only doing <b>forward passes</b></li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the mathematical structure which <font color='#ff5500'>torch.autograd</font> uses to store a record of all data and executed operations?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the mathematical structure which <font color='#ff5500'>torch.autograd</font> uses to store a record of all data and executed operations?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It is called a <b>computational graph</b>. The mathematical object is a <b>directed acyclic graph (DAG)</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'>The two types of NNs I've discussed so far [MLPs and CNNs] have both been varieties of feedforward neural network - meaning they have no cycles in them, and therefore the evaluation of an input doesn't depend on <i><b>previous inputs</b></i>. Relatedly, they can only take inputs of a fixed length. RNNs are different; their hidden layers feed back upon themselves. This makes them useful for processing <i><b>sequences</b></i> of data, because an RNN fed each element in turn is equivalent to a much larger NN which processes the whole sequence at once (as indicated in the ""<b><i>unfolding</i></b>"" step in the diagram below; each circle is a standard MLP, all with the same weights). If we want to train the RNN to predict a sequence, then the loss function should penalise each “o” to the extent that it <b><i>differs from the following “x”</i></b>.<div class='q-desc q-desc-1'>Richard Ngo</div><div class='q-desc q-desc-2'>An Introduction to Deep Learning</div></div><br><img src=""fb73703dd371217405cc7b5a5e620b7520cd16cbcb5547b4265d31e265eedd90.jpg"" style=""width:1946px""/>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'>The two types of NNs I've discussed so far [MLPs and CNNs] have both been varieties of feedforward neural network - meaning they have no cycles in them, and therefore the evaluation of an input doesn't depend on <i><b>previous inputs</b></i>. Relatedly, they can only take inputs of a fixed length. RNNs are different; their hidden layers feed back upon themselves. This makes them useful for processing <i><b>sequences</b></i> of data, because an RNN fed each element in turn is equivalent to a much larger NN which processes the whole sequence at once (as indicated in the ""<b><i>unfolding</i></b>"" step in the diagram below; each circle is a standard MLP, all with the same weights). If we want to train the RNN to predict a sequence, then the loss function should penalise each “o” to the extent that it <b><i>differs from the following “x”</i></b>.<div class='q-desc q-desc-1'>Richard Ngo</div><div class='q-desc q-desc-2'>An Introduction to Deep Learning</div></div><br><img src=""fb73703dd371217405cc7b5a5e620b7520cd16cbcb5547b4265d31e265eedd90.jpg"" style=""width:1946px""/>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of neural network are <b>LSTMs </b>a special case of, and why are they more sophisticated than the general version?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of neural network are <b>LSTMs </b>a special case of, and why are they more sophisticated than the general version?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They’re a special case of <b>RNNs</b>.<br><br>They’re more sophisticated because the gates that each input passes through are more complicated.<br><br><img src=""8e1dd18d3bbd51b6df17e3f7725463aa49516e870e179e6a6877efa52055ae59.jpg"" style=""width:820px""/>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of network is this, what problem does this illustrate, and what special type of network was invented to solve this problem?<br><br><img src=""51a36f81d81eeddb977a3493e8f1a6752ee0fb56a50c83ce7f0a436bf0037ea3.jpg"" style=""width:683px"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of network is this, what problem does this illustrate, and what special type of network was invented to solve this problem?<br><br><img src=""51a36f81d81eeddb977a3493e8f1a6752ee0fb56a50c83ce7f0a436bf0037ea3.jpg"" style=""width:683px"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is a <b>recurrent neural network (RNN)</b>.<br><br>The problem being illustrated is the inability to learn <b>long-term dependencies</b>. This problem is solved by <b>recurrent long short-term neural memory networks (LSTMs)</b>, which allow for such dependencies via a more complicated gate structure (abstracted as “A” in the image above).<br><br><img src=""Image.png"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>leaky ReLU</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>leaky ReLU</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It’s a modification of <b>ReLU</b> which allows for small negative values when the input is less than zero. This prevents the<b> “dying ReLU”</b> problem, where the gradient gets stuck on 0 and never updates.<br><br><img src=""9b323c01915d450ce2d8026e2bd4ae53fc51a9050661f850d9b0a54da41efc13.jpg"" style=""width:572px""/>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When were LSTMs invented, and what problem were they designed to fix?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When were LSTMs invented, and what problem were they designed to fix?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	1997, designed to solve the <b>learning of long-term dependencies</b> problem that RNNs couldn’t.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code, so it'll return the same result as running <font color='#ff5500'>Q.sum().backward()</font> before printing the gradients.<br><br><div class='exerciseprecontainer'><pre>Q = 3*a**3 - b**2<br><br>a.grad = None<br>b.grad = None<br><br>v = <input maxlength='20' name='torch.tensor([1, 1])_72132509' style='width: 20ch;'><br><br>Q.backward(<input maxlength='8' name='gradient_14728718' style='width: 8ch;'>=v)<br><br>print(a.grad, ""\n"", b.grad)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code, so it'll return the same result as running <font color='#ff5500'>Q.sum().backward()</font> before printing the gradients.<br><br><div class='exerciseprecontainer'><pre>Q = 3*a**3 - b**2<br><br>a.grad = None<br>b.grad = None<br><br>v = <input maxlength='20' name='torch.tensor([1, 1])_72132509' style='width: 20ch;'><br><br>Q.backward(<input maxlength='8' name='gradient_14728718' style='width: 8ch;'>=v)<br><br>print(a.grad, ""\n"", b.grad)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; t = torch.rand(4, 10)<br>&gt;&gt;&gt; t<br>tensor([[0.3089, 0.4215, 0.5465, 0.9649],<br>        [0.9579, 0.1485, 0.4597, 0.0476]])<br><br>&gt;&gt;&gt; <input maxlength='12' name='torch.max(t)_28596731' style='width: 12ch;'><br>tensor(0.9649)<br><br>&gt;&gt;&gt; <input maxlength='15' name='torch.max(t, 1)_51001110' style='width: 15ch;'><br>torch.return_types.max(<br>values=tensor([0.9649, 0.9579]),<br>indices=tensor([3, 0]))</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; t = torch.rand(4, 10)<br>&gt;&gt;&gt; t<br>tensor([[0.3089, 0.4215, 0.5465, 0.9649],<br>        [0.9579, 0.1485, 0.4597, 0.0476]])<br><br>&gt;&gt;&gt; <input maxlength='12' name='torch.max(t)_28596731' style='width: 12ch;'><br>tensor(0.9649)<br><br>&gt;&gt;&gt; <input maxlength='15' name='torch.max(t, 1)_51001110' style='width: 15ch;'><br>torch.return_types.max(<br>values=tensor([0.9649, 0.9579]),<br>indices=tensor([3, 0]))</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; A = torch.diag(torch.arange(3))<br>&gt;&gt;&gt; b = torch.tensor([4, 5, 6])<br><br>&gt;&gt;&gt; <input maxlength='7' name='A.mm(A)_84533109' style='width: 7ch;'><br>tensor([[0, 0, 0],<br>        [0, 1, 0],<br>        [0, 0, 4]])<br><br>&gt;&gt;&gt; <input maxlength='7' name='A.mv(b)_81104731' style='width: 7ch;'><br>tensor([ 0,  5, 12])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; A = torch.diag(torch.arange(3))<br>&gt;&gt;&gt; b = torch.tensor([4, 5, 6])<br><br>&gt;&gt;&gt; <input maxlength='7' name='A.mm(A)_84533109' style='width: 7ch;'><br>tensor([[0, 0, 0],<br>        [0, 1, 0],<br>        [0, 0, 4]])<br><br>&gt;&gt;&gt; <input maxlength='7' name='A.mv(b)_81104731' style='width: 7ch;'><br>tensor([ 0,  5, 12])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; y = torch.ones(3, 4, 5, 6)<br><br>&gt;&gt;&gt; torch.<input maxlength=""7"" name=""flatten_11515039"" style=""width: 7ch;"">(<input maxlength=""7"" name=""y, 1, 2_24153007"" style=""width: 7ch;"">).shape<br>torch.Size([3, 20, 6])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; y = torch.ones(3, 4, 5, 6)<br><br>&gt;&gt;&gt; torch.<input maxlength=""7"" name=""flatten_11515039"" style=""width: 7ch;"">(<input maxlength=""7"" name=""y, 1, 2_24153007"" style=""width: 7ch;"">).shape<br>torch.Size([3, 20, 6])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; z = torch.ones(8, 10, 3, 2)<br><br>&gt;&gt;&gt; torch.flatten(z, 1)<br>torch.Size([<input maxlength='5' name='8, 60_34733146' style='width: 5ch;'>])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; z = torch.ones(8, 10, 3, 2)<br><br>&gt;&gt;&gt; torch.flatten(z, 1)<br>torch.Size([<input maxlength='5' name='8, 60_34733146' style='width: 5ch;'>])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; z = torch.ones(8, 10, 3, 2)<br><br>&gt;&gt;&gt; torch.flatten(z, 0, 2)<br>torch.Size([<input maxlength='6' name='240, 2_07634308' style='width: 6ch;'>])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; z = torch.ones(8, 10, 3, 2)<br><br>&gt;&gt;&gt; torch.flatten(z, 0, 2)<br>torch.Size([<input maxlength='6' name='240, 2_07634308' style='width: 6ch;'>])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Update all the gradients using gradient descent (just using plain Python).<br><br><div class='exerciseprecontainer'><pre>learning_rate = 0.01<br>for f in net.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>():<br>    f.data.<input maxlength='4' name='sub__40691038' style='width: 4ch;'>(<input maxlength='6' name='f.grad_81183943' style='width: 6ch;'> * learning_rate)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Update all the gradients using gradient descent (just using plain Python).<br><br><div class='exerciseprecontainer'><pre>learning_rate = 0.01<br>for f in net.<input maxlength='10' name='parameters_06927658' style='width: 10ch;'>():<br>    f.data.<input maxlength='4' name='sub__40691038' style='width: 4ch;'>(<input maxlength='6' name='f.grad_81183943' style='width: 6ch;'> * learning_rate)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code from this neural network.<br><br><div class='exerciseprecontainer'><pre>class Net(nn.Module):<br><br>    def __init__(self):<br>        super(Net, self).__init__()<br>        # 1 input image channel, 6 output channels, 5x5 square convolution<br>        self.conv1 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(1, 6, 5)<br>        self.conv2 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(6, 16, 5)<br>        # an <input maxlength='6' name='affine_63472474' style='width: 6ch;'> operation: y = Wx + b<br>        self.fc1 = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension<br>        self.fc2 = nn.Linear(120, 84)<br>        self.fc3 = nn.Linear(84, 10)<br><br>    def forward(self, x):<br>        # Max pooling over a (2, 2) window<br>        x = F.<input maxlength='10' name='max_pool2d_70731639' style='width: 10ch;'>(F.relu(self.conv1(x)), (2, 2))<br>        # If the size is a square, you can specify with a single number<br>        x = F.max_pool2d(F.relu(self.conv2(x)), 2)<br>        x = torch.flatten(x, 1) # flatten all dimensions except the <input maxlength='5' name='batch_79944622' style='width: 5ch;'> dimension<br>        x = F.relu(self.fc1(x))<br>        x = F.relu(self.fc2(x))<br>        x = self.fc3(x)<br>        return x</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the code from this neural network.<br><br><div class='exerciseprecontainer'><pre>class Net(nn.Module):<br><br>    def __init__(self):<br>        super(Net, self).__init__()<br>        # 1 input image channel, 6 output channels, 5x5 square convolution<br>        self.conv1 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(1, 6, 5)<br>        self.conv2 = nn.<input maxlength='6' name='Conv2d_73312514' style='width: 6ch;'>(6, 16, 5)<br>        # an <input maxlength='6' name='affine_63472474' style='width: 6ch;'> operation: y = Wx + b<br>        self.fc1 = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension<br>        self.fc2 = nn.Linear(120, 84)<br>        self.fc3 = nn.Linear(84, 10)<br><br>    def forward(self, x):<br>        # Max pooling over a (2, 2) window<br>        x = F.<input maxlength='10' name='max_pool2d_70731639' style='width: 10ch;'>(F.relu(self.conv1(x)), (2, 2))<br>        # If the size is a square, you can specify with a single number<br>        x = F.max_pool2d(F.relu(self.conv2(x)), 2)<br>        x = torch.flatten(x, 1) # flatten all dimensions except the <input maxlength='5' name='batch_79944622' style='width: 5ch;'> dimension<br>        x = F.relu(self.fc1(x))<br>        x = F.relu(self.fc2(x))<br>        x = self.fc3(x)<br>        return x</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a line from forward propagation, i.e. in the <font color='#ff5500'>forward(self, x)</font> function from a class <font color='#ff5500'>Net(nn.Module)</font>.<br><br>It involves applying the second convolutional layer, then ReLU activation, then max pooling with size (2, 2).<br><br>There are no spaces.<br><br><div class='exerciseprecontainer'><pre>import torch<br>from torch import nn<br>import torch.nn.<input maxlength='10' name='functional_51035531' style='width: 10ch;'> as F<br><br>...<br><br>x = <input maxlength='37' name='F.max_pool2d(F.relu(self.conv2(x)),2)_98845278' style='width: 37ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a line from forward propagation, i.e. in the <font color='#ff5500'>forward(self, x)</font> function from a class <font color='#ff5500'>Net(nn.Module)</font>.<br><br>It involves applying the second convolutional layer, then ReLU activation, then max pooling with size (2, 2).<br><br>There are no spaces.<br><br><div class='exerciseprecontainer'><pre>import torch<br>from torch import nn<br>import torch.nn.<input maxlength='10' name='functional_51035531' style='width: 10ch;'> as F<br><br>...<br><br>x = <input maxlength='37' name='F.max_pool2d(F.relu(self.conv2(x)),2)_98845278' style='width: 37ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a line from forward propagation, i.e. in the <font color='#ff5500'>forward(self, x)</font> function from a class <font color='#ff5500'>Net(nn.Module)</font>.<br><br>It involves applying the network's first fully connected layer, with sigmoid activation function.<br><br>There are no spaces.<br><br><div class='exerciseprecontainer'><pre>import torch<br>from torch import nn<br>import torch.nn.<input maxlength='10' name='functional_51035531' style='width: 10ch;'> as F<br><br>...<br><br>x = <input maxlength='22' name='F.sigmoid(self.fc1(x))_65667417' style='width: 22ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a line from forward propagation, i.e. in the <font color='#ff5500'>forward(self, x)</font> function from a class <font color='#ff5500'>Net(nn.Module)</font>.<br><br>It involves applying the network's first fully connected layer, with sigmoid activation function.<br><br>There are no spaces.<br><br><div class='exerciseprecontainer'><pre>import torch<br>from torch import nn<br>import torch.nn.<input maxlength='10' name='functional_51035531' style='width: 10ch;'> as F<br><br>...<br><br>x = <input maxlength='22' name='F.sigmoid(self.fc1(x))_65667417' style='width: 22ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill these in, to define your layers in a neural network:<br><br><div class=""exerciseprecontainer""><pre>class Net(nn.Module):<br><br>    def __init__(self):<br>        super(<input maxlength=""9"" name=""Net, self_51961936"" style=""width: 9ch;"">).__init__()<br>        self.<input maxlength=""5"" name=""conv1_71679848"" style=""width: 5ch;""> = nn.Conv2d(1, 6, 5)<br>        self.<input maxlength=""5"" name=""conv2_63794258"" style=""width: 5ch;""> = nn.Conv2d(6, 16, 5)<br>        self.<input maxlength=""3"" name=""fc1_85099491"" style=""width: 3ch;""> = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension<br>        self.<input maxlength=""3"" name=""fc2_35672662"" style=""width: 3ch;""> = nn.Linear(120, 84)<br>        self.<input maxlength=""3"" name=""fc3_27019270"" style=""width: 3ch;""> = nn.Linear(84, 10)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill these in, to define your layers in a neural network:<br><br><div class=""exerciseprecontainer""><pre>class Net(nn.Module):<br><br>    def __init__(self):<br>        super(<input maxlength=""9"" name=""Net, self_51961936"" style=""width: 9ch;"">).__init__()<br>        self.<input maxlength=""5"" name=""conv1_71679848"" style=""width: 5ch;""> = nn.Conv2d(1, 6, 5)<br>        self.<input maxlength=""5"" name=""conv2_63794258"" style=""width: 5ch;""> = nn.Conv2d(6, 16, 5)<br>        self.<input maxlength=""3"" name=""fc1_85099491"" style=""width: 3ch;""> = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension<br>        self.<input maxlength=""3"" name=""fc2_35672662"" style=""width: 3ch;""> = nn.Linear(120, 84)<br>        self.<input maxlength=""3"" name=""fc3_27019270"" style=""width: 3ch;""> = nn.Linear(84, 10)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to return an ordered dict of all the parameters of a network?<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; d = net.<input maxlength='12' name='state_dict()_29821671' style='width: 12ch;'><br>&gt;&gt;&gt; d.keys()<br>odict_keys(['conv1.weight', 'conv1.bias', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias'])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to return an ordered dict of all the parameters of a network?<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; d = net.<input maxlength='12' name='state_dict()_29821671' style='width: 12ch;'><br>&gt;&gt;&gt; d.keys()<br>odict_keys(['conv1.weight', 'conv1.bias', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias'])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain why these give the same results:<br><br><img src=""4142b94722de1a5986e7195eacbc62c1237e08925f926b3387961fd5460a1fc6.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain why these give the same results:<br><br><img src=""4142b94722de1a5986e7195eacbc62c1237e08925f926b3387961fd5460a1fc6.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's because of how the gradients are calculated when the <font color=""#ff5500"">Q.backward()</font> method is run with the <font color=""#ff5500"">gradient</font> argument. Note that this argument is necessary because <font color=""#ff5500"">Q</font> is a vector.<br><br><img src=""1b46ed659eebbcbcad3ce6069787a175406e07fc1c58a393f4b918b4dce7a878.jpg""><br><br>In this case, <font color=""#ff5500"">Q.sum()</font> is the same as \((1, 1)^TQ\).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between <font color=""#ff5500"">nn.ReLU</font> and <font color=""#ff5500"">F.relu</font>? Where are they imported from, and where might they be used?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between <font color=""#ff5500"">nn.ReLU</font> and <font color=""#ff5500"">F.relu</font>? Where are they imported from, and where might they be used?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<div class=""exerciseprecontainer""><pre>from torch import nn<br>import torch.nn.functional as F</pre></div><br><font color=""#ff5500"">nn.ReLU</font> defines a neural network layer. To use it, you need to call <font color=""#ff5500"">layer = nn.ReLU(); output = layer(input)</font>. It might be used if you're constructing the neural network via the method <font color=""#ff5500"">nn.Sequential</font>. Example:<br><br><img src=""1686fd651ff9b56c60760037d2d9bebbc81ce6d6a17ff49f9c7752323f2d572d.jpg""><br><br><font color=""#ff5500"">F.relu</font> is just the ReLU function, you use it like: <font color=""#ff5500"">output = F.relu(input)</font>. If you're defining most of the structure of the neural network in the <font color=""#ff5500"">forward</font> method, then you'll be using functions like this. Example:<br><br><img src=""719ba9789a03becf35683e65475e988a430e3a1ea3c21744fad66d39a7865516.jpg""><br>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which method from the <font color=""#ff5500"">nn.Module</font> class gets you the learnable params of your model? What exact object does this method return?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which method from the <font color=""#ff5500"">nn.Module</font> class gets you the learnable params of your model? What exact object does this method return?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">nn.Module.parameters</font> will return an <b>iterator </b>of all the parameters for each layer.<br><br>This includes weights and biases, so when you convert the iterator into a list, assuming all layers have biases, the list's length will be twice the number of layers.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>self.conv1 = nn.Conv2d(1, 6, 5)</font><br><br>What are the dimensions of this kernel? What are the number of input / output feature maps? What is the stride?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>self.conv1 = nn.Conv2d(1, 6, 5)</font><br><br>What are the dimensions of this kernel? What are the number of input / output feature maps? What is the stride?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>(conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))</font><br><br>Explanation: the kernel is square, and the stride is 1 (and square) by default.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>conv_layer = nn.Conv2d(1, 6, 5)</font>, which of these are valid inputs (i.e. won't raise an error with <font color='#ff5500'>conv_layer(i)</font> )?<br><br>Of the valid ones, what will be the shape of the output?<ul><li><font color='#ff5500'>i = torch.ones(5, 2, 6, 6)</font></li><li><font color='#ff5500'>i = torch.ones(7, 1, 8, 8)</font></li><li><font color='#ff5500'>i = torch.ones(3, 8, 8)</font></li><li><font color='#ff5500'>i = torch.ones(9, 1, 4, 4)</font></li></ul>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>conv_layer = nn.Conv2d(1, 6, 5)</font>, which of these are valid inputs (i.e. won't raise an error with <font color='#ff5500'>conv_layer(i)</font> )?<br><br>Of the valid ones, what will be the shape of the output?<ul><li><font color='#ff5500'>i = torch.ones(5, 2, 6, 6)</font></li><li><font color='#ff5500'>i = torch.ones(7, 1, 8, 8)</font></li><li><font color='#ff5500'>i = torch.ones(3, 8, 8)</font></li><li><font color='#ff5500'>i = torch.ones(9, 1, 4, 4)</font></li></ul>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The input is interpreted as <font color='#ff5500'>(nSamples, nChannels, Height, Width)</font>.<ul><li>Error: <font color='#ff5500'>nChannels</font> doesn't match the specified number of input channels for <font color='#ff5500'>conv_layer</font> (which is <font color='#ff5500'>1</font>)</li><li>Valid, output is size <font color='#ff5500'>(7, 6, 4, 4)</font> after doing kernel operation</li><li>Error: wrong length</li><li>Error: size of input image is smaller than kernel</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What size of inputs is this neural network expecting? What will it accept?<br><br><img src=""e24051fb46fe343ac515158a6e411860eae1622b8bb804ff458b0a1d7493c61d.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What size of inputs is this neural network expecting? What will it accept?<br><br><img src=""e24051fb46fe343ac515158a6e411860eae1622b8bb804ff458b0a1d7493c61d.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>(n, 1, 32, 32)</font>.<br><br>Explanation:<ul><li>The batch size is the first value; it can be anything</li><li>The first convolutional layer is expecting one input channel</li><li>The image height and width <font color='#ff5500'>x</font> should give you <font color='#ff5500'>5</font> when you apply <font color='#ff5500'>x -&gt; (x-4)/2</font> twice (convolution with <font color='#ff5500'>5x5</font> kernel, then max pooling). Solve, you get <font color='#ff5500'>x=32</font></li></ul>It will accept the above, or anything with the <font color='#ff5500'>32</font> values slightly higher (because these will be cropped in the convolutional and pooling layers). Empirically, <font color='#ff5500'>35</font> seems to be the upper bound for acceptability.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If an input to a CNN has dimensions <font color='#ff5500'>(3, 1, 32, 32)</font>, what does this mean?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If an input to a CNN has dimensions <font color='#ff5500'>(3, 1, 32, 32)</font>, what does this mean?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It means it's a <b>mini batch</b> of size 3, each datapoint in the minibatch is a single image of size 32 x 32.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In a CNN, what's the purpose of a line like <font color=""#ff5500"">x = torch.flatten(x, 1)</font>, and where might it appear in the network?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In a CNN, what's the purpose of a line like <font color=""#ff5500"">x = torch.flatten(x, 1)</font>, and where might it appear in the network?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This flattens all dimensions except the first one, so if <font color=""#ff5500"">x.shape = (n0, ..., nk)</font>, then new shape is <font color=""#ff5500"">(n0, n1*n2*<i>...*</i>nk)</font>.<br><br>This might appear in a CNN after all of the convolutional layers, when the only layers going forwards are fully connected ones. You wouldn't do it before the convolutional layers, because this loses the local structure.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the formula for the shape of <font color='#ff5500'>y</font>?<br><br><div class='exerciseprecontainer'><pre>x = torch.rand((a, b, c, c))<br>conv_layer = nn.Conv2d(b, d, kernel_size=k, stride=s, padding=p)<br>y = conv_layer(x)<br>y.shape</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the formula for the shape of <font color='#ff5500'>y</font>?<br><br><div class='exerciseprecontainer'><pre>x = torch.rand((a, b, c, c))<br>conv_layer = nn.Conv2d(b, d, kernel_size=k, stride=s, padding=p)<br>y = conv_layer(x)<br>y.shape</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>(a, d, x, x)</font>, where <font color='#ff5500'>x</font> is given by the formula:<br><br><img src='b9ea2768c65407edbcf23e7149393a02335193c057ee1bba6f93f0f731b2fb65.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this image?<br><br><img src='8ca083e50bd9ee3c3f58dff790bc5b497f7b4ea718c19b5f21edff5ceee9c21f.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this image?<br><br><img src='8ca083e50bd9ee3c3f58dff790bc5b497f7b4ea718c19b5f21edff5ceee9c21f.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is the architecture of <b>AlexNet</b>, a CNN design which broke records in 2012.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>global average pooling</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>global average pooling</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A technique that is often used near the end of neural networks. If you have a set of feature maps, rather than flattening them and applying a fully connected layer to get outputs, you can add a <b>GAP layer</b>, which averages over each feature map and produces a vector with a single entry per feature map. This prevents <b>overfitting</b> (because without doing this, often the fully connected layers that come at the end would contain most of a network's parameters).<br><br><b>GAP layers</b> are often used in transfer learning. Instead of removing the output layer of a pre-trained CNN and replacing it with a fully connected layer, you replace it with a <b>GAP layer</b>, then feed this output directly into a softmax-activated layer to get outputs.<br><br><img src='512be315a654352d3107c017bcc1f5eb7436a05e3ef99d81598bbb47eda5dfba.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What should be corrected here?<br><br><img src='e5256210f5e21a4188129c0b4e779e8f459461126d39a4f5835748816bf336f6.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What should be corrected here?<br><br><img src='e5256210f5e21a4188129c0b4e779e8f459461126d39a4f5835748816bf336f6.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>Normalize</font> only works for tensors, not for PIL images. You need to move <font color='#ff5500'>ToTensor</font> to the third transform.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the <font color=""#ff5500"">transforms.Normalize</font> step.<br><br><img src=""4735fd554fa3e329361a5f7019fe759706f308354724fda20d195c1b24929209.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the <font color=""#ff5500"">transforms.Normalize</font> step.<br><br><img src=""4735fd554fa3e329361a5f7019fe759706f308354724fda20d195c1b24929209.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	All pre-trained models expect input images to be normalised in the same way:<ul><li>Mini-batches of 3-channel RGB images of shape <font color=""#ff5500"">(3, H, W)</font>, where <font color=""#ff5500"">H, W &gt;= 244</font></li><li>Which are then normalised using <font color=""#ff5500"">mean = [0.485, 0.456, 0.406]</font> and  <font color=""#ff5500"">std = [0.229, 0.224, 0.225]</font></li></ul>The reason for this last point is because this is the mean and std of ImageNet images (which is a dataset containing millions of images, on which the model that you're presumably loading with this code was trained).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If we're dealing with nD data, what will <font color='#ff5500'>transforms.Normalize(mean, std)</font> do, and what should <font color='#ff5500'>mean, std</font> be?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If we're dealing with nD data, what will <font color='#ff5500'>transforms.Normalize(mean, std)</font> do, and what should <font color='#ff5500'>mean, std</font> be?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>mean</font> and <font color='#ff5500'>std</font> should be lists (or 1D arrays), with same length as the 0th dimension of the data (this is the number of input channels). For an RGB image, this would be 3.<br><br>This transform will take the data, and perform the linear transformation that would give it mean 0 and std dev 1, if <font color='#ff5500'>mean</font> and <font color='#ff5500'>std</font> are the original mean and std of the data.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do the <font color='#ff5500'>train</font> and <font color='#ff5500'>eval</font> methods do? Why are they used?<br><br><img src='08192aecd5c8754b1c43670258671635a0b1199de4c3fee10b6c8c6a5057229c.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do the <font color='#ff5500'>train</font> and <font color='#ff5500'>eval</font> methods do? Why are they used?<br><br><img src='08192aecd5c8754b1c43670258671635a0b1199de4c3fee10b6c8c6a5057229c.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They indicate that we are either training or performing evaluation. This is important because it affects the behaviour of <font color='#ff5500'>Dropout</font> and <font color='#ff5500'>BatchNorm</font> (these are disabled during eval).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In this function to fine-tune a model, explain the following lines:<ul><li><font color='#ff5500'>with torch.set_grad_enabled(phase=='train'):</font></li><li><font color='#ff5500'>_, preds = torch.max(outputs, 1)</font></li><li><font color='#ff5500'>running_loss += loss.item() * inputs.size(0)</font></li><li><font color='#ff5500'>running_corrects += torch.sum(preds==labels)</font></li></ul><img src='003f47e0514fedf8652329c72639cf32ae6e79b8da3badb3479b049bc1b27bb2.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In this function to fine-tune a model, explain the following lines:<ul><li><font color='#ff5500'>with torch.set_grad_enabled(phase=='train'):</font></li><li><font color='#ff5500'>_, preds = torch.max(outputs, 1)</font></li><li><font color='#ff5500'>running_loss += loss.item() * inputs.size(0)</font></li><li><font color='#ff5500'>running_corrects += torch.sum(preds==labels)</font></li></ul><img src='003f47e0514fedf8652329c72639cf32ae6e79b8da3badb3479b049bc1b27bb2.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li><font color='#ff5500'>phase=='train'</font> is a boolean; we only want to set grad enabled if we're training (remember that gradients accumulate by default, when we calculate the loss).</li><li>When the <font color='#ff5500'>dim</font> argument is given, <font color='#ff5500'>torch.max</font> returns two outputs: <font color='#ff5500'>values</font> and <font color='#ff5500'>indices</font>. We only care about <font color='#ff5500'>indices</font>, because these are our predictions.</li><li><font color='#ff5500'>loss</font> is divided by the minibatch size (= <font color='#ff5500'>inputs.size(0)</font>), so we need to multiply by this to get total loss</li><li><font color='#ff5500'>preds==labels</font> is a boolean tensor, <font color='#ff5500'>True</font> for all the entries when predictions are correct</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In this function to fine-tune a model, in what line (and under what conditions) will the gradients be calculated?<br><br><img src=""fe0c5c0f5f74c108b3867f57f1732c00d655d14476477a33541364a9a0009a76.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In this function to fine-tune a model, in what line (and under what conditions) will the gradients be calculated?<br><br><img src=""fe0c5c0f5f74c108b3867f57f1732c00d655d14476477a33541364a9a0009a76.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	In the line <font color=""#ff5500"">loss.backward()</font>, and only if <font color=""#ff5500"">phase=='train'</font> is true.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Where to import <b>learning rate schedulers</b> from in PyTorch, and how to use them?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Where to import <b>learning rate schedulers</b> from in PyTorch, and how to use them?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They are imported from <font color='#ff5500'>torch.optim.lr_schedulers</font>. You can use schedulers like <font color='#ff5500'>ExponentialLR</font>, <font color='#ff5500'>StepLR</font>, and <font color='#ff5500'>MultiStepLR</font>.<br><br>You use them the same way optimisers such as <font color='#ff5500'>torch.optim.SGD</font> are used: by calling the <font color='#ff5500'>.step()</font> method after <font color='#ff5500'>loss.backward()</font> has been called.<br><br><img src='ba8215a9b7c4dd4a1b6e6b440660855ddf12e64a67a0fb8e83c670f3e972a440.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color=""#ff5500"">ExponentialLR</font> and <font color=""#ff5500"">StepLR</font> ? Where are they imported from?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color=""#ff5500"">ExponentialLR</font> and <font color=""#ff5500"">StepLR</font> ? Where are they imported from?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They are both imported from <font color=""#ff5500"">torch.optim.lr_scheduler</font>.<br><br><font color=""#ff5500"">ExponentialLR</font> takes an optimizer plus the parameter <font color=""#ff5500"">gamma</font>; it multiplies the learning rate by <font color=""#ff5500"">gamma</font> at each step.<br><br><font color=""#ff5500"">StepLR</font> takes the additional parameter <font color=""#ff5500"">step_size</font>; it only performs the multiplication when <font color=""#ff5500"">step_no % step_size == 0</font> (so setting <font color=""#ff5500"">step_size = 1</font> means they will be the same).<br><br><img src=""9fc967a32b25c5845c1c74713bec847bd4dba0b3cf1365374ffeb480e501874e.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is likely to go wrong with this code (i.e. why won't it produce the output shown below).<br><br><img src=""78bbb3de35e2046f00b05149141d995f7ec0c96fc1e62d7304d82f1ae6ede5e5.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is likely to go wrong with this code (i.e. why won't it produce the output shown below).<br><br><img src=""78bbb3de35e2046f00b05149141d995f7ec0c96fc1e62d7304d82f1ae6ede5e5.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	In this context, <font color=""#ff5500"">device</font> probably refers to the <b>GPU</b>, e.g. <font color=""#ff5500"">device = torch.device(""cuda:0"" if torch.cuda.is_available() else ""cpu"")</font>&nbsp;(we can infer this because we moved them to the device before running them on the model).<br><br>So we've moved them to the GPU for faster computation, but we haven't moved them back, which is necessary for plotting them (because they need to be stored in cpu memory). We could solve this by using <font color=""#ff5500"">inputs.cpu()</font> in the plot function, rather than just <font color=""#ff5500"">inputs</font>.<br><br>Note - in this case, the exact error would be as shown below, because the <font color=""#ff5500"">get_fig</font> function which I wrote involves converting a tensor to a numpy array.<br><br><img src=""0a2b174355d0a093ef9b4ecb684510735b50827032707e083b53c990288b7476.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color=""#ff5500"">nn.AdaptiveMaxPool2d</font> and <font color=""#ff5500"">nn.MaxPool2d</font>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color=""#ff5500"">nn.AdaptiveMaxPool2d</font> and <font color=""#ff5500"">nn.MaxPool2d</font>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">MaxPool2d</font> has parameters <font color=""#ff5500"">kernel_size</font>, <font color=""#ff5500"">stride</font>, and <font color=""#ff5500"">padding</font>. In other words, you have to precisely specify the attributes of the pooling square. If you change your hyperparameters, then these attributes have to change.<br><br><font color=""#ff5500"">AdaptiveMaxPool2d</font> only has parameter <font color=""#ff5500"">output_size</font>. Other attributes are automatically calculated (I think to make sure no pixel is double-counted, while minimising the number of pixels that aren't counted):<br><br><img src=""a714d1cf04c32af1492fccf49bc6bf69a936620fc39a73cc73f7c1ac329fd1cd.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which *class* is this the docstring of? Where is it imported from?<br><br><img src=""99c8d6545e8d1c21244fd4e2a713834e111b0447853c97da1a8a141e3f30ce11.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which *class* is this the docstring of? Where is it imported from?<br><br><img src=""99c8d6545e8d1c21244fd4e2a713834e111b0447853c97da1a8a141e3f30ce11.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>torch.optim.lr_scheduler.StepLR</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of neural network is this?<br><br><img src='75ce28ca7abffd6691e00d32fc4a8579dc0bd4c920f8793c80f553d9ce7e4b58.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of neural network is this?<br><br><img src='75ce28ca7abffd6691e00d32fc4a8579dc0bd4c920f8793c80f553d9ce7e4b58.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is the canonical form of a <b>residual neural network</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>ResNet</b>, and why are they used?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>ResNet</b>, and why are they used?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>ResNet</b> stands for <b>residual neural network</b>. They utilise ""skip connections"" or ""shortcuts"", to jump over layers. The canonical form of a residual neural network is:<br><br><img src=""75ce28ca7abffd6691e00d32fc4a8579dc0bd4c920f8793c80f553d9ce7e4b58.jpg""><br><br>This is usually implemented with non-linearities (e.g. ReLU) and batch normalisation.<br><br><b>ResNet</b>&nbsp;allows adding many more layers without having the porblem of <b>vanishing gradients</b>, among others.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>batch normalisation</b>? What is the name given to the problem it addresses, in the paper which introduced the term?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>batch normalisation</b>? What is the name given to the problem it addresses, in the paper which introduced the term?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The 2015 paper which introduced the term describes the problem of <b>internal covariate shift</b>: the change in distribution of inputs to layers in the network (e.g. making them very small).<br><br>We normalise the data after each level, over the batch (but not over features). For instance, if <font color=""#ff5500"">X.shape = (batch_size, num_input_features, height, width)</font>, then there will be <font color=""#ff5500"">num_input_features</font> used for the normalisation: one for each input feature over the entire batch.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which technique can <b>batch normalisation</b> be used in place of, and why should both not be used at the same time?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which technique can <b>batch normalisation</b> be used in place of, and why should both not be used at the same time?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Batch normalisation can replace <b>dropout</b> (since it offers some regularisation effect, reducing generalisation error).<br><br>The shouldn't both be used because the normalisation statistics might become noisy, given the random dropping out of nodes from this layer.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is some code to update weights based on backpropagation.<br><br><div class=""exerciseprecontainer""><pre>with torch.no_grad():<br>    weights -= weights.grad * lr<br>    bias -= bias.grad * lr<br>    weights.grad.zero_()<br>    bias.grad.zero_()</pre></div><br>Refactor it, taking advantage of two important methods of the <font color=""#ff5500"">torch.nn.Module</font> library.<br><br><div class=""exerciseprecontainer""><pre>with torch.no_grad():<br>    for p in model.<input maxlength=""12"" name=""parameters()_62343977"" style=""width: 12ch;"">: p -= p.grad * lr<br>    model.<input maxlength=""11"" name=""zero_grad()_95267376"" style=""width: 11ch;""></pre></div><br>Then, refeactor, using the <font color=""#ff5500"">torch.optim</font>&nbsp;library.<br><br><div class=""exerciseprecontainer""><pre>opt = optim.SGD(<input maxlength=""18"" name=""model.parameters()_02598817"" style=""width: 18ch;"">, lr=lr)<br><input maxlength=""10"" name=""opt.step()_93431958"" style=""width: 10ch;""><br><input maxlength=""15"" name=""opt.zero_grad()_01682374"" style=""width: 15ch;""></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is some code to update weights based on backpropagation.<br><br><div class=""exerciseprecontainer""><pre>with torch.no_grad():<br>    weights -= weights.grad * lr<br>    bias -= bias.grad * lr<br>    weights.grad.zero_()<br>    bias.grad.zero_()</pre></div><br>Refactor it, taking advantage of two important methods of the <font color=""#ff5500"">torch.nn.Module</font> library.<br><br><div class=""exerciseprecontainer""><pre>with torch.no_grad():<br>    for p in model.<input maxlength=""12"" name=""parameters()_62343977"" style=""width: 12ch;"">: p -= p.grad * lr<br>    model.<input maxlength=""11"" name=""zero_grad()_95267376"" style=""width: 11ch;""></pre></div><br>Then, refeactor, using the <font color=""#ff5500"">torch.optim</font>&nbsp;library.<br><br><div class=""exerciseprecontainer""><pre>opt = optim.SGD(<input maxlength=""18"" name=""model.parameters()_02598817"" style=""width: 18ch;"">, lr=lr)<br><input maxlength=""10"" name=""opt.step()_93431958"" style=""width: 10ch;""><br><input maxlength=""15"" name=""opt.zero_grad()_01682374"" style=""width: 15ch;""></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this neural network function, using:<ul><li>a function that performs preprocessing</li><li>a convolutional layer that applies a 3x3 kernel with stride 2, and padded on all sides by one pixel</li></ul><div class=""exerciseprecontainer""><pre>class NeuralNetwork(nn.Module):<br>    def __init__(self, func):<br>        super().__init__()<br>        self.func = func<br><br>    def forward(self, x):<br>        return self.func(x)<br><br>def preprocess(x):<br>    return x.view(-1, 1, 28, 28)<br><br>model = nn.Sequential(<br>    <input maxlength=""18"" name=""Lambda(preprocess)_75391869"" style=""width: 18ch;"">,<br>    <input maxlength=""9"" name=""nn.Conv2d_32118745"" style=""width: 9ch;"">(1, 16, <input maxlength=""11"" name=""kernel_size_81659186"" style=""width: 11ch;"">=3, <input maxlength=""6"" name=""stride_36902636"" style=""width: 6ch;"">=2, <input maxlength=""7"" name=""padding_13282914"" style=""width: 7ch;"">=1),<br>    ...<br>)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this neural network function, using:<ul><li>a function that performs preprocessing</li><li>a convolutional layer that applies a 3x3 kernel with stride 2, and padded on all sides by one pixel</li></ul><div class=""exerciseprecontainer""><pre>class NeuralNetwork(nn.Module):<br>    def __init__(self, func):<br>        super().__init__()<br>        self.func = func<br><br>    def forward(self, x):<br>        return self.func(x)<br><br>def preprocess(x):<br>    return x.view(-1, 1, 28, 28)<br><br>model = nn.Sequential(<br>    <input maxlength=""18"" name=""Lambda(preprocess)_75391869"" style=""width: 18ch;"">,<br>    <input maxlength=""9"" name=""nn.Conv2d_32118745"" style=""width: 9ch;"">(1, 16, <input maxlength=""11"" name=""kernel_size_81659186"" style=""width: 11ch;"">=3, <input maxlength=""6"" name=""stride_36902636"" style=""width: 6ch;"">=2, <input maxlength=""7"" name=""padding_13282914"" style=""width: 7ch;"">=1),<br>    ...<br>)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will give the same results as <font color='#ff5500'>t.shape[0]</font>, for a tensor <font color='#ff5500'>t</font> ?<br><br><div class='exerciseprecontainer'><pre><input maxlength='9' name='t.size(0)_60089729' style='width: 9ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will give the same results as <font color='#ff5500'>t.shape[0]</font>, for a tensor <font color='#ff5500'>t</font> ?<br><br><div class='exerciseprecontainer'><pre><input maxlength='9' name='t.size(0)_60089729' style='width: 9ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which transform will flip an image horizontally with probability \(p\) ?<br><br><div class=""exerciseprecontainer""><pre>transforms.<input maxlength=""20"" name=""RandomHorizontalFlip_43023931"" style=""width: 20ch;"">(p)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which transform will flip an image horizontally with probability \(p\) ?<br><br><div class=""exerciseprecontainer""><pre>transforms.<input maxlength=""20"" name=""RandomHorizontalFlip_43023931"" style=""width: 20ch;"">(p)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which transform will randomly crop an image to a square of length \(L\) ?<br><br><div class='exerciseprecontainer'><pre>transforms.<input maxlength='17' name='RandomResizedCrop_67290510' style='width: 17ch;'>(L)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which transform will randomly crop an image to a square of length \(L\) ?<br><br><div class='exerciseprecontainer'><pre>transforms.<input maxlength='17' name='RandomResizedCrop_67290510' style='width: 17ch;'>(L)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>t1 = transforms.<input maxlength=""7"" name=""Compose_06889480"" style=""width: 7ch;"">([<br>        transforms.<input maxlength=""17"" name=""RandomResizedCrop_67290510"" style=""width: 17ch;"">(224),<br>        transforms.<input maxlength=""20"" name=""RandomHorizontalFlip_43023931"" style=""width: 20ch;"">(),<br>])<br><br>t2 = transforms.<input maxlength=""7"" name=""Compose_21928360"" style=""width: 7ch;"">([<br>        transforms.<input maxlength=""8"" name=""ToTensor_86198519"" style=""width: 8ch;"">(),<br>        transforms.<input maxlength=""9"" name=""Normalize_61301880"" style=""width: 9ch;"">([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])<br>])</pre></div><br><img src=""9991f7eccc39590396fda6af4cd5643687901d42f61c54e68e6e4854d8c745e3.jpg""><img src=""0cfe9569de401c2bb9d4e96261a703d65f0504e7e34b6a7c8c66a6fb59d01a3d.jpg""><br><img src=""78aed0241e9209b7c7ae149d58ca85bfb1773d5f6d9f3c45e37e2047dcabbf18.jpg"">
	<br>

	
		<br>
		<div id=""hint"" class=""hidden"">
			<p class=""trigger"">[ click to show hint ]</p>
			<p class=""payload"">resized</p>
		</div>
	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>t1 = transforms.<input maxlength=""7"" name=""Compose_06889480"" style=""width: 7ch;"">([<br>        transforms.<input maxlength=""17"" name=""RandomResizedCrop_67290510"" style=""width: 17ch;"">(224),<br>        transforms.<input maxlength=""20"" name=""RandomHorizontalFlip_43023931"" style=""width: 20ch;"">(),<br>])<br><br>t2 = transforms.<input maxlength=""7"" name=""Compose_21928360"" style=""width: 7ch;"">([<br>        transforms.<input maxlength=""8"" name=""ToTensor_86198519"" style=""width: 8ch;"">(),<br>        transforms.<input maxlength=""9"" name=""Normalize_61301880"" style=""width: 9ch;"">([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])<br>])</pre></div><br><img src=""9991f7eccc39590396fda6af4cd5643687901d42f61c54e68e6e4854d8c745e3.jpg""><img src=""0cfe9569de401c2bb9d4e96261a703d65f0504e7e34b6a7c8c66a6fb59d01a3d.jpg""><br><img src=""78aed0241e9209b7c7ae149d58ca85bfb1773d5f6d9f3c45e37e2047dcabbf18.jpg"">
	<br>

	
		<br>
		<div id=""hint"" class=""shown"">
			<p class=""payload"">resized</p>
		</div>
	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>from torch.<input maxlength='10' name='utils.data_87508575' style='width: 10ch;'> import DataLoader<br><br>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import datasets, transforms<br><br>mean = np.array([0.485, 0.456, 0.406])<br>std = np.array([0.229, 0.224, 0.225])<br><br>data_transforms = {<br>    'train': transforms.Compose([<br>        transforms.RandomResizedCrop(224),<br>        transforms.RandomHorizontalFlip(),<br>        transforms.ToTensor(),<br>        transforms.<input maxlength='9' name='Normalize_61301880' style='width: 9ch;'>(mean, std)<br>    ]),<br>    'val': transforms.Compose([<br>        transforms.Resize(256),<br>        transforms.CenterCrop(224),<br>        transforms.ToTensor(),<br>        transforms.<input maxlength='9' name='Normalize_66650342' style='width: 9ch;'>(mean, std)<br>    ]),<br>}<br><br>image_datasets = {name: datasets.<input maxlength='11' name='ImageFolder_19528679' style='width: 11ch;'>(Path('data/hymenoptera_data') / name, transform) for name, transform in data_transforms.items()}<br>dataloaders = {name: DataLoader(dataset, batch_size=4, shuffle=True) for name, dataset in image_datasets.items()}<br>class_names = image_datasets['train'].<input maxlength='7' name='classes_41703129' style='width: 7ch;'><br><br>def get_fig(inp, titles):<br>    fig = make_subplots(rows=1, cols=4, subplot_titles=titles, horizontal_spacing=0.01)<br>    for i in range(4):<br>        img = inp[i].numpy()<br>        img = std.reshape((3,1,1)) * img + mean[:,None,None]<br>        img = (255 * np.clip(np.moveaxis(img, 0, -1), 0, 1)).astype(int)<br>        fig.add_trace(go.Image(<input maxlength='5' name='z=img_96288304' style='width: 5ch;'>), row=1, col=i+1)<br>    fig.update_xaxes(<input maxlength='7' name='visible_16910191' style='width: 7ch;'>=False); fig.update_yaxes(<input maxlength='7' name='visible_06911162' style='width: 7ch;'>=False)<br>    fig.update_layout(width=800, height=300, margin=dict(l=20, r=20, b=20, t=50))<br>    return fig<br><br>inputs, classes = next(iter(dataloaders['train']))<br>titles = [class_names[class_no] for class_no in classes]</pre></div><br><img src='3f82d278274d3cc299530c22c1d8765e9d14f68e3e0bd60b64289f36916c69a0.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>from torch.<input maxlength='10' name='utils.data_87508575' style='width: 10ch;'> import DataLoader<br><br>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import datasets, transforms<br><br>mean = np.array([0.485, 0.456, 0.406])<br>std = np.array([0.229, 0.224, 0.225])<br><br>data_transforms = {<br>    'train': transforms.Compose([<br>        transforms.RandomResizedCrop(224),<br>        transforms.RandomHorizontalFlip(),<br>        transforms.ToTensor(),<br>        transforms.<input maxlength='9' name='Normalize_61301880' style='width: 9ch;'>(mean, std)<br>    ]),<br>    'val': transforms.Compose([<br>        transforms.Resize(256),<br>        transforms.CenterCrop(224),<br>        transforms.ToTensor(),<br>        transforms.<input maxlength='9' name='Normalize_66650342' style='width: 9ch;'>(mean, std)<br>    ]),<br>}<br><br>image_datasets = {name: datasets.<input maxlength='11' name='ImageFolder_19528679' style='width: 11ch;'>(Path('data/hymenoptera_data') / name, transform) for name, transform in data_transforms.items()}<br>dataloaders = {name: DataLoader(dataset, batch_size=4, shuffle=True) for name, dataset in image_datasets.items()}<br>class_names = image_datasets['train'].<input maxlength='7' name='classes_41703129' style='width: 7ch;'><br><br>def get_fig(inp, titles):<br>    fig = make_subplots(rows=1, cols=4, subplot_titles=titles, horizontal_spacing=0.01)<br>    for i in range(4):<br>        img = inp[i].numpy()<br>        img = std.reshape((3,1,1)) * img + mean[:,None,None]<br>        img = (255 * np.clip(np.moveaxis(img, 0, -1), 0, 1)).astype(int)<br>        fig.add_trace(go.Image(<input maxlength='5' name='z=img_96288304' style='width: 5ch;'>), row=1, col=i+1)<br>    fig.update_xaxes(<input maxlength='7' name='visible_16910191' style='width: 7ch;'>=False); fig.update_yaxes(<input maxlength='7' name='visible_06911162' style='width: 7ch;'>=False)<br>    fig.update_layout(width=800, height=300, margin=dict(l=20, r=20, b=20, t=50))<br>    return fig<br><br>inputs, classes = next(iter(dataloaders['train']))<br>titles = [class_names[class_no] for class_no in classes]</pre></div><br><img src='3f82d278274d3cc299530c22c1d8765e9d14f68e3e0bd60b64289f36916c69a0.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Use, tuples, not lists! Don't use spaces.<br><br><div class=""exerciseprecontainer""><pre>from torch.utils.data import <input maxlength=""10"" name=""DataLoader_12554839"" style=""width: 10ch;""><br><br>from torchvision import datasets, transforms<br><br>mean = np.array([0.485, 0.456, 0.406])<br>std = np.array([0.229, 0.224, 0.225])<br><br>data_transforms = {<br>    'train': transforms.Compose([<br>        transforms.RandomResizedCrop(224),<br>        transforms.RandomHorizontalFlip(),<br>        transforms.ToTensor(),<br>        transforms.Normalize(mean, std)<br>    ]),<br>    'val': transforms.Compose([<br>        transforms.Resize(256),<br>        transforms.CenterCrop(224),<br>        transforms.ToTensor(),<br>        transforms.Normalize(mean, std)<br>    ]),<br>}<br><br>image_datasets = {name: datasets.ImageFolder(Path('data/hymenoptera_data') / name, transform) for name, transform in data_transforms.items()}<br>dataloaders = {name: <input maxlength=""10"" name=""DataLoader_59346514"" style=""width: 10ch;"">(dataset, <input maxlength=""5"" name=""batch_79944622"" style=""width: 5ch;"">_size=4, s<input maxlength=""6"" name=""huffle_57479540"" style=""width: 6ch;"">=True) for name, dataset in image_datasets.items()}<br>class_names = image_datasets['train'].classes<br><br>def get_fig(inp, titles):<br>    fig = make_subplots(rows=1, cols=4, subplot_titles=titles, horizontal_spacing=0.01)<br>    for i in range(4):<br>        img = inp[i].numpy()<br>        img = std.reshape(<input maxlength=""7"" name=""(3,1,1)_63712433"" style=""width: 7ch;"">) * img + mean[<input maxlength=""11"" name="":,None,None_70272335"" style=""width: 11ch;"">]<br>        img = (255 * np.<input maxlength=""4"" name=""clip_74559228"" style=""width: 4ch;"">(np.<input maxlength=""8"" name=""moveaxis_74063454"" style=""width: 8ch;"">(img, 0, -1), 0, 1)).astype(int)<br>        fig.add_trace(go.Image(z=img), row=1, col=i+1)<br>    fig.update_xaxes(visible=False); fig.update_yaxes(visible=False)<br>    fig.update_layout(width=800, height=300, margin=dict(l=20, r=20, b=20, t=50))<br>    return fig<br><br>inputs, classes = <input maxlength=""4"" name=""next_63876813"" style=""width: 4ch;"">(<input maxlength=""4"" name=""iter_94050420"" style=""width: 4ch;"">(dataloaders['train']))<br>titles = [class_names[class_no] for class_no in classes]</pre></div><br><img src=""3f82d278274d3cc299530c22c1d8765e9d14f68e3e0bd60b64289f36916c69a0.jpg"">
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Use, tuples, not lists! Don't use spaces.<br><br><div class=""exerciseprecontainer""><pre>from torch.utils.data import <input maxlength=""10"" name=""DataLoader_12554839"" style=""width: 10ch;""><br><br>from torchvision import datasets, transforms<br><br>mean = np.array([0.485, 0.456, 0.406])<br>std = np.array([0.229, 0.224, 0.225])<br><br>data_transforms = {<br>    'train': transforms.Compose([<br>        transforms.RandomResizedCrop(224),<br>        transforms.RandomHorizontalFlip(),<br>        transforms.ToTensor(),<br>        transforms.Normalize(mean, std)<br>    ]),<br>    'val': transforms.Compose([<br>        transforms.Resize(256),<br>        transforms.CenterCrop(224),<br>        transforms.ToTensor(),<br>        transforms.Normalize(mean, std)<br>    ]),<br>}<br><br>image_datasets = {name: datasets.ImageFolder(Path('data/hymenoptera_data') / name, transform) for name, transform in data_transforms.items()}<br>dataloaders = {name: <input maxlength=""10"" name=""DataLoader_59346514"" style=""width: 10ch;"">(dataset, <input maxlength=""5"" name=""batch_79944622"" style=""width: 5ch;"">_size=4, s<input maxlength=""6"" name=""huffle_57479540"" style=""width: 6ch;"">=True) for name, dataset in image_datasets.items()}<br>class_names = image_datasets['train'].classes<br><br>def get_fig(inp, titles):<br>    fig = make_subplots(rows=1, cols=4, subplot_titles=titles, horizontal_spacing=0.01)<br>    for i in range(4):<br>        img = inp[i].numpy()<br>        img = std.reshape(<input maxlength=""7"" name=""(3,1,1)_63712433"" style=""width: 7ch;"">) * img + mean[<input maxlength=""11"" name="":,None,None_70272335"" style=""width: 11ch;"">]<br>        img = (255 * np.<input maxlength=""4"" name=""clip_74559228"" style=""width: 4ch;"">(np.<input maxlength=""8"" name=""moveaxis_74063454"" style=""width: 8ch;"">(img, 0, -1), 0, 1)).astype(int)<br>        fig.add_trace(go.Image(z=img), row=1, col=i+1)<br>    fig.update_xaxes(visible=False); fig.update_yaxes(visible=False)<br>    fig.update_layout(width=800, height=300, margin=dict(l=20, r=20, b=20, t=50))<br>    return fig<br><br>inputs, classes = <input maxlength=""4"" name=""next_63876813"" style=""width: 4ch;"">(<input maxlength=""4"" name=""iter_94050420"" style=""width: 4ch;"">(dataloaders['train']))<br>titles = [class_names[class_no] for class_no in classes]</pre></div><br><img src=""3f82d278274d3cc299530c22c1d8765e9d14f68e3e0bd60b64289f36916c69a0.jpg"">
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This function fine-tunes a pre-existing model.<br><br><div class=""exerciseprecontainer""><pre>def train_model(model, criterion, optimizer, scheduler, num_epochs=25):<br><br>    best_model_wts = copy.<input maxlength=""8"" name=""deepcopy_79068259"" style=""width: 8ch;"">(model.<input maxlength=""10"" name=""state_dict_57806540"" style=""width: 10ch;"">())<br>    best_acc = 0.0<br><br>    for epoch in range(num_epochs):<br>        print(f'Epoch {epoch}/{num_epochs - 1}{""-"" * 10}')<br><br>        # Each epoch has a training and validation phase<br>        for phase in ['train', 'val']:<br><br>            model.train() if phase == ""train"" else model.eval()<br><br>            running_loss = 0.0<br>            running_corrects = 0<br><br>            # Iterate over data<br>            for inputs, labels in dataloaders[phase]:<br>                inputs = inputs.to(device)<br>                labels = labels.to(device)<br><br>                # zero the parameter gradients<br>                <input maxlength=""21"" name=""optimizer.zero_grad()_68747662"" style=""width: 21ch;""><br><br>                # fwd-prop (track history only if in training phase)<br>                with torch.set_grad_enabled(phase=='train'):<br>                    outputs = model(inputs)<br>                    max_activations, preds = torch.max(outputs, 1)<br>                    loss = <input maxlength=""9"" name=""criterion_56728163"" style=""width: 9ch;"">(outputs, labels)<br><br>                    # backprop &amp; optimize (only if in training phase)<br>                    if phase == 'train':<br>                        loss.<input maxlength=""10"" name=""backward()_92041112"" style=""width: 10ch;""><br>                        optimizer.<input maxlength=""6"" name=""step()_76326657"" style=""width: 6ch;""><br><br>                # statistics (need to scale loss according to batch size)<br>                running_loss += loss.item() * inputs.<input maxlength=""7"" name=""size(0)_51981677"" style=""width: 7ch;""><br>                running_corrects += torch.sum(preds<input maxlength=""8"" name=""==labels_39614612"" style=""width: 8ch;"">)<br><br>            if phase == 'train':<br>                scheduler.step()<br><br>            epoch_loss = running_loss / dataset_sizes[phase]<br>            epoch_acc = running_corrects.double() / dataset_sizes[phase]<br><br>            print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')<br><br>            # deep copy the model<br>            if phase == 'val' and epoch_acc &gt; best_acc:<br>                best_acc = epoch_acc<br>                best_model_wts = copy.<input maxlength=""8"" name=""deepcopy_17689890"" style=""width: 8ch;"">(model.<input maxlength=""10"" name=""state_dict_50398678"" style=""width: 10ch;"">())<br><br>    print(f'Training complete, best val acc: {best_acc:4f}')<br><br>    # load best model weights<br>    model.<input maxlength=""15"" name=""load_state_dict_66748319"" style=""width: 15ch;"">(best_model_wts)<br>    return model</pre></div><br><img src=""2703570f990d2426e6ab2c8dd60681fe26e49e1241521abdd02cddcbd202e0c1.jpg"">
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This function fine-tunes a pre-existing model.<br><br><div class=""exerciseprecontainer""><pre>def train_model(model, criterion, optimizer, scheduler, num_epochs=25):<br><br>    best_model_wts = copy.<input maxlength=""8"" name=""deepcopy_79068259"" style=""width: 8ch;"">(model.<input maxlength=""10"" name=""state_dict_57806540"" style=""width: 10ch;"">())<br>    best_acc = 0.0<br><br>    for epoch in range(num_epochs):<br>        print(f'Epoch {epoch}/{num_epochs - 1}{""-"" * 10}')<br><br>        # Each epoch has a training and validation phase<br>        for phase in ['train', 'val']:<br><br>            model.train() if phase == ""train"" else model.eval()<br><br>            running_loss = 0.0<br>            running_corrects = 0<br><br>            # Iterate over data<br>            for inputs, labels in dataloaders[phase]:<br>                inputs = inputs.to(device)<br>                labels = labels.to(device)<br><br>                # zero the parameter gradients<br>                <input maxlength=""21"" name=""optimizer.zero_grad()_68747662"" style=""width: 21ch;""><br><br>                # fwd-prop (track history only if in training phase)<br>                with torch.set_grad_enabled(phase=='train'):<br>                    outputs = model(inputs)<br>                    max_activations, preds = torch.max(outputs, 1)<br>                    loss = <input maxlength=""9"" name=""criterion_56728163"" style=""width: 9ch;"">(outputs, labels)<br><br>                    # backprop &amp; optimize (only if in training phase)<br>                    if phase == 'train':<br>                        loss.<input maxlength=""10"" name=""backward()_92041112"" style=""width: 10ch;""><br>                        optimizer.<input maxlength=""6"" name=""step()_76326657"" style=""width: 6ch;""><br><br>                # statistics (need to scale loss according to batch size)<br>                running_loss += loss.item() * inputs.<input maxlength=""7"" name=""size(0)_51981677"" style=""width: 7ch;""><br>                running_corrects += torch.sum(preds<input maxlength=""8"" name=""==labels_39614612"" style=""width: 8ch;"">)<br><br>            if phase == 'train':<br>                scheduler.step()<br><br>            epoch_loss = running_loss / dataset_sizes[phase]<br>            epoch_acc = running_corrects.double() / dataset_sizes[phase]<br><br>            print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')<br><br>            # deep copy the model<br>            if phase == 'val' and epoch_acc &gt; best_acc:<br>                best_acc = epoch_acc<br>                best_model_wts = copy.<input maxlength=""8"" name=""deepcopy_17689890"" style=""width: 8ch;"">(model.<input maxlength=""10"" name=""state_dict_50398678"" style=""width: 10ch;"">())<br><br>    print(f'Training complete, best val acc: {best_acc:4f}')<br><br>    # load best model weights<br>    model.<input maxlength=""15"" name=""load_state_dict_66748319"" style=""width: 15ch;"">(best_model_wts)<br>    return model</pre></div><br><img src=""2703570f990d2426e6ab2c8dd60681fe26e49e1241521abdd02cddcbd202e0c1.jpg"">
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	We are trying to fine-tune ResNet to classify between 2 different image classes.<br><br><img src='bd6851023be3c04dbc2b7a61ee4bdce642a5cc06bf28db20802e8be7c79152e2.jpg'><br><br><div class='exerciseprecontainer'><pre>num_ftrs = model_ft.<input maxlength='2' name='fc_05378006' style='width: 2ch;'>.<input maxlength='11' name='in_features_04332306' style='width: 11ch;'><br>model_ft.<input maxlength='2' name='fc_10791959' style='width: 2ch;'> = nn.Linear(num_ftrs, 2)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	We are trying to fine-tune ResNet to classify between 2 different image classes.<br><br><img src='bd6851023be3c04dbc2b7a61ee4bdce642a5cc06bf28db20802e8be7c79152e2.jpg'><br><br><div class='exerciseprecontainer'><pre>num_ftrs = model_ft.<input maxlength='2' name='fc_05378006' style='width: 2ch;'>.<input maxlength='11' name='in_features_04332306' style='width: 11ch;'><br>model_ft.<input maxlength='2' name='fc_10791959' style='width: 2ch;'> = nn.Linear(num_ftrs, 2)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	We are trying to fine-tune the 18-layer deep ResNet model to classify between 2 different image classes.<br><br><div class='exerciseprecontainer'><pre>from torch import optim<br>from torchvision import datasets, transforms, models<br><br>model_ft = models.<input maxlength='8' name='resnet18_80691308' style='width: 8ch;'>(<input maxlength='10' name='pretrained_87488879' style='width: 10ch;'>=True)<br>num_ftrs = model_ft.fc.in_features<br><br># Here the size of each output sample is set to 2.<br># Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).<br>model_ft.fc = nn.Linear(num_ftrs, 2)<br><br>model_ft = model_ft.to(device)<br><br># Our criterion is cross-entropy<br>criterion = nn.<input maxlength='16' name='CrossEntropyLoss_17268953' style='width: 16ch;'>()<br><br># Observe that all parameters are being optimized<br>optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)<br><br># Decay LR by a factor of 0.1 every 7 epochs<br>exp_lr_scheduler = optim.lr_scheduler.<input maxlength='6' name='StepLR_58261639' style='width: 6ch;'>(optimizer_ft, <input maxlength='9' name='step_size_32735876' style='width: 9ch;'>=7, <input maxlength='5' name='gamma_26811315' style='width: 5ch;'>=0.1)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	We are trying to fine-tune the 18-layer deep ResNet model to classify between 2 different image classes.<br><br><div class='exerciseprecontainer'><pre>from torch import optim<br>from torchvision import datasets, transforms, models<br><br>model_ft = models.<input maxlength='8' name='resnet18_80691308' style='width: 8ch;'>(<input maxlength='10' name='pretrained_87488879' style='width: 10ch;'>=True)<br>num_ftrs = model_ft.fc.in_features<br><br># Here the size of each output sample is set to 2.<br># Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).<br>model_ft.fc = nn.Linear(num_ftrs, 2)<br><br>model_ft = model_ft.to(device)<br><br># Our criterion is cross-entropy<br>criterion = nn.<input maxlength='16' name='CrossEntropyLoss_17268953' style='width: 16ch;'>()<br><br># Observe that all parameters are being optimized<br>optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)<br><br># Decay LR by a factor of 0.1 every 7 epochs<br>exp_lr_scheduler = optim.lr_scheduler.<input maxlength='6' name='StepLR_58261639' style='width: 6ch;'>(optimizer_ft, <input maxlength='9' name='step_size_32735876' style='width: 9ch;'>=7, <input maxlength='5' name='gamma_26811315' style='width: 5ch;'>=0.1)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>m = nn.<input maxlength='8' name='Adaptive_22614771' style='width: 8ch;'>MaxPool2d(<input maxlength='5' name='(5,7)_33741054' style='width: 5ch;'>)<br>input_ = torch.randn(1, 64, 8, 9)<br>output_ = m(input_)<br><br>&gt;&gt;&gt; output_.shape<br>torch.Size([1, 64, 5, 7])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>m = nn.<input maxlength='8' name='Adaptive_22614771' style='width: 8ch;'>MaxPool2d(<input maxlength='5' name='(5,7)_33741054' style='width: 5ch;'>)<br>input_ = torch.randn(1, 64, 8, 9)<br>output_ = m(input_)<br><br>&gt;&gt;&gt; output_.shape<br>torch.Size([1, 64, 5, 7])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>from torch import <input maxlength=""5"" name=""optim_02570727"" style=""width: 5ch;""><br><br># create an optimiser using stochastic gradient descent<br>optimizer = <input maxlength=""9"" name=""optim.SGD_44037852"" style=""width: 9ch;"">(model.<input maxlength=""10"" name=""parameters_06927658"" style=""width: 10ch;"">(), lr=0.001, momentum=0.9)<br><br># create a learning rate scheduler that decays the rate by a factor of 0.1 every 7 epochs<br>exp_lr_scheduler = <input maxlength=""18"" name=""optim.lr_scheduler_12950204"" style=""width: 18ch;"">.<input maxlength=""6"" name=""StepLR_58261639"" style=""width: 6ch;"">(optimizer, <input maxlength=""9"" name=""step_size_32735876"" style=""width: 9ch;"">=7, <input maxlength=""5"" name=""gamma_26811315"" style=""width: 5ch;"">=0.1)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>from torch import <input maxlength=""5"" name=""optim_02570727"" style=""width: 5ch;""><br><br># create an optimiser using stochastic gradient descent<br>optimizer = <input maxlength=""9"" name=""optim.SGD_44037852"" style=""width: 9ch;"">(model.<input maxlength=""10"" name=""parameters_06927658"" style=""width: 10ch;"">(), lr=0.001, momentum=0.9)<br><br># create a learning rate scheduler that decays the rate by a factor of 0.1 every 7 epochs<br>exp_lr_scheduler = <input maxlength=""18"" name=""optim.lr_scheduler_12950204"" style=""width: 18ch;"">.<input maxlength=""6"" name=""StepLR_58261639"" style=""width: 6ch;"">(optimizer, <input maxlength=""9"" name=""step_size_32735876"" style=""width: 9ch;"">=7, <input maxlength=""5"" name=""gamma_26811315"" style=""width: 5ch;"">=0.1)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import a residual neural network with 18 layers.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import <input maxlength='6' name='models_28761405' style='width: 6ch;'><br><br>model_ft = <input maxlength='6' name='models_97630595' style='width: 6ch;'>.<input maxlength='8' name='resnet18_80691308' style='width: 8ch;'>(pretrained=True)</pre></div><br><img src='ce42b5d72d8a0ea021f2e28aacc0729b0837ea3a08c7b79b1f660285523e295c.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import a residual neural network with 18 layers.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import <input maxlength='6' name='models_28761405' style='width: 6ch;'><br><br>model_ft = <input maxlength='6' name='models_97630595' style='width: 6ch;'>.<input maxlength='8' name='resnet18_80691308' style='width: 8ch;'>(pretrained=True)</pre></div><br><img src='ce42b5d72d8a0ea021f2e28aacc0729b0837ea3a08c7b79b1f660285523e295c.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code to fine-tune <font color='#ff5500'>resnet18</font>, by doing the following:<ul><li>Changing the final layer from fully-connected with 1000 output features to fully-connected with only 2 output features</li><li>Creating an optimiser which only tunes this final layer of weights</li></ul><div class='exerciseprecontainer'><pre>from torch import nn, optim<br>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import models<br><br>model_conv = models.resnet18(<input maxlength='10' name='pretrained_87488879' style='width: 10ch;'>=True)<br><br>for param in model_conv.parameters():<br>    param.<input maxlength='13' name='requires_grad_48788261' style='width: 13ch;'> = False<br><br>num_ftrs = model_conv.<input maxlength='2' name='fc_05378006' style='width: 2ch;'>.<input maxlength='11' name='in_features_04332306' style='width: 11ch;'><br>model_conv.<input maxlength='2' name='fc_10791959' style='width: 2ch;'> = nn.Linear(num_ftrs, 2)<br><br>model_conv = model_conv.<input maxlength='2' name='to_54276012' style='width: 2ch;'>(device)<br><br>criterion = nn.CrossEntropyLoss()<br><br>optimizer_conv = optim.SGD(<input maxlength='14' name='model_conv.fc._04533304' style='width: 14ch;'>parameters(), lr=0.001, momentum=0.9)<br><br>exp_lr_scheduler = optim.lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code to fine-tune <font color='#ff5500'>resnet18</font>, by doing the following:<ul><li>Changing the final layer from fully-connected with 1000 output features to fully-connected with only 2 output features</li><li>Creating an optimiser which only tunes this final layer of weights</li></ul><div class='exerciseprecontainer'><pre>from torch import nn, optim<br>from <input maxlength='11' name='torchvision_13536374' style='width: 11ch;'> import models<br><br>model_conv = models.resnet18(<input maxlength='10' name='pretrained_87488879' style='width: 10ch;'>=True)<br><br>for param in model_conv.parameters():<br>    param.<input maxlength='13' name='requires_grad_48788261' style='width: 13ch;'> = False<br><br>num_ftrs = model_conv.<input maxlength='2' name='fc_05378006' style='width: 2ch;'>.<input maxlength='11' name='in_features_04332306' style='width: 11ch;'><br>model_conv.<input maxlength='2' name='fc_10791959' style='width: 2ch;'> = nn.Linear(num_ftrs, 2)<br><br>model_conv = model_conv.<input maxlength='2' name='to_54276012' style='width: 2ch;'>(device)<br><br>criterion = nn.CrossEntropyLoss()<br><br>optimizer_conv = optim.SGD(<input maxlength='14' name='model_conv.fc._04533304' style='width: 14ch;'>parameters(), lr=0.001, momentum=0.9)<br><br>exp_lr_scheduler = optim.lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which torch function does the same thing as this numpy function?<br><br><img src='8eff0b64f26e8a5d2ae2c2ca5d3a1e96fb41e90f729a768ad02ed2c1bd71c7a6.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which torch function does the same thing as this numpy function?<br><br><img src='8eff0b64f26e8a5d2ae2c2ca5d3a1e96fb41e90f729a768ad02ed2c1bd71c7a6.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">torch.clamp</font><br><br><img src=""495e8778c04046bba324e141d8c253979a0d24733cb2dbce58ea1e4c7f452783.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which method creates a copy of an array removed from the computational graph, so gradients won't be calculated?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which method creates a copy of an array removed from the computational graph, so gradients won't be calculated?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">detach()</font>. Examples of use in a function to find and store adversarial examples:<br><br><img src=""9ecb1b70cb3713af69b80210c2b2f0fd3868460058a36cdfef148cb2cdb4029b.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the code below (which works on MNIST data), explain each step of the highlighted line.<br><br><img src='e58c901925a49b1f8894255af06da0d4abf1cd3909027daaa494e64e031a1363.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the code below (which works on MNIST data), explain each step of the highlighted line.<br><br><img src='e58c901925a49b1f8894255af06da0d4abf1cd3909027daaa494e64e031a1363.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">squeeze</font> changes it from shape <font color=""#ff5500"">(1, 1, 28, 28)</font> (the first 2 digits are batch number, and number of features) to <font color=""#ff5500"">(28, 28)</font>.<br><br><font color=""#ff5500"">detach</font> creates a copy of the tensor, detached from the current computational graph, which will never require gradients.<br><br><font color=""#ff5500"">cpu</font> moves the tensor from the GPU to CPU (necessary for the next step).<br><br><font color=""#ff5500"">numpy</font> changes it to a numpy array.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the name of the phenomenon pictured here?<br><br><img src=""820962e77715f174fd143474d02432607e3055a2fcbdab342333602be738a14b.jpg"">&nbsp; &nbsp; &nbsp;&nbsp;<img src=""b8ad9657d689fad0aa497d2ba03f895deb9589fb9baf718cffce4eab08b576a9.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the name of the phenomenon pictured here?<br><br><img src=""820962e77715f174fd143474d02432607e3055a2fcbdab342333602be738a14b.jpg"">&nbsp; &nbsp; &nbsp;&nbsp;<img src=""b8ad9657d689fad0aa497d2ba03f895deb9589fb9baf718cffce4eab08b576a9.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is a type of&nbsp;<b>adversarial attack</b>&nbsp;called a <b>fast gradient sign attack</b>, used on an MNIST classifier.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What was <b>AlexNet</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What was <b>AlexNet</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A CNN architecture for performing image recognition, that broke records in 2012, with an error of 15.3% on the ImageNet Large Scale Visual Recognition Challenge (10.8% below the runner up).<br><br>It was the first major architecture to use consecutive convolutionary layers. It was based on Yann LeCun's 1989 design.<br><br><img src=""7843f30f77c39b97b446be7e961fe93154b2187e7c62cc28d7e608c8d0d8c6de.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>SqueezeNet</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>SqueezeNet</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A CNN architecture released in 2016. It was described as ""AlexNet-level accuracy with 50x fewer parameters and &lt;0.5MB model size"".

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>deep compression</b> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>deep compression</b> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A three-stage pipeline to reduce the storage required by NNs, while preserving accuracy. It involves:<ul><li>Removing redundant connections</li><li>Quantising the weights (turning them into ""effective weights"" - a codebook)</li><li>Huffman encoding to take advantage of the biased distribution of the effective weights</li></ul>It was introduced in a 2015 paper. In 2016, it was successfully applied to the <b>SqueezeNet</b> neural network architecture.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What was the key idea behind the <b>Inception</b> neural network? Why does it have this name?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What was the key idea behind the <b>Inception</b> neural network? Why does it have this name?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The key idea was <b>factorising CNNs</b>, i.e. having filters with multiple sizes operating on the same level. This is because different filter sizes might be appropriate depending on the size of the image in the picture.<br><br><img src=""a7e23e3043e847fdf66da6fca2227c29caeccbbd6bda6ba674b9b15d1c77b8fd.jpg""><br><br>It was named partly after the ""we need to go deeper"" Inception meme (which was featured in the first Inception paper).<br><br><img src=""9fbc3ddb7998eab69c04994dbab0036c01a8fbacf81b2d0915ffcbf1f3d5af81.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why might we use a 1x1 filter in a CNN?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why might we use a 1x1 filter in a CNN?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	To create a <b>linear projection</b> of a stack of <b>feature maps</b>. This acts as <b>channel-wise pooling</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>Fire module</b>, and in which CNN architecture is it notably used?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a <b>Fire module</b>, and in which CNN architecture is it notably used?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It is composed of one <b>squeeze</b> and two <b>expand</b> operations, using 1x1, 1x1 and 3x3 convolutional filters respectively (the last one uses a padding of 1, so the output dimensions are the same). Seem image below for mode detail.<br><br><img src=""paste-e779956393fddfc4a929966dd09364f78b7698bf.jpg"">&nbsp; &nbsp;<img src=""ca47c49822fa362e3c978879161116a756d4c4605ffe6f1b95f2f5ddff9aef35.jpg""><br><br>It is notably used in the <b>SqueezeNet</b> architecture, as a building block.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why does the <b>Inception</b> neural network require more code?<br><br><img src='007df14eee41edf35da37511a3fee2a51b947212362c74b0a2ec873c23ce1242.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why does the <b>Inception</b> neural network require more code?<br><br><img src='007df14eee41edf35da37511a3fee2a51b947212362c74b0a2ec873c23ce1242.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It has a unique NN architecture: two output layers when training (the <b>auxiliary output</b> and the <b>primary output</b>). These both need to be changed when we're fine-tuning a model.<br><br><img src='a7bfdbd906906cbdf78e5049c37272c9ce493784431f5c8441a30300450e4172.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this function probably doing?<br><br><img src='52b3fb8e7c2622ef5ae61ed44697c11fdc54c2f7d4df200f19bd8b232b8626de.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this function probably doing?<br><br><img src='52b3fb8e7c2622ef5ae61ed44697c11fdc54c2f7d4df200f19bd8b232b8626de.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is an exerpt from a function which fine-tunes image classifier models. The code is slightly different for each different architecture.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a = torch.tensor([1, 2, 3])<br>&gt;&gt;&gt; a = a.to(""cuda"")<br>&gt;&gt;&gt; a.<input maxlength='5' name='cpu()_43538672' style='width: 5ch;'>.numpy()<br>array([1, 2, 3], dtype=int64)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a = torch.tensor([1, 2, 3])<br>&gt;&gt;&gt; a = a.to(""cuda"")<br>&gt;&gt;&gt; a.<input maxlength='5' name='cpu()_43538672' style='width: 5ch;'>.numpy()<br>array([1, 2, 3], dtype=int64)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Load this already-saved LeNet model from a file.<br><br><font color=""#ff5500"">Net</font> is a class that inherits from <font color=""#ff5500"">nn.Module</font>.<br><br><div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; model = Net()<br>&gt;&gt;&gt; model.<input maxlength=""15"" name=""load_state_dict_66748319"" style=""width: 15ch;"">(torch.<input maxlength=""4"" name=""load_15251321"" style=""width: 4ch;"">(""data/lenet_mnist_model.pth""))</pre></div><br>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Load this already-saved LeNet model from a file.<br><br><font color=""#ff5500"">Net</font> is a class that inherits from <font color=""#ff5500"">nn.Module</font>.<br><br><div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; model = Net()<br>&gt;&gt;&gt; model.<input maxlength=""15"" name=""load_state_dict_66748319"" style=""width: 15ch;"">(torch.<input maxlength=""4"" name=""load_15251321"" style=""width: 4ch;"">(""data/lenet_mnist_model.pth""))</pre></div><br>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code, for a fast gradient method attack.<br><br><div class=""exerciseprecontainer""><pre>def fgsm_attack(image, epsilon, data_grad):<br><br>    sign_data_grad = data_grad<input maxlength=""7"" name="".sign()_12238069"" style=""width: 7ch;""><br><br>    perturbed_image = image + epsilon * sign_data_grad<br><br>    perturbed_image = torch.<input maxlength=""5"" name=""clamp_10007311"" style=""width: 5ch;"">(perturbed_image, 0, 1)<br><br>    return perturbed_image</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code, for a fast gradient method attack.<br><br><div class=""exerciseprecontainer""><pre>def fgsm_attack(image, epsilon, data_grad):<br><br>    sign_data_grad = data_grad<input maxlength=""7"" name="".sign()_12238069"" style=""width: 7ch;""><br><br>    perturbed_image = image + epsilon * sign_data_grad<br><br>    perturbed_image = torch.<input maxlength=""5"" name=""clamp_10007311"" style=""width: 5ch;"">(perturbed_image, 0, 1)<br><br>    return perturbed_image</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code, which searches for MNIST images that fall prey to fast gradient sign attacks.<br><br><div class=""exerciseprecontainer""><pre>def fgsm_attack(image, epsilon, data_grad):<br>    sign_data_grad = data_grad.sign()<br>    perturbed_image = image + epsilon*sign_data_grad<br>    perturbed_image = torch.clamp(perturbed_image, 0, 1)<br>    return perturbed_image<br><br>def test(model, device, test_loader, epsilon):<br><br>    t0 = time.time()<br>    correct = 0<br>    adv_examples = []<br><br>    for data, target in test_loader:<br><br>        data, target = data.to(device), target.to(device)<br>        data.<input maxlength=""13"" name=""requires_grad_48788261"" style=""width: 13ch;""> = True<br><br>        output = model(data)<br>        init_pred = output.max(1)[1]<br>        if init_pred.item() != target.item(): continue<br><br>        loss = F.nll_loss(output, target)<br>        <input maxlength=""5"" name=""model_95517463"" style=""width: 5ch;"">.zero_grad()<br>        <input maxlength=""4"" name=""loss_28657227"" style=""width: 4ch;"">.backward()<br><br>        perturbed_data = fgsm_attack(<input maxlength=""4"" name=""data_42851083"" style=""width: 4ch;"">, epsilon, <input maxlength=""9"" name=""data.grad_26033475"" style=""width: 9ch;"">)<br>        output = model(perturbed_data)<br><br>        final_pred = output.max(1)[1]<br>        if final_pred.item() == target.item():<br>            correct += 1<br><br>        # Save some adv examples for visualization later<br>        if (len(adv_examples) &lt; 5) and (final_pred.item() != target.item() or epsilon == 0):<br>                adv_ex = perturbed_data.squeeze().<input maxlength=""6"" name=""detach_42647125"" style=""width: 6ch;"">().cpu().<input maxlength=""5"" name=""numpy_82959393"" style=""width: 5ch;"">()<br>                adv_examples.append((init_pred.item(), final_pred.item(), adv_ex))<br><br>    t1 = time.time() - t0<br>    final_acc = correct / len(test_loader)<br>    print(f""Epsilon: {epsilon:.2f}Test Accuracy = {correct} / {len(test_loader)} = {final_acc:.4f}, time = {t1:.2f}s"")<br><br>    return final_acc, adv_examples</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Complete this code, which searches for MNIST images that fall prey to fast gradient sign attacks.<br><br><div class=""exerciseprecontainer""><pre>def fgsm_attack(image, epsilon, data_grad):<br>    sign_data_grad = data_grad.sign()<br>    perturbed_image = image + epsilon*sign_data_grad<br>    perturbed_image = torch.clamp(perturbed_image, 0, 1)<br>    return perturbed_image<br><br>def test(model, device, test_loader, epsilon):<br><br>    t0 = time.time()<br>    correct = 0<br>    adv_examples = []<br><br>    for data, target in test_loader:<br><br>        data, target = data.to(device), target.to(device)<br>        data.<input maxlength=""13"" name=""requires_grad_48788261"" style=""width: 13ch;""> = True<br><br>        output = model(data)<br>        init_pred = output.max(1)[1]<br>        if init_pred.item() != target.item(): continue<br><br>        loss = F.nll_loss(output, target)<br>        <input maxlength=""5"" name=""model_95517463"" style=""width: 5ch;"">.zero_grad()<br>        <input maxlength=""4"" name=""loss_28657227"" style=""width: 4ch;"">.backward()<br><br>        perturbed_data = fgsm_attack(<input maxlength=""4"" name=""data_42851083"" style=""width: 4ch;"">, epsilon, <input maxlength=""9"" name=""data.grad_26033475"" style=""width: 9ch;"">)<br>        output = model(perturbed_data)<br><br>        final_pred = output.max(1)[1]<br>        if final_pred.item() == target.item():<br>            correct += 1<br><br>        # Save some adv examples for visualization later<br>        if (len(adv_examples) &lt; 5) and (final_pred.item() != target.item() or epsilon == 0):<br>                adv_ex = perturbed_data.squeeze().<input maxlength=""6"" name=""detach_42647125"" style=""width: 6ch;"">().cpu().<input maxlength=""5"" name=""numpy_82959393"" style=""width: 5ch;"">()<br>                adv_examples.append((init_pred.item(), final_pred.item(), adv_ex))<br><br>    t1 = time.time() - t0<br>    final_acc = correct / len(test_loader)<br>    print(f""Epsilon: {epsilon:.2f}Test Accuracy = {correct} / {len(test_loader)} = {final_acc:.4f}, time = {t1:.2f}s"")<br><br>    return final_acc, adv_examples</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	An illustration of an adversarial example on MNIST:<br><br><div class='exerciseprecontainer'><pre>print(arr[:5, :5])<br><br>fig = go.Figure(go.<input maxlength='7' name='Heatmap_08741016' style='width: 7ch;'>(z=arr, <input maxlength='10' name='colorscale_84803527' style='width: 10ch;'>=""gray""))<br>fig.update_<input maxlength='6' name='layout_19166513' style='width: 6ch;'>(height=400, width=400, margin=dict.<input maxlength='8' name='fromkeys_78312483' style='width: 8ch;'>(""tblr"", 20))<br>fig.update_x<input maxlength='4' name='axes_73752883' style='width: 4ch;'>(visible=False)<br>fig.update_y<input maxlength='4' name='axes_07647978' style='width: 4ch;'>(visible=False)<br>fig.update_<input maxlength='6' name='traces_04628740' style='width: 6ch;'>(show<input maxlength='5' name='scale_51963184' style='width: 5ch;'>=False)<br>fig.show()</pre></div><br><img src='f941521122b9aeed60c1dd788f8e1b1a34093f06aeaba083088755756d79cb23.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	An illustration of an adversarial example on MNIST:<br><br><div class='exerciseprecontainer'><pre>print(arr[:5, :5])<br><br>fig = go.Figure(go.<input maxlength='7' name='Heatmap_08741016' style='width: 7ch;'>(z=arr, <input maxlength='10' name='colorscale_84803527' style='width: 10ch;'>=""gray""))<br>fig.update_<input maxlength='6' name='layout_19166513' style='width: 6ch;'>(height=400, width=400, margin=dict.<input maxlength='8' name='fromkeys_78312483' style='width: 8ch;'>(""tblr"", 20))<br>fig.update_x<input maxlength='4' name='axes_73752883' style='width: 4ch;'>(visible=False)<br>fig.update_y<input maxlength='4' name='axes_07647978' style='width: 4ch;'>(visible=False)<br>fig.update_<input maxlength='6' name='traces_04628740' style='width: 6ch;'>(show<input maxlength='5' name='scale_51963184' style='width: 5ch;'>=False)<br>fig.show()</pre></div><br><img src='f941521122b9aeed60c1dd788f8e1b1a34093f06aeaba083088755756d79cb23.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'>AlexNet is considered one of the most influential papers published in computer <i>vision</i>, having spurred many more papers published employing <i>CNNs</i> and <i>GPUs</i> to accelerate deep learning. As of 2021, the AlexNet paper has been cited over <i>80,000</i> times according to Google Scholar.<div class='q-desc q-desc-1'>Wikipedia</div></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='quotebox'>AlexNet is considered one of the most influential papers published in computer <i>vision</i>, having spurred many more papers published employing <i>CNNs</i> and <i>GPUs</i> to accelerate deep learning. As of 2021, the AlexNet paper has been cited over <i>80,000</i> times according to Google Scholar.<div class='q-desc q-desc-1'>Wikipedia</div></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to initialise classic image recognition models, for fine-tuning.<br><br><div class=""exerciseprecontainer""><pre>def initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):<br><br>    if model_name == ""resnet"":<br>        model_ft = models.resnet18(pretrained=use_pretrained)<br>        set_grad_requirements(model_ft, feature_extract)<br>        num_ftrs = model_ft.{{fc}}.in_features<br>        model_ft.{{fc}} = nn.Linear(num_ftrs, num_classes)<br>        input_size = <input maxlength=""3"" name=""224_38136188"" style=""width: 3ch;""><br><br>    elif model_name == ""alexnet"":<br>        model_ft = models.alexnet(pretrained=use_pretrained)<br>        set_grad_requirements(model_ft, feature_extract)<br>        num_ftrs = model_ft.<input maxlength=""10"" name=""classifier_33667113"" style=""width: 10ch;"">[6].in_features<br>        model_ft.<input maxlength=""10"" name=""classifier_65599318"" style=""width: 10ch;"">[6] = nn.Linear(num_ftrs, num_classes)<br>        input_size = <input maxlength=""3"" name=""224_37317620"" style=""width: 3ch;""><br><br>    elif model_name == ""inception"":<br>        model_ft = models.inception_v3(pretrained=use_pretrained)<br>        set_grad_requirements(model_ft, feature_extract)<br>        # Handle the auxilary net<br>        num_ftrs_aux = model_ft.AuxLogits.fc.in_features<br>        model_ft.<input maxlength=""9"" name=""AuxLogits_38296163"" style=""width: 9ch;"">.<input maxlength=""2"" name=""fc_05378006"" style=""width: 2ch;""> = nn.Linear(num_ftrs_aux, num_classes)<br>        # Handle the primary net<br>        num_ftrs_primary = model_ft.fc.in_features<br>        model_ft.fc = nn.Linear(num_ftrs_primary, num_classes)<br>        input_size = <input maxlength=""3"" name=""299_81999689"" style=""width: 3ch;""><br><br>    return model_ft, input_size<br><br>def set_grad_requirements(model, feature_extracting):<br>    if feature_extracting:<br>        for param in model.parameters():<br>            param.{{requires_grad}} = False</pre></div>
	<br>

	
		<br>
		<div id=""hint"" class=""hidden"">
			<p class=""trigger"">[ click to show hint ]</p>
			<p class=""payload""><font color=""#ff5500"">AuxL</font>...</p>
		</div>
	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to initialise classic image recognition models, for fine-tuning.<br><br><div class=""exerciseprecontainer""><pre>def initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):<br><br>    if model_name == ""resnet"":<br>        model_ft = models.resnet18(pretrained=use_pretrained)<br>        set_grad_requirements(model_ft, feature_extract)<br>        num_ftrs = model_ft.{{fc}}.in_features<br>        model_ft.{{fc}} = nn.Linear(num_ftrs, num_classes)<br>        input_size = <input maxlength=""3"" name=""224_38136188"" style=""width: 3ch;""><br><br>    elif model_name == ""alexnet"":<br>        model_ft = models.alexnet(pretrained=use_pretrained)<br>        set_grad_requirements(model_ft, feature_extract)<br>        num_ftrs = model_ft.<input maxlength=""10"" name=""classifier_33667113"" style=""width: 10ch;"">[6].in_features<br>        model_ft.<input maxlength=""10"" name=""classifier_65599318"" style=""width: 10ch;"">[6] = nn.Linear(num_ftrs, num_classes)<br>        input_size = <input maxlength=""3"" name=""224_37317620"" style=""width: 3ch;""><br><br>    elif model_name == ""inception"":<br>        model_ft = models.inception_v3(pretrained=use_pretrained)<br>        set_grad_requirements(model_ft, feature_extract)<br>        # Handle the auxilary net<br>        num_ftrs_aux = model_ft.AuxLogits.fc.in_features<br>        model_ft.<input maxlength=""9"" name=""AuxLogits_38296163"" style=""width: 9ch;"">.<input maxlength=""2"" name=""fc_05378006"" style=""width: 2ch;""> = nn.Linear(num_ftrs_aux, num_classes)<br>        # Handle the primary net<br>        num_ftrs_primary = model_ft.fc.in_features<br>        model_ft.fc = nn.Linear(num_ftrs_primary, num_classes)<br>        input_size = <input maxlength=""3"" name=""299_81999689"" style=""width: 3ch;""><br><br>    return model_ft, input_size<br><br>def set_grad_requirements(model, feature_extracting):<br>    if feature_extracting:<br>        for param in model.parameters():<br>            param.{{requires_grad}} = False</pre></div>
	<br>

	
		<br>
		<div id=""hint"" class=""shown"">
			<p class=""payload""><font color=""#ff5500"">AuxL</font>...</p>
		</div>
	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When were <b>GANs</b> and <b>DCGANs</b> invented?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When were <b>GANs</b> and <b>DCGANs</b> invented?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>GANs</b> were first described in 2014, in the paper <b>Generative Adversarial Nets</b>.<br><br><b>DCGANs</b> were first described in 2016, in the paper:<br><br><img src=""5383b4589366df3b8e6daabca86422e0ed6d597ba6993b828a7e4d4f6ab627d5.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this an illustration of?<br><br><img src=""paste-1a24dc34003076d5b7559f734e84553638d718e5.jpg""><br><br><img src=""no_padding_no_strides_transposed.gif"">&nbsp; &nbsp; &nbsp; &nbsp;<img src=""padding_strides_odd_transposed.gif"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this an illustration of?<br><br><img src=""paste-1a24dc34003076d5b7559f734e84553638d718e5.jpg""><br><br><img src=""no_padding_no_strides_transposed.gif"">&nbsp; &nbsp; &nbsp; &nbsp;<img src=""padding_strides_odd_transposed.gif"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is an illustration of different types of <b>transposed convolution animations</b>. These layers are important in constructing an image from a latent vector, with GANs.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between a <b>GAN</b> and a <b>DCGAN</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between a <b>GAN</b> and a <b>DCGAN</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A <b>GAN</b> is the standard design, which consists of a generator \(G\) and discriminator \(D\), and tries to solve the minimax game:<br><br><img src=""92cf8b94a5a487d2c4038432152f7835604b9379d08b864b33d888123ebcbcf0.jpg""><br><br><b>DCGAN</b> stands for <b>Deep Convolutional Generator Adversarial Network</b>. It's a specific GAN architecture which uses convolutional and convolutional-transpose layers in the discriminator &amp; generator respectively.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are <b>convolutional transpose layers</b> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are <b>convolutional transpose layers</b> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Layers which reverse the order of dimensions in the convolution operation matrix. They are used for reconstructing an image from a <b>latent space representation</b>, in <b>computer vision</b>:<br><br><img src=""3e2c99909e48b2d8e97f796958039bb6909aea7030d2b07f9b50537dddf17609.jpg""><br><br>They're also sometimes called <b>deconvolution layers</b>, although this is a misnomer, because deconvolution layers are something different.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this an image of, and what important parts of it aren't explicitly shown?<br><br><img src=""563775472565f4c6385ccc1e91e1509e2cab5813018de67db936c23ca18a5b72.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this an image of, and what important parts of it aren't explicitly shown?<br><br><img src=""563775472565f4c6385ccc1e91e1509e2cab5813018de67db936c23ca18a5b72.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is the generator part of a DCGAN from the paper <b>Unsupervised Representation Learning With Deep Convolutional Generative Adversarial Networks</b>.<br><br>This picture doesn't show the:<br><ul><li><b>batch normalisation layers</b> (which are critical for helping the flow of gradients during training)</li><li><b>activation functions </b>(which are <b>ReLU</b> for all layers except the output layer, which is <b>tanh</b>)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is the architecture of a certain neural network - what is it called?<br><br><img src=""05f7c775f13e426ba9bb6806fa063464f3906ed8a2d288b06db28ed9ae0cc5e7.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is the architecture of a certain neural network - what is it called?<br><br><img src=""05f7c775f13e426ba9bb6806fa063464f3906ed8a2d288b06db28ed9ae0cc5e7.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is the generator from a <b>GAN</b>&nbsp;(the main clue is the convolutional transpose layers).<br><br>To be specific, it's from the <b>DCGAN</b> in the 2016 paper:<br><br><img src=""50e89c58f868c098d9a3a0527278f21f9492f59729b53a7c333af622304f9c55.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does it mean to call <font color=""#ff5500"">nn.ReLU(True)</font> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does it mean to call <font color=""#ff5500"">nn.ReLU(True)</font> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first (and only) argument of <font color=""#ff5500"">nn.ReLU</font> is a boolean, which determines whether the operation is <b><u>inplace</u></b> or not.<br><br>This is <font color=""#ff5500"">False</font> by default. Using <font color=""#ff5500"">True</font> can slightly decrease memory usage.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the last sentence in the screenshot below. How is this accomplished?<br><br><img src='dafd874da1f5a99053b623722e274d97b711d70fc06abc8b5fb704305511ba55.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the last sentence in the screenshot below. How is this accomplished?<br><br><img src='dafd874da1f5a99053b623722e274d97b711d70fc06abc8b5fb704305511ba55.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	\(y_n\) are labels, they are \(1\) for the true data and \(0\) for the simulated data.<br><br>We train one at a time: first with \(y_n=1\) and \(x_n\) as the discriminator's outputs on data drawn from the true distribution, then with \(y_n=0\) and \(x_n\) as the discriminator's outputs on data generated by the generator, from latent vector \(z_n\).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the correspondence between the <font color=""#ff5500"">Conv2d</font> layers and the <font color=""#ff5500"">ConvTranpose2d</font> layers.<br><br><img src=""b1cb7c4fb5748b2123468a30ab8e9d24846d95195252a201a44722166bbac405.jpg""><img src=""8974f86e1e64f42e4ee4a458ec4dee988b8a8fc72c8f14bf169154689a00aadb.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the correspondence between the <font color=""#ff5500"">Conv2d</font> layers and the <font color=""#ff5500"">ConvTranpose2d</font> layers.<br><br><img src=""b1cb7c4fb5748b2123468a30ab8e9d24846d95195252a201a44722166bbac405.jpg""><img src=""8974f86e1e64f42e4ee4a458ec4dee988b8a8fc72c8f14bf169154689a00aadb.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">ConvTranspose2d</font> performs padding so that when <font color=""#ff5500"">kernel_size</font>, <font color=""#ff5500"">stride</font> and <font color=""#ff5500"">padding</font> are the same as for <font color=""#ff5500"">Conv2d</font>, the operation (in terms of shapes of input and output) is equivalent to the inverse of <font color=""#ff5500"">Conv2d</font>.<br><br>So these layers in the <b>generator</b>&nbsp;correspond (in reverse order) to the <font color=""#ff5500"">Conv2d</font> layers in the <b>discriminator</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This neural network was featured in a paper - which paper was this?<br><br><img src=""75e833e847fced3798a0b0dcb46adc15ca9c45748058e284180c01c410b2d173.jpg""><img src=""18bccbe1c1ef18cac7fed01fdf191243acf64a9b5c3385a20a25fd58d3e51b6d.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This neural network was featured in a paper - which paper was this?<br><br><img src=""75e833e847fced3798a0b0dcb46adc15ca9c45748058e284180c01c410b2d173.jpg""><img src=""18bccbe1c1ef18cac7fed01fdf191243acf64a9b5c3385a20a25fd58d3e51b6d.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Unsupervised Representation Learning With Deep Convolutional Generative Adversarial Networks</b>.<br><br>This was the first paper to combine the concept of <b>GANs</b> with (deep)&nbsp;<b>CNNs</b>. It was published in 2016.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the <font color='#ff5500'>apply</font> method do when used on a neural network? What's one example where this is useful?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the <font color='#ff5500'>apply</font> method do when used on a neural network? What's one example where this is useful?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It applies the function (used as the argument of the method) to each submodule.<br><br>This is useful for <b>initialising weights</b>. Example:<br><br><img src=""9dd59754b2ec0943c9d9068700f7135004bde7e24fd41523f37f1cedd84834c9.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this code?<br><br><div class='exerciseprecontainer'><pre>t1 = torch.tensor([1, 2])<br>t2 = torch.tensor([3, 4])<br><br>F.binary_cross_entropy(t1, t2)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the output of this code?<br><br><div class='exerciseprecontainer'><pre>t1 = torch.tensor([1, 2])<br>t2 = torch.tensor([3, 4])<br><br>F.binary_cross_entropy(t1, t2)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>binary_cross_entropy</font> is designed to be used for floats in the <font color='#ff5500'>[0, 1]</font> range.<br><br><img src='b9b790d96f6f1f124848fc8e716cc55ba07f5b5333aefea85cefe19312b83ab3.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<img src=""03090d556a6ff195ac60abdce4a36b7d6dfee389793e4dc332e961034aeed903.jpg""><br><br>What is the difference between the <b>input</b> and the <b>target</b> in the formula for BCE?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<img src=""03090d556a6ff195ac60abdce4a36b7d6dfee389793e4dc332e961034aeed903.jpg""><br><br>What is the difference between the <b>input</b> and the <b>target</b> in the formula for BCE?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Recall the definition of cross-entropy \(H(p, q)\):<br><br>\[\mathrm{E}_p[\ell]=-\mathrm{E}_p\left[\frac{\ln q(x)}{\ln (2)}\right]=-\mathrm{E}_p\left[\log _2 q(x)\right]=-\sum_{x_i} p\left(x_i\right) \log _2 q\left(x_i\right)=-\sum_x p(x) \log _2 q(x)=H(p, q)\]<br>It's the expected codeword length if \(p\) is the target you want to encode, and \(q\) is the distribution you're deriving the code from.<br><br>So the \(input\) is the expression in the log, and the \(target\) is the linear combination.<br><br><div class=""exerciseprecontainer""><pre>input = x<br>target = y<br>F.binary_cross_entropy(input=x, target=y) = sum([y[i]*log(x[i]) + (1-y[i])*log(1-x[i])])</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will this graph look like?<br><br><img src=""7b2a5dcd298c9694f8a8f1bca8f72afa9722bc565e7a22bc657ceb89836b31eb.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will this graph look like?<br><br><img src=""7b2a5dcd298c9694f8a8f1bca8f72afa9722bc565e7a22bc657ceb89836b31eb.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src=""18074de7a3819084a1a0ad9b5499eadfecb32eb0367a2b18b121d530ed0b753c.jpg""><br><br>Explanation: the loss is a linear function of <font color=""#ff5500"">target</font>, it is given by&nbsp;<font color=""#ff5500"">loss = target * log(0.4) + (1 - target * log(0.6)</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will this graph look like?<br><br><img src=""26ab1fb0eff4c08edc5c406c5cfedfddad3202a2bb10b35419cc8eb0dffc443a.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will this graph look like?<br><br><img src=""26ab1fb0eff4c08edc5c406c5cfedfddad3202a2bb10b35419cc8eb0dffc443a.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src=""6b2f4f6626a8e4d261e0184ceb96d46403b47e106b90df34fc93bad19a0003b8.jpg""><br><br>Explanation: the loss is given by <font color=""#ff5500"">loss = 0.4 * log(input) + 0.6 * log(1 - input)</font> so it asymptotes at 0 and 1, and reaches its minimum when <font color=""#ff5500"">input = 0.4</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will this graph look like? (once formatting is added!)<br><br><img src='163cd110851f6aaf7196e276d94e552d9a0c19d0e27686681b1333c5bd41b24a.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will this graph look like? (once formatting is added!)<br><br><img src='163cd110851f6aaf7196e276d94e552d9a0c19d0e27686681b1333c5bd41b24a.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src=""06f1650cf68ec91902c453823e6c67403671b6b95eefa96231e3d7327a2a717d.jpg""><br><br><font color=""#ff5500"">loss = target * log(input) + (1-target) * log(1-input)</font>, each separate graph has its minima when <font color=""#ff5500"">input = target</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the <font color=""#ff5500"">weight</font> and <font color=""#ff5500"">reduction</font> parameters in <font color=""#ff5500"">nn.BCELoss</font>? What are the default values?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the <font color=""#ff5500"">weight</font> and <font color=""#ff5500"">reduction</font> parameters in <font color=""#ff5500"">nn.BCELoss</font>? What are the default values?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They affect the formula in the following ways:<br><br><img src=""158290dc389565ffe4bc540f2e9323c55f52e2e94ed8136ce0e909468edc2e3f.jpg""><br><br>so <font color=""#ff5500"">reduction</font> determines how (or whether) the individual datapoints are aggregated.<br><br>By default <font color=""#ff5500"">weight=None</font>, meaning \(w_n=1\) for all \(n\).<br><br>Note, \(x_n\) are the inputs and \(y_n\) are the targets (usually labels with value zero or one).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain this output.<br><br><img src=""2629ea0682a536fd404b9cf61179f0f3b0937e48bb9feee3644d025eb8f47f6d.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain this output.<br><br><img src=""2629ea0682a536fd404b9cf61179f0f3b0937e48bb9feee3644d025eb8f47f6d.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	\(output = -\sum{y_i \cdot \log(\sigma(x_i))} + (1 - y_i) \cdot \log(1 - \sigma(x_i))\)<br><br>\(\frac{\partial}{\partial{x_i}}(output) = -y_i + \sigma(x_i)\)<br><br>By using <font color=""#ff5500"">reduction=""sum""</font> rather than the default of <font color=""#ff5500"">""mean""</font>, we don't need to multiply by \(n\) first.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the <font color=""#ff5500"">random_</font> method do? How does its behaviour change when you supply a different number of params?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the <font color=""#ff5500"">random_</font> method do? How does its behaviour change when you supply a different number of params?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It takes parameters <font color=""#ff5500"">from=0, to=None</font>, and fills the tensor that it's used on with integers sampled from the uniform distribution <font color=""#ff5500"">[from, to - 1]</font>.<br><br>If only one parameter is supplied, it's assumed to be the <font color=""#ff5500"">to</font> parameter.<br><br>If no parameters are supplied, <font color=""#ff5500"">to</font> is taken to be a very large integer (dependent on the tensor's datatype).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the weights in this convolutional layer using the Xavier method.<br><br><div class='exerciseprecontainer'><pre>conv1 = nn.Conv2d(in_channels=5, out_channels=10, kernel_size=3, padding=0, stride=1)<br>nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='15' name='xavier_uniform__19637541' style='width: 15ch;'>(conv1.weight)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Initialise the weights in this convolutional layer using the Xavier method.<br><br><div class='exerciseprecontainer'><pre>conv1 = nn.Conv2d(in_channels=5, out_channels=10, kernel_size=3, padding=0, stride=1)<br>nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='15' name='xavier_uniform__19637541' style='width: 15ch;'>(conv1.weight)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a = torch.Tensor(range(5))<br>&gt;&gt;&gt; nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='7' name='normal__03524733' style='width: 7ch;'>(a, 0, 0.1)<br>&gt;&gt;&gt; a<br>tensor([ 0.1190, -0.0613,  0.1284, -0.1934,  0.0159])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a = torch.Tensor(range(5))<br>&gt;&gt;&gt; nn.<input maxlength='4' name='init_61578871' style='width: 4ch;'>.<input maxlength='7' name='normal__03524733' style='width: 7ch;'>(a, 0, 0.1)<br>&gt;&gt;&gt; a<br>tensor([ 0.1190, -0.0613,  0.1284, -0.1934,  0.0159])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; m = nn.Sigmoid()<br>&gt;&gt;&gt; loss = nn.BCELoss(reduction=sum"")<br>&gt;&gt;&gt; input = torch.randn(3, requires_grad=True)<br>&gt;&gt;&gt; target = torch.empty(3).random_(2)<br>&gt;&gt;&gt; output = loss(m(input), target)<br>&gt;&gt;&gt; output.backward()<br><br>&gt;&gt;&gt; input<br>tensor([-0.4882,  1.0946, -1.6798], requires_grad=True)<br><br>&gt;&gt;&gt; m(input)<br>tensor([0.3803, 0.7493, 0.1571], grad_fn=)<br><br>&gt;&gt;&gt; target<br>tensor([1., 0., 1.])<br><br>&gt;&gt;&gt; input.grad<br>tensor([-0.2066,  0.2498, -0.2810])<br><br>&gt;&gt;&gt; <input maxlength=""10"" name=""m(input) -_71845033"" style=""width: 10ch;""> <input maxlength=""3"" name=""3 *_98875905"" style=""width: 3ch;""> input.grad<br>tensor([1., 0., 1.])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; m = nn.Sigmoid()<br>&gt;&gt;&gt; loss = nn.BCELoss(reduction=sum"")<br>&gt;&gt;&gt; input = torch.randn(3, requires_grad=True)<br>&gt;&gt;&gt; target = torch.empty(3).random_(2)<br>&gt;&gt;&gt; output = loss(m(input), target)<br>&gt;&gt;&gt; output.backward()<br><br>&gt;&gt;&gt; input<br>tensor([-0.4882,  1.0946, -1.6798], requires_grad=True)<br><br>&gt;&gt;&gt; m(input)<br>tensor([0.3803, 0.7493, 0.1571], grad_fn=)<br><br>&gt;&gt;&gt; target<br>tensor([1., 0., 1.])<br><br>&gt;&gt;&gt; input.grad<br>tensor([-0.2066,  0.2498, -0.2810])<br><br>&gt;&gt;&gt; <input maxlength=""10"" name=""m(input) -_71845033"" style=""width: 10ch;""> <input maxlength=""3"" name=""3 *_98875905"" style=""width: 3ch;""> input.grad<br>tensor([1., 0., 1.])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <font color='#ff5500'>nn</font> version of this <font color='#ff5500'>nn.functional</font> function?<br><br><div class='exerciseprecontainer'><pre>F.binary_cross_entropy<br>nn.<input maxlength='7' name='BCELoss_53872889' style='width: 7ch;'>()</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <font color='#ff5500'>nn</font> version of this <font color='#ff5500'>nn.functional</font> function?<br><br><div class='exerciseprecontainer'><pre>F.binary_cross_entropy<br>nn.<input maxlength='7' name='BCELoss_53872889' style='width: 7ch;'>()</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function that performs training for a DCGAN.<br><br><div class=""exerciseprecontainer""><pre>print(""Starting Training Loop..."")<br>for epoch in range(num_epochs):<br><br>    progress_bar = tqdm_notebook(range(size), desc=f""Epoch {epoch+1}/{num_epochs}"")<br>    for i, data in enumerate(dataloader):<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, real data ###########################<br>        netD.<input maxlength=""9"" name=""zero_grad_18425358"" style=""width: 9ch;"">()<br><br>        real_cpu = data[0].to(device)<br>        batch_size = real_cpu.size(0)<br>        label = torch.<input maxlength=""4"" name=""full_16581069"" style=""width: 4ch;"">((batch_size,), real_label, dtype=torch.float, device=device)<br>        output = netD(real_cpu).view(-1)<br><br>        errD_real = criterion(output, label)<br>        errD_real.backward()<br>        D_x = output.mean().item()<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, fake data ###########################<br>        noise = torch.randn(batch_size, nz, 1, 1, device=device)<br>        fake = netG(noise)<br>        label.<input maxlength=""5"" name=""fill__48310764"" style=""width: 5ch;"">(fake_label)<br>        output = netD(fake.detach()).view(-1)<br><br>        errD_fake = criterion(output, label)<br>        errD_fake.backward()<br>        D_G_z1 = output.mean().item()<br><br>        errD = errD_real + errD_fake<br>        optimizerD.<input maxlength=""6"" name=""step()_76326657"" style=""width: 6ch;""><br><br>        ############################ G* = argmax{ log(D(G(z))) } ###########################<br>        netG.<input maxlength=""9"" name=""zero_grad_79965117"" style=""width: 9ch;"">()<br><br>        label.<input maxlength=""5"" name=""fill__55382515"" style=""width: 5ch;"">(real_label)<br>        output = netD(fake).view(-1)<br>        errG = criterion(output, label)<br>        errG.backward()<br>        D_G_z2 = output.mean().item()<br>        optimizerG.<input maxlength=""6"" name=""step()_86410336"" style=""width: 6ch;""><br><br>        # record progress<br><br>        if i % 50 == 0: progress_bar.update(50)<br><br>        G_losses.append(errG.item()); D_losses.append(errD.item())<br><br>        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == size-1)):<br>            with torch.no_grad(): fake = netG(fixed_noise).detach().cpu()<br>            img_list.append(fake)<br><br>        iters += 1</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function that performs training for a DCGAN.<br><br><div class=""exerciseprecontainer""><pre>print(""Starting Training Loop..."")<br>for epoch in range(num_epochs):<br><br>    progress_bar = tqdm_notebook(range(size), desc=f""Epoch {epoch+1}/{num_epochs}"")<br>    for i, data in enumerate(dataloader):<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, real data ###########################<br>        netD.<input maxlength=""9"" name=""zero_grad_18425358"" style=""width: 9ch;"">()<br><br>        real_cpu = data[0].to(device)<br>        batch_size = real_cpu.size(0)<br>        label = torch.<input maxlength=""4"" name=""full_16581069"" style=""width: 4ch;"">((batch_size,), real_label, dtype=torch.float, device=device)<br>        output = netD(real_cpu).view(-1)<br><br>        errD_real = criterion(output, label)<br>        errD_real.backward()<br>        D_x = output.mean().item()<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, fake data ###########################<br>        noise = torch.randn(batch_size, nz, 1, 1, device=device)<br>        fake = netG(noise)<br>        label.<input maxlength=""5"" name=""fill__48310764"" style=""width: 5ch;"">(fake_label)<br>        output = netD(fake.detach()).view(-1)<br><br>        errD_fake = criterion(output, label)<br>        errD_fake.backward()<br>        D_G_z1 = output.mean().item()<br><br>        errD = errD_real + errD_fake<br>        optimizerD.<input maxlength=""6"" name=""step()_76326657"" style=""width: 6ch;""><br><br>        ############################ G* = argmax{ log(D(G(z))) } ###########################<br>        netG.<input maxlength=""9"" name=""zero_grad_79965117"" style=""width: 9ch;"">()<br><br>        label.<input maxlength=""5"" name=""fill__55382515"" style=""width: 5ch;"">(real_label)<br>        output = netD(fake).view(-1)<br>        errG = criterion(output, label)<br>        errG.backward()<br>        D_G_z2 = output.mean().item()<br>        optimizerG.<input maxlength=""6"" name=""step()_86410336"" style=""width: 6ch;""><br><br>        # record progress<br><br>        if i % 50 == 0: progress_bar.update(50)<br><br>        G_losses.append(errG.item()); D_losses.append(errD.item())<br><br>        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == size-1)):<br>            with torch.no_grad(): fake = netG(fixed_noise).detach().cpu()<br>            img_list.append(fake)<br><br>        iters += 1</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function that performs training for a DCGAN.<br><br><div class=""exerciseprecontainer""><pre>print(""Starting Training Loop..."")<br>for epoch in range(num_epochs):<br><br>    progress_bar = <input maxlength=""13"" name=""tqdm_notebook_42920983"" style=""width: 13ch;"">(range(size), desc=f""Epoch {epoch+1}/{num_epochs}"")<br>    for i, data in enumerate(dataloader):<br><br>        ############################ D* = arg<input maxlength=""3"" name=""max_97546174"" style=""width: 3ch;"">{ log(<input maxlength=""4"" name=""D(x)_71480369"" style=""width: 4ch;"">) + log(1 - <input maxlength=""7"" name=""D(G(z))_04882694"" style=""width: 7ch;"">) }, real data ###########################<br>        netD.zero_grad()<br><br>        real = data[0].to(device)<br>        batch_size = real.size(0)<br>        label = torch.full((batch_size,), real_label, dtype=torch.float, device=device)<br>        output = <input maxlength=""4"" name=""netD_44065088"" style=""width: 4ch;"">(<input maxlength=""4"" name=""real_24191017"" style=""width: 4ch;"">).<input maxlength=""4"" name=""view_50252876"" style=""width: 4ch;"">(-1)<br><br>        errD_real = criterion(output, label)<br>        errD_real.backward()<br>        D_x = output.mean().item()<br><br>        ############################ D* = arg<input maxlength=""3"" name=""max_91284842"" style=""width: 3ch;"">{ log(D(x)) + log(1 - <input maxlength=""7"" name=""D(G(z))_49626131"" style=""width: 7ch;"">) }, fake data ###########################<br>        noise = torch.randn(batch_size, nz, 1, 1, device=device)<br>        fake = netG(noise)<br>        label.fill_(fake_label)<br>        output = <input maxlength=""4"" name=""netD_10999953"" style=""width: 4ch;"">(<input maxlength=""4"" name=""fake_57646904"" style=""width: 4ch;"">.<input maxlength=""6"" name=""detach_42647125"" style=""width: 6ch;"">()).<input maxlength=""4"" name=""view_37985564"" style=""width: 4ch;"">(-1)<br><br>        errD_fake = criterion(output, label)<br>        errD_fake.backward()<br>        D_G_z1 = output.mean().item()<br><br>        errD = errD_real + errD_fake<br>        optimizerD.step()<br><br>        ############################ G* = arg<input maxlength=""3"" name=""max_61571221"" style=""width: 3ch;"">{ log(<input maxlength=""7"" name=""D(G(z))_71507048"" style=""width: 7ch;"">) } ###########################<br>        netG.zero_grad()<br><br>        label.fill_(real_label)<br>        output = <input maxlength=""4"" name=""netD_56749020"" style=""width: 4ch;"">(<input maxlength=""4"" name=""fake_30727566"" style=""width: 4ch;"">).<input maxlength=""4"" name=""view_60399237"" style=""width: 4ch;"">(-1)<br>        errG = criterion(output, label)<br>        errG.backward()<br>        D_G_z2 = output.mean().item()<br>        optimizerG.step()<br><br>        # record progress<br><br>        if i % 50 == 0: progress_bar.<input maxlength=""10"" name=""update(50)_72186194"" style=""width: 10ch;""><br><br>        G_losses.append(errG.item()); D_losses.append(errD.item())<br><br>        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == size-1)):<br>            with torch.no_grad(): fake = netG(fixed_noise).detach().cpu()<br>            img_list.append(fake)<br><br>        iters += 1</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function that performs training for a DCGAN.<br><br><div class=""exerciseprecontainer""><pre>print(""Starting Training Loop..."")<br>for epoch in range(num_epochs):<br><br>    progress_bar = <input maxlength=""13"" name=""tqdm_notebook_42920983"" style=""width: 13ch;"">(range(size), desc=f""Epoch {epoch+1}/{num_epochs}"")<br>    for i, data in enumerate(dataloader):<br><br>        ############################ D* = arg<input maxlength=""3"" name=""max_97546174"" style=""width: 3ch;"">{ log(<input maxlength=""4"" name=""D(x)_71480369"" style=""width: 4ch;"">) + log(1 - <input maxlength=""7"" name=""D(G(z))_04882694"" style=""width: 7ch;"">) }, real data ###########################<br>        netD.zero_grad()<br><br>        real = data[0].to(device)<br>        batch_size = real.size(0)<br>        label = torch.full((batch_size,), real_label, dtype=torch.float, device=device)<br>        output = <input maxlength=""4"" name=""netD_44065088"" style=""width: 4ch;"">(<input maxlength=""4"" name=""real_24191017"" style=""width: 4ch;"">).<input maxlength=""4"" name=""view_50252876"" style=""width: 4ch;"">(-1)<br><br>        errD_real = criterion(output, label)<br>        errD_real.backward()<br>        D_x = output.mean().item()<br><br>        ############################ D* = arg<input maxlength=""3"" name=""max_91284842"" style=""width: 3ch;"">{ log(D(x)) + log(1 - <input maxlength=""7"" name=""D(G(z))_49626131"" style=""width: 7ch;"">) }, fake data ###########################<br>        noise = torch.randn(batch_size, nz, 1, 1, device=device)<br>        fake = netG(noise)<br>        label.fill_(fake_label)<br>        output = <input maxlength=""4"" name=""netD_10999953"" style=""width: 4ch;"">(<input maxlength=""4"" name=""fake_57646904"" style=""width: 4ch;"">.<input maxlength=""6"" name=""detach_42647125"" style=""width: 6ch;"">()).<input maxlength=""4"" name=""view_37985564"" style=""width: 4ch;"">(-1)<br><br>        errD_fake = criterion(output, label)<br>        errD_fake.backward()<br>        D_G_z1 = output.mean().item()<br><br>        errD = errD_real + errD_fake<br>        optimizerD.step()<br><br>        ############################ G* = arg<input maxlength=""3"" name=""max_61571221"" style=""width: 3ch;"">{ log(<input maxlength=""7"" name=""D(G(z))_71507048"" style=""width: 7ch;"">) } ###########################<br>        netG.zero_grad()<br><br>        label.fill_(real_label)<br>        output = <input maxlength=""4"" name=""netD_56749020"" style=""width: 4ch;"">(<input maxlength=""4"" name=""fake_30727566"" style=""width: 4ch;"">).<input maxlength=""4"" name=""view_60399237"" style=""width: 4ch;"">(-1)<br>        errG = criterion(output, label)<br>        errG.backward()<br>        D_G_z2 = output.mean().item()<br>        optimizerG.step()<br><br>        # record progress<br><br>        if i % 50 == 0: progress_bar.<input maxlength=""10"" name=""update(50)_72186194"" style=""width: 10ch;""><br><br>        G_losses.append(errG.item()); D_losses.append(errD.item())<br><br>        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == size-1)):<br>            with torch.no_grad(): fake = netG(fixed_noise).detach().cpu()<br>            img_list.append(fake)<br><br>        iters += 1</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function that performs training for a DCGAN. The neural networks are called <font color=""#ff5500"">net</font> and <font color=""#ff5500"">optimizer</font>, suffixed with the letters <font color=""#ff5500"">G</font> and <font color=""#ff5500"">D</font>.<br><br><div class=""exerciseprecontainer""><pre>print(""Starting Training Loop..."")<br>for epoch in range(num_epochs):<br><br>    progress_bar = tqdm_notebook(range(size), desc=f""Epoch {epoch+1}/{num_epochs}"")<br>    for i, data in enumerate(dataloader):<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, real data ###########################<br>        netD.zero_grad()<br><br>        real_cpu = <input maxlength=""7"" name=""data[0]_49385404"" style=""width: 7ch;"">.to(device)<br>        batch_size = real_cpu.size(0)<br>        label = torch.full((batch_size,), real_label, dtype=torch.float, device=device)<br>        output = netD(real_cpu).view(-1)<br><br>        errD_real = criterion(output, label)<br>        <input maxlength=""20"" name=""errD_real.backward()_17307785"" style=""width: 20ch;""><br>        D_x = output.mean().item()<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, fake data ###########################<br><br>        noise = torch.randn(batch_size, nz, 1, 1, device=device)<br>        <input maxlength=""18"" name=""fake = netG(noise)_51346408"" style=""width: 18ch;""><br>        label.fill_(fake_label)<br>        output = netD(fake.detach()).view(-1)<br><br>        errD_fake = criterion(output, label)<br>        <input maxlength=""20"" name=""errD_fake.backward()_06426172"" style=""width: 20ch;""><br>        D_G_z1 = output.mean().item()<br><br>        errD = errD_real + errD_fake<br>        <input maxlength=""17"" name=""optimizerD.step()_52032482"" style=""width: 17ch;""><br><br>        ############################ G* = argmax{ log(D(G(z))) } ###########################<br>        netG.zero_grad()<br><br>        label.fill_(real_label)<br>        output = netD(fake).view(-1)<br>        errG = criterion(output, label)<br>        <input maxlength=""15"" name=""errG.backward()_68698105"" style=""width: 15ch;""><br>        D_G_z2 = output.mean().item()<br>        <input maxlength=""17"" name=""optimizerG.step()_03039331"" style=""width: 17ch;""><br><br>        # record progress<br><br>        if i % 50 == 0: progress_bar.<input maxlength=""6"" name=""update_58606882"" style=""width: 6ch;"">(50)<br><br>        G_losses.append(errG.item()); D_losses.append(errD.item())<br><br>        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == size-1)):<br>            with <input maxlength=""13"" name=""torch.no_grad_16391141"" style=""width: 13ch;"">(): fake = netG(fixed_noise).detach().cpu()<br>            img_list.append(fake)<br><br>        iters += 1</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function that performs training for a DCGAN. The neural networks are called <font color=""#ff5500"">net</font> and <font color=""#ff5500"">optimizer</font>, suffixed with the letters <font color=""#ff5500"">G</font> and <font color=""#ff5500"">D</font>.<br><br><div class=""exerciseprecontainer""><pre>print(""Starting Training Loop..."")<br>for epoch in range(num_epochs):<br><br>    progress_bar = tqdm_notebook(range(size), desc=f""Epoch {epoch+1}/{num_epochs}"")<br>    for i, data in enumerate(dataloader):<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, real data ###########################<br>        netD.zero_grad()<br><br>        real_cpu = <input maxlength=""7"" name=""data[0]_49385404"" style=""width: 7ch;"">.to(device)<br>        batch_size = real_cpu.size(0)<br>        label = torch.full((batch_size,), real_label, dtype=torch.float, device=device)<br>        output = netD(real_cpu).view(-1)<br><br>        errD_real = criterion(output, label)<br>        <input maxlength=""20"" name=""errD_real.backward()_17307785"" style=""width: 20ch;""><br>        D_x = output.mean().item()<br><br>        ############################ D* = argmax{ log(D(x)) + log(1 - D(G(z))) }, fake data ###########################<br><br>        noise = torch.randn(batch_size, nz, 1, 1, device=device)<br>        <input maxlength=""18"" name=""fake = netG(noise)_51346408"" style=""width: 18ch;""><br>        label.fill_(fake_label)<br>        output = netD(fake.detach()).view(-1)<br><br>        errD_fake = criterion(output, label)<br>        <input maxlength=""20"" name=""errD_fake.backward()_06426172"" style=""width: 20ch;""><br>        D_G_z1 = output.mean().item()<br><br>        errD = errD_real + errD_fake<br>        <input maxlength=""17"" name=""optimizerD.step()_52032482"" style=""width: 17ch;""><br><br>        ############################ G* = argmax{ log(D(G(z))) } ###########################<br>        netG.zero_grad()<br><br>        label.fill_(real_label)<br>        output = netD(fake).view(-1)<br>        errG = criterion(output, label)<br>        <input maxlength=""15"" name=""errG.backward()_68698105"" style=""width: 15ch;""><br>        D_G_z2 = output.mean().item()<br>        <input maxlength=""17"" name=""optimizerG.step()_03039331"" style=""width: 17ch;""><br><br>        # record progress<br><br>        if i % 50 == 0: progress_bar.<input maxlength=""6"" name=""update_58606882"" style=""width: 6ch;"">(50)<br><br>        G_losses.append(errG.item()); D_losses.append(errD.item())<br><br>        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == size-1)):<br>            with <input maxlength=""13"" name=""torch.no_grad_16391141"" style=""width: 13ch;"">(): fake = netG(fixed_noise).detach().cpu()<br>            img_list.append(fake)<br><br>        iters += 1</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The code below will create <font color='#ff5500'>t</font> as a tensor with uninitialised data &amp; shape <font color='#ff5500'>[3]</font>, then fill it with random labels (either zero or one).<br><br><div class='exerciseprecontainer'><pre>t = torch.<input maxlength='5' name='empty_57020842' style='width: 5ch;'>(3).<input maxlength='7' name='random__04425413' style='width: 7ch;'>(<input maxlength='1' name='2_53874816' style='width: 1ch;'>)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The code below will create <font color='#ff5500'>t</font> as a tensor with uninitialised data &amp; shape <font color='#ff5500'>[3]</font>, then fill it with random labels (either zero or one).<br><br><div class='exerciseprecontainer'><pre>t = torch.<input maxlength='5' name='empty_57020842' style='width: 5ch;'>(3).<input maxlength='7' name='random__04425413' style='width: 7ch;'>(<input maxlength='1' name='2_53874816' style='width: 1ch;'>)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What kind of NN would be able to produce this output?<br><br><img src='909fb00d72e22e24504919a7efc88b6f95610bc126e970f9f540e0430bed583d.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What kind of NN would be able to produce this output?<br><br><img src='909fb00d72e22e24504919a7efc88b6f95610bc126e970f9f540e0430bed583d.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A <b>variational autoencoder</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Using this notation:<br><br><img src=""34bb5c0fea1a5890199d732ed6eb483a70749dc977b6fd7be3c1fe276026ebb1.jpg""><br><br>what should the loss function be for this autoencoder, using quadratic loss?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Using this notation:<br><br><img src=""34bb5c0fea1a5890199d732ed6eb483a70749dc977b6fd7be3c1fe276026ebb1.jpg""><br><br>what should the loss function be for this autoencoder, using quadratic loss?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	\[L(\theta, \varphi)=\frac{1}{n} \sum_{i=1}^n\left(x^i-f_\theta\left(g_{\varphi}\left(x^i\right)\right)\right)^2\]<br>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The diagram below is of a typical <b>autoencoder</b>. How does it change for a <b>variational autoencoder</b>?<br><br><img src=""d173381aaab68125d32931da8aeb0fa09913040237636d2c37b03f10d7674227.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The diagram below is of a typical <b>autoencoder</b>. How does it change for a <b>variational autoencoder</b>?<br><br><img src=""d173381aaab68125d32931da8aeb0fa09913040237636d2c37b03f10d7674227.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Instead of mapping the input to a fixed vector, it's mapped to a probability distribution.<br><br>The decoder maps to a probability density function, which is then sampled from to get the reconstructed input.<br><br><img src=""80311e00b321e658c4f8f684aafdf4a6c2e5096a0008a2d2a5aba47ae3471aae.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Describe how the reparameterisation illustrated below works in a variational auto encoder, and why it's necessary.<br><br><img src=""paste-8ac7b14d20405847dd5d3b9990cf6577de00ddd0.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Describe how the reparameterisation illustrated below works in a variational auto encoder, and why it's necessary.<br><br><img src=""paste-8ac7b14d20405847dd5d3b9990cf6577de00ddd0.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The problem when calculating the loss function wrt the parameter \(\Phi\) is that is appears in both the expression inside the expectation, and in the distribution we take the expectation over:<br><br><img src=""b866f2cf52857ed02e7f15fabfdcc7b4d6ca39b407d33e6d6b25725fde2203d8.jpg""><br><br>i.e. we can't take the gradient wrt a random variable.<br><br>Solution: we sample from \(\epsilon\), and get \(z\) as a function of \(\epsilon\) - that way, the expectation is taken over a standard normal distribution, and the only dependence on \(\Phi\) is inside the expectation.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the difference between these two images, and why adding KL loss produces the left one (and is better).<br><br><img src='4c48a910de174828c76fe7521756e7f528e7aebc043c9b61a4ddef85f733f0c6.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the difference between these two images, and why adding KL loss produces the left one (and is better).<br><br><img src='4c48a910de174828c76fe7521756e7f528e7aebc043c9b61a4ddef85f733f0c6.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	KL loss acts as a regulariser. It limits the range of latent variables so that similar data lead to similar latent variables. It ensures the latent space is meaningful, and that conceptually similar inputs have similar representations. Without this, the latent space can sometimes end up highly spread out (like in the right image).<br><br>Here's another image:<br><br><img src=""f495dfc2670ddd448f093ab08b14d545aacacabf2bad693763228a74c38020a9.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If this is the output we get from a variational autoencoder, what does it suggest we should change about the loss function?<br><br><img src=""66c8fbd68eaa20be6f926938263552ddf76f4eb7411a5d0b9639be913ccdc7b1.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If this is the output we get from a variational autoencoder, what does it suggest we should change about the loss function?<br><br><img src=""66c8fbd68eaa20be6f926938263552ddf76f4eb7411a5d0b9639be913ccdc7b1.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	We should increase the penalty for the KL-divergence term (because the latent vector representations need more regularisation). This is actually a special type of variational autoencoder, called \(\beta\)-VAEs (i.e. \(\beta &gt; 1\) ).<br><br><img src=""c8e620843eb235618fb3524cf095679c80ad0b20e651f810e2660007d2805a9d.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this formula, and what is its relevance for variational autoencoders?<br><br><img src='8c332e0bf1293e3a6e52a5a43e0aaf77937ce0c630058c7ad5551f74fecf5559.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this formula, and what is its relevance for variational autoencoders?<br><br><img src='8c332e0bf1293e3a6e52a5a43e0aaf77937ce0c630058c7ad5551f74fecf5559.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is the sum of KL-divergence \(D(P||Q)\), where \(P = N(\mu,\sigma)\), and \(Q = N(0, I)\).<br><br>It is minimised when \(P\) is precisely the standard normal distribution \(N(0, I)\).<br><br>This penalty is used in <b>variational autoencoders</b> to encourage them to evenly distribute all encodings around the center of the latent space. If it ""cheats"" by clustering them apart into specific regions away from the origin, it will be penalised.<br><br>In this way, the latent space is meaningful, and we can transition smoothly between different clusters of it.<br><br><img src='a158c15cab2b1b5e579cd6aadf8ef1469cdf1c3d76e7f0b708f71f21e4301549.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""quotebox"">Due to overfitting, the latent space of an autoencoder can be extremely irregular (close points in latent space can give very <i>different</i> decoded data, some point of the latent space can give <i>meaningless</i> content once decoded) and, so, we can’t really define a <i>generative</i> process that simply consists to sample a point from the <i>latent space</i> and make it go through the decoder to get new data.<br><br><i>Variational autoencoders</i> (VAEs) are autoencoders that tackle the problem of the latent space irregularity by making the encoder return a <i>distribution over the latent space</i> instead of a single point and by adding in the loss function a <i>regularisation</i> term over that returned distribution in order to ensure a better <i>organisation</i> of the latent space.<div class=""q-desc q-desc-1"">TowardsDataScience</div></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""quotebox"">Due to overfitting, the latent space of an autoencoder can be extremely irregular (close points in latent space can give very <i>different</i> decoded data, some point of the latent space can give <i>meaningless</i> content once decoded) and, so, we can’t really define a <i>generative</i> process that simply consists to sample a point from the <i>latent space</i> and make it go through the decoder to get new data.<br><br><i>Variational autoencoders</i> (VAEs) are autoencoders that tackle the problem of the latent space irregularity by making the encoder return a <i>distribution over the latent space</i> instead of a single point and by adding in the loss function a <i>regularisation</i> term over that returned distribution in order to ensure a better <i>organisation</i> of the latent space.<div class=""q-desc q-desc-1"">TowardsDataScience</div></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""quotebox"">An Autoencoder is essentially a neural network that is designed to learn an <i>identity function</i> in an unsupervised way such that it can compress and <i>reconstruct</i> an original input, and by doing that it discovers a more efficient and <i>compressed</i> <i>representation</i> of the original input data.<div class=""q-desc q-desc-1"">Mathematical pre-requisites for understanding Auto Encoders</div></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""quotebox"">An Autoencoder is essentially a neural network that is designed to learn an <i>identity function</i> in an unsupervised way such that it can compress and <i>reconstruct</i> an original input, and by doing that it discovers a more efficient and <i>compressed</i> <i>representation</i> of the original input data.<div class=""q-desc q-desc-1"">Mathematical pre-requisites for understanding Auto Encoders</div></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the main difference between <b>Adam</b> and <b>RMSProp</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the main difference between <b>Adam</b> and <b>RMSProp</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Adam</b> uses momentum effects, by having a moving average of gradients in the denominator rather than just subtracting the current gradient like RMSProp does.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why is bias correction often not that important when using Adam?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why is bias correction often not that important when using Adam?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Because it dies down quite quickly as you advance timesteps (assuming beta is smaller than 1, which is convention).<br><br><img src='2ebd42263b89bc4ef0600ac4ac4bb408c3266fbcf7f610a34576a2b6185a39c5.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the 4 parameters for the Adam method, and what are their standard values?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the 4 parameters for the Adam method, and what are their standard values?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul><li>The <b>learning rate</b> \(\alpha = 0.001\),</li><li>the <b>betas</b> \(\beta_1=0.9\) (first moment) and \(\beta_2=0.999\) (second moment),&nbsp;</li><li>and \(\epsilon=10^{-8}\).</li></ul><br><img src=""ac6f1384dc86d326e5b4e3a44822c306212c9a6e0baa92f2574b4c1c92500d7b.jpg""><br>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Empirically, which type of GD is generally the best performing in deep neural networks? <br><br>What is the most common alternative?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Empirically, which type of GD is generally the best performing in deep neural networks? <br><br>What is the most common alternative?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Adam</b> is generally seen as the best, and is the most widely used.<br><br>The most common alternative is <b>SGD + Nesterov</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does <b>Adam</b> stand for?<br><br>Which two important features does Adam combine from different GD methods?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does <b>Adam</b> stand for?<br><br>Which two important features does Adam combine from different GD methods?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Adam</b> = adaptive moment estimation.<br><br>It combines:<ul><li><b>momentum</b> from standard momentum methods (~1st moment)</li><li><b>dampening</b> of oscillations in directions with large movement (~2nd moment)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the purpose of something like this? Why was this axis in particular&nbsp;scattered across?<br><br><img src=""4e5140eb9bbcd01e6fa19eb065366ca5f04d07a3673a2a98c1cf9af61b5a30a0.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the purpose of something like this? Why was this axis in particular&nbsp;scattered across?<br><br><img src=""4e5140eb9bbcd01e6fa19eb065366ca5f04d07a3673a2a98c1cf9af61b5a30a0.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The purpose is to vectorise a set of classification labels, i.e. turn a 1D array of labels <font color='#ff5500'>l</font> into a 2D array <font color='#ff5500'>a</font> with 1s and 0s.<br><br>This can be helpful if your loss function requires the latter form.<br><br>Note that the first dimension of data usually represents the batch size, so this is the right way to scatter (i.e. each datapoint is represented by an array with exactly one <font color='#ff5500'>1</font>, which corresponds to the original label in <font color='#ff5500'>l</font>).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>l = torch.arange(5)</font>, what will <font color='#ff5500'>l.unsqueeze(n)</font> look like for <font color='#ff5500'>n = 0, 1, -1</font> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>l = torch.arange(5)</font>, what will <font color='#ff5500'>l.unsqueeze(n)</font> look like for <font color='#ff5500'>n = 0, 1, -1</font> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src='c272c2d5bb45aebd4ac6af6844ca497627411433c8353f39dcdb284f6ad21343.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the big difference between PyTorch's <font color='#ff5500'>Tensor</font> object and NumPy arrays?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the big difference between PyTorch's <font color='#ff5500'>Tensor</font> object and NumPy arrays?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Tensors can be run on GPUs, whereas NumPy arrays can't.<br><br>This presents a huge speedup, e.g. in deep NNs the speedup factor is sometimes around 50x.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color='#ff5500'>torch.Tensor</font>, <font color='#ff5500'>torch.empty</font> and <font color='#ff5500'>torch.tensor</font> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color='#ff5500'>torch.Tensor</font>, <font color='#ff5500'>torch.empty</font> and <font color='#ff5500'>torch.tensor</font> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Initially there was only the first one, but then its functionality was split into the latter two.<br><br><font color='#ff5500'>Tensor</font> and <font color='#ff5500'>tensor</font> both convert to a tensor when they're fed arrays or array-like things (with a slight difference in interpreted datatype):<br><br><img src='b0a8ef75019a3146d4930a3b7e2dd438474929080051540d7ee4f2805d007649.jpg'><br><br><font color='#ff5500'>Tensor</font> and <font color='#ff5500'>empty</font> both do the same thing when they're fed a list of dimensions - they instantiate a tensor with arbitrary values:<br><br><img src='db3a48c08453b4facab34a1e023293f812278594ccbb67a7312142e0482e4e70.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does <b>CUDA</b> stand for?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does <b>CUDA</b> stand for?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Compute Unified Device Architecture</b>.<br><br>It is a sofware layer that gives direct access to GPUs for general-purpose processing, in an approach called general-purpose computing on GPUs (GPGPU).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which library in Pytorch will you find most loss functions?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which library in Pytorch will you find most loss functions?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	In <font color='#ff5500'>torch.nn</font>. Examples: <font color='#ff5500'>torch.nn.MSELoss</font>, <font color='#ff5500'>torch.nn.CrossEntropyLoss</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do you expect the output of these two cells will be?<br><br><img src=""bb736e0da538d0eec9a18d572480bb592cb02714ef465b7633f39c91b6953bd4.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do you expect the output of these two cells will be?<br><br><img src=""bb736e0da538d0eec9a18d572480bb592cb02714ef465b7633f39c91b6953bd4.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first one will output a multiplication function, which evaluates to 2* its input (because deriv of \(2x\) wrt \(x\) is \(2\)), which in this case is 2 everywhere.<br><br><img src=""256d02e4ebf622100f55b2238b6e912053828af08f9f1cfa37875379b0225749.jpg""><br><br>The second one will output an addition function (because of order of operations: the multiplication is performed first). It evaluates to 1 everywhere, regardless of input (because deriv of \(2x+1\) wrt \(2x\) is \(1\)).<br><br><img src=""4b8fd72a8b968153af39af50b0ee133dbebbee7826371f00eb767a0dbb00ce96.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the difference in output between these two cells?<br><br><img src='13fcd0f2fce9fa69efd73fa09998c0afa4ca5fd4d6617fccebeaa3d8a7406787.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the difference in output between these two cells?<br><br><img src='13fcd0f2fce9fa69efd73fa09998c0afa4ca5fd4d6617fccebeaa3d8a7406787.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first one just computes a normal tensor. The second one keeps track of the gradient (in the DAG).<br><br><img src='60bd217c1d8ee361d1a114d231f9696e2ae3d9ea288e99255ab03c05c1eccf0e.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the first argument of the <font color='#ff5500'>backward</font> method for tensors?<br><br>In what situations do you need to specify this argument, and what default value does it take when you don't need to specify it?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the first argument of the <font color='#ff5500'>backward</font> method for tensors?<br><br>In what situations do you need to specify this argument, and what default value does it take when you don't need to specify it?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first argument is <font color='#ff5500'>gradient</font>.<br><br>If the tensor is multidimensional, then you need to specify this - it's equivalent to computing the directional derivative and then propagating that back through the DAG (so all the <font color='#ff5500'>.grad</font> properties of tensors in the DAG have same dimension as the tensors themselves).<br><br>If the tensor is a scalar, then you don't need to specify this argument. In this case, calling <font color='#ff5500'>.backward()</font> is equivalent to calling <font color='#ff5500'>.backward(torch.tensor(1.0))</font>.<br><br><img src='cffebe95abc4d2d565fd79daa365816cc690a16339cefb5520385d388bfadd3f.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This code will fail. Why?<br><br><img src=""0f26263d5a471c11bd5aff371d15d74f2a5e267ad159245be747853fd9977c5d.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This code will fail. Why?<br><br><img src=""0f26263d5a471c11bd5aff371d15d74f2a5e267ad159245be747853fd9977c5d.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Because you need float datatype to require gradients. Two possible fixes:<br><br><img src=""31e61987704fac9a6f93be81f532ea7acf7b988f5d896cecd84387285f07b0d5.jpg"">&nbsp; &nbsp;<img src=""a0ce813e97b88755c6f5a2d894b5a95b5934964b15b7dca9a873448d7cbf96ac.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a simple neural network used to fit a cubic to a sine function.<br><br>Explain the circled bit of code.<br><br><img src=""ab1b4e4592372d7fe1bf40409ccc995927a1b8abfb2ede22fd0437c1e741d361.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a simple neural network used to fit a cubic to a sine function.<br><br>Explain the circled bit of code.<br><br><img src=""ab1b4e4592372d7fe1bf40409ccc995927a1b8abfb2ede22fd0437c1e741d361.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	We only need inputs for <font color=""#ff5500"">x</font>, <font color=""#ff5500"">x**2</font> and <font color=""#ff5500"">x**3</font>, because these three inputs feed into the next layer's single neuron, and <b>that single neuron already has bias</b>&nbsp;which deals with the constant term.<br><br>The <font color=""#ff5500"">Flatten</font> function changes shape <font color=""#ff5500"">(2000, 1)</font> into <font color=""#ff5500"">2000</font>. Note that we need <font color=""#ff5500"">(0, 1)</font> as arguments because this makes sure everything gets flattened; by default the function will flatten all dimensions after the first one (the first is left alone because it refers to the batch).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; l = torch.<input maxlength='9' name='unsqueeze_99886452' style='width: 9ch;'>(torch.tensor([1, 2, 3, 2, 1], dtype=torch.<input maxlength='5' name='int64_55833840' style='width: 5ch;'>), <input maxlength='1' name='1_44415364' style='width: 1ch;'>)<br>&gt;&gt;&gt; l<br>tensor([[1],<br>        [2],<br>        [3],<br>        [2],<br>        [1]])<br><br>&gt;&gt;&gt; a = torch.zeros(5, 10, dtype=torch.<input maxlength='5' name='int64_44322302' style='width: 5ch;'>)<br>&gt;&gt;&gt; a<br>tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])<br><br>&gt;&gt;&gt; a.scatter_(<input maxlength='3' name='dim_23443335' style='width: 3ch;'>=<input maxlength='1' name='1_48226472' style='width: 1ch;'>, <input maxlength='5' name='index_34941174' style='width: 5ch;'>=l, <input maxlength='5' name='value_60188323' style='width: 5ch;'>=1)<br>tensor([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; l = torch.<input maxlength='9' name='unsqueeze_99886452' style='width: 9ch;'>(torch.tensor([1, 2, 3, 2, 1], dtype=torch.<input maxlength='5' name='int64_55833840' style='width: 5ch;'>), <input maxlength='1' name='1_44415364' style='width: 1ch;'>)<br>&gt;&gt;&gt; l<br>tensor([[1],<br>        [2],<br>        [3],<br>        [2],<br>        [1]])<br><br>&gt;&gt;&gt; a = torch.zeros(5, 10, dtype=torch.<input maxlength='5' name='int64_44322302' style='width: 5ch;'>)<br>&gt;&gt;&gt; a<br>tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])<br><br>&gt;&gt;&gt; a.scatter_(<input maxlength='3' name='dim_23443335' style='width: 3ch;'>=<input maxlength='1' name='1_48226472' style='width: 1ch;'>, <input maxlength='5' name='index_34941174' style='width: 5ch;'>=l, <input maxlength='5' name='value_60188323' style='width: 5ch;'>=1)<br>tensor([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],<br>        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],<br>        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>l = torch.arange(5)<br><br>l.<input maxlength='12' name='unsqueeze(0)_81894095' style='width: 12ch;'><br>tensor([[0, 1, 2, 3, 4]])<br><br>l.<input maxlength='12' name='unsqueeze(1)_30196740' style='width: 12ch;'><br>tensor([[0],<br>        [1],<br>        [2],<br>        [3],<br>        [4]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>l = torch.arange(5)<br><br>l.<input maxlength='12' name='unsqueeze(0)_81894095' style='width: 12ch;'><br>tensor([[0, 1, 2, 3, 4]])<br><br>l.<input maxlength='12' name='unsqueeze(1)_30196740' style='width: 12ch;'><br>tensor([[0],<br>        [1],<br>        [2],<br>        [3],<br>        [4]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<b>CUDA</b> stands for <i>Compute Unified Device Architecture</i> (although the acronym is no longer in common use).<br><br>It is a <i>sofware</i> layer that gives direct access to GPUs for general-purpose processing, in an approach called general-purpose computing on GPUs (<i>GPGPU</i>).<br><br>It was designed to work with programming languages like <i>C</i>, <i>C++</i> and <i>Fortran</i>.<br><br>It was created by <i>NVIDIA</i>.
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<b>CUDA</b> stands for <i>Compute Unified Device Architecture</i> (although the acronym is no longer in common use).<br><br>It is a <i>sofware</i> layer that gives direct access to GPUs for general-purpose processing, in an approach called general-purpose computing on GPUs (<i>GPGPU</i>).<br><br>It was designed to work with programming languages like <i>C</i>, <i>C++</i> and <i>Fortran</i>.<br><br>It was created by <i>NVIDIA</i>.
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>torch.<input maxlength=""4"" name=""cuda_59834153"" style=""width: 4ch;"">.<input maxlength=""12"" name=""is_available_52957226"" style=""width: 12ch;"">()     # check for cuda<br><br>x = x.<input maxlength=""6"" name=""cuda()_95785564"" style=""width: 6ch;"">                  # move x's data from CPU to GPU and return new object<br><br>x = x.<input maxlength=""5"" name=""cpu()_43538672"" style=""width: 5ch;"">                   # move x's data from GPU to CPU and return new object</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>torch.<input maxlength=""4"" name=""cuda_59834153"" style=""width: 4ch;"">.<input maxlength=""12"" name=""is_available_52957226"" style=""width: 12ch;"">()     # check for cuda<br><br>x = x.<input maxlength=""6"" name=""cuda()_95785564"" style=""width: 6ch;"">                  # move x's data from CPU to GPU and return new object<br><br>x = x.<input maxlength=""5"" name=""cpu()_43538672"" style=""width: 5ch;"">                   # move x's data from GPU to CPU and return new object</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>nn.<input maxlength=""6"" name=""Linear_66045967"" style=""width: 6ch;"">(<input maxlength=""3"" name=""m,n_12202769"" style=""width: 3ch;"">)       # fully connected layer from m to n units<br><br>nn.<input maxlength=""6"" name=""ConvXd_17814909"" style=""width: 6ch;"">(<input maxlength=""5"" name=""m,n,s_77204373"" style=""width: 5ch;"">)      # X-dim conv layer from  m to n channels where X⍷{1,2,3}, and the kernel size is s<br><br>nn.<input maxlength=""9"" name=""MaxPoolXd_09265523"" style=""width: 9ch;"">(<input maxlength=""1"" name=""s_18875815"" style=""width: 1ch;"">)      # X-dim pooling layer (notation as above)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>nn.<input maxlength=""6"" name=""Linear_66045967"" style=""width: 6ch;"">(<input maxlength=""3"" name=""m,n_12202769"" style=""width: 3ch;"">)       # fully connected layer from m to n units<br><br>nn.<input maxlength=""6"" name=""ConvXd_17814909"" style=""width: 6ch;"">(<input maxlength=""5"" name=""m,n,s_77204373"" style=""width: 5ch;"">)      # X-dim conv layer from  m to n channels where X⍷{1,2,3}, and the kernel size is s<br><br>nn.<input maxlength=""9"" name=""MaxPoolXd_09265523"" style=""width: 9ch;"">(<input maxlength=""1"" name=""s_18875815"" style=""width: 1ch;"">)      # X-dim pooling layer (notation as above)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import the cross-entropy loss function.<br><br><div class=""exerciseprecontainer""><pre>from <input maxlength=""8"" name=""torch.nn_15510647"" style=""width: 8ch;""> import <input maxlength=""16"" name=""CrossEntropyLoss_17268953"" style=""width: 16ch;""></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import the cross-entropy loss function.<br><br><div class=""exerciseprecontainer""><pre>from <input maxlength=""8"" name=""torch.nn_15510647"" style=""width: 8ch;""> import <input maxlength=""16"" name=""CrossEntropyLoss_17268953"" style=""width: 16ch;""></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import the rectified linear units activation function.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='8' name='torch.nn_15510647' style='width: 8ch;'> import <input maxlength='4' name='ReLU_42047088' style='width: 4ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import the rectified linear units activation function.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='8' name='torch.nn_15510647' style='width: 8ch;'> import <input maxlength='4' name='ReLU_42047088' style='width: 4ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>from torch import <input maxlength='5' name='optim_02570727' style='width: 5ch;'><br><br>opt = <input maxlength='5' name='optim_05800813' style='width: 5ch;'>.X(model.<input maxlength='12' name='parameters()_62343977' style='width: 12ch;'>, ...)      # create optimizer, where X is SGD, Adam, RMSprop, ...<br>opt.<input maxlength='6' name='step()_76326657' style='width: 6ch;'>                                  # update weights</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>from torch import <input maxlength='5' name='optim_02570727' style='width: 5ch;'><br><br>opt = <input maxlength='5' name='optim_05800813' style='width: 5ch;'>.X(model.<input maxlength='12' name='parameters()_62343977' style='width: 12ch;'>, ...)      # create optimizer, where X is SGD, Adam, RMSprop, ...<br>opt.<input maxlength='6' name='step()_76326657' style='width: 6ch;'>                                  # update weights</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>from torch import optim<br><br>scheduler = optim.<input maxlength='12' name='lr_scheduler_78584707' style='width: 12ch;'>.X(optimizer,...)      # create lr scheduler, where X is StepLR, ExponentialLR, ...<br>scheduler.<input maxlength='6' name='step()_76326657' style='width: 6ch;'>                                     # update lr after optimizer updates weights</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>from torch import optim<br><br>scheduler = optim.<input maxlength='12' name='lr_scheduler_78584707' style='width: 12ch;'>.X(optimizer,...)      # create lr scheduler, where X is StepLR, ExponentialLR, ...<br>scheduler.<input maxlength='6' name='step()_76326657' style='width: 6ch;'>                                     # update lr after optimizer updates weights</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain roughly what's happening in this code.<br><br><img src=""787b8e365ef55578523583a184da95eba7f26b94fd55ade9ae64d947967a020e.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain roughly what's happening in this code.<br><br><img src=""787b8e365ef55578523583a184da95eba7f26b94fd55ade9ae64d947967a020e.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is a walkthrough of PyTorch's&nbsp;<font color=""#ff5500"">autograd</font>&nbsp;function. \(Q\)'s directional deriv is being computed relative to \(a\), for the direction&nbsp;<font color=""#ff5500"">[1, 1]</font>.<br><br>The second half is symbolic manipulation using the&nbsp;<font color=""#ff5500"">SymPy</font>&nbsp;library, showing that we get the same result.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a = torch.tensor([2., 4.], requires_grad=True)<br><br>&gt;&gt;&gt; gradient = torch.tensor([1., 1.])<br><br>&gt;&gt;&gt; Q = 3 * a**2<br><br>&gt;&gt;&gt; Q.backward(gradient=gradient)<br><br>&gt;&gt;&gt; a.<input maxlength='4' name='grad_92229785' style='width: 4ch;'><br>tensor([12., 24.])</pre></div><br>...<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a1, a2 = symbols(""a1 a2"")<br><br>&gt;&gt;&gt; a_ = <input maxlength='6' name='Matrix_43524653' style='width: 6ch;'>([a1, a2])<br><br>&gt;&gt;&gt; Q_ = 3 * matrix_multiply_elementwise(a_, a_)<br><br>&gt;&gt;&gt; Q_</pre></div><br><img src='b133de1cd98032ec2d5e9562f610cc3a7d49d3f154e58179738cc7b2e8ef7972.jpg'><br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; J_ = <input maxlength='15' name='Q_.jacobian(a_)_59634558' style='width: 15ch;'><br><br>&gt;&gt;&gt; J_</pre></div><br><img src='c2a022171d69c94da11a61e33605e77f9d98a6ffaaea93d5ada6fa70ed1d5737.jpg'><br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; J_value = J_.<input maxlength='4' name='subs_99838627' style='width: 4ch;'>([(a1, 2), (a2, 4)])<br><br>&gt;&gt;&gt; gradient_ = <input maxlength='6' name='Matrix_43524653' style='width: 6ch;'>([1, 1])<br><br>&gt;&gt;&gt; <input maxlength='19' name='J_value * gradient__49136776' style='width: 19ch;'></pre></div><br><img src='78f4b6e79f2d42c87fa25f0c666c74be385636f76dc73335eb181702b2e599f3.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a = torch.tensor([2., 4.], requires_grad=True)<br><br>&gt;&gt;&gt; gradient = torch.tensor([1., 1.])<br><br>&gt;&gt;&gt; Q = 3 * a**2<br><br>&gt;&gt;&gt; Q.backward(gradient=gradient)<br><br>&gt;&gt;&gt; a.<input maxlength='4' name='grad_92229785' style='width: 4ch;'><br>tensor([12., 24.])</pre></div><br>...<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; a1, a2 = symbols(""a1 a2"")<br><br>&gt;&gt;&gt; a_ = <input maxlength='6' name='Matrix_43524653' style='width: 6ch;'>([a1, a2])<br><br>&gt;&gt;&gt; Q_ = 3 * matrix_multiply_elementwise(a_, a_)<br><br>&gt;&gt;&gt; Q_</pre></div><br><img src='b133de1cd98032ec2d5e9562f610cc3a7d49d3f154e58179738cc7b2e8ef7972.jpg'><br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; J_ = <input maxlength='15' name='Q_.jacobian(a_)_59634558' style='width: 15ch;'><br><br>&gt;&gt;&gt; J_</pre></div><br><img src='c2a022171d69c94da11a61e33605e77f9d98a6ffaaea93d5ada6fa70ed1d5737.jpg'><br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; J_value = J_.<input maxlength='4' name='subs_99838627' style='width: 4ch;'>([(a1, 2), (a2, 4)])<br><br>&gt;&gt;&gt; gradient_ = <input maxlength='6' name='Matrix_43524653' style='width: 6ch;'>([1, 1])<br><br>&gt;&gt;&gt; <input maxlength='19' name='J_value * gradient__49136776' style='width: 19ch;'></pre></div><br><img src='78f4b6e79f2d42c87fa25f0c666c74be385636f76dc73335eb181702b2e599f3.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>Backpropagation exercise.</pre><pre>&gt;&gt;&gt; a = torch.tensor([1, 2, 3], <input maxlength=""5"" name=""dtype_99509760"" style=""width: 5ch;"">=torch.<input maxlength=""5"" name=""float_24250300"" style=""width: 5ch;"">, <input maxlength=""18"" name=""requires_grad=True_41931941"" style=""width: 18ch;"">)<br>&gt;&gt;&gt; b = a**2<br><br>&gt;&gt;&gt; b.<input maxlength=""8"" name=""backward_87962158"" style=""width: 8ch;"">(torch.tensor([1, 1, 1]))<br><br>&gt;&gt;&gt; <input maxlength=""6"" name=""a.grad_51568883"" style=""width: 6ch;""><br>tensor([2., 4., 6.])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>Backpropagation exercise.</pre><pre>&gt;&gt;&gt; a = torch.tensor([1, 2, 3], <input maxlength=""5"" name=""dtype_99509760"" style=""width: 5ch;"">=torch.<input maxlength=""5"" name=""float_24250300"" style=""width: 5ch;"">, <input maxlength=""18"" name=""requires_grad=True_41931941"" style=""width: 18ch;"">)<br>&gt;&gt;&gt; b = a**2<br><br>&gt;&gt;&gt; b.<input maxlength=""8"" name=""backward_87962158"" style=""width: 8ch;"">(torch.tensor([1, 1, 1]))<br><br>&gt;&gt;&gt; <input maxlength=""6"" name=""a.grad_51568883"" style=""width: 6ch;""><br>tensor([2., 4., 6.])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 1st layer of abstraction: we're only using <b>NumPy</b>, and doing everything manually.<br><br><div class='exerciseprecontainer'><pre># Create random input and output data<br>x = np.linspace(-math.pi, math.pi, 2000)<br>x_powers = x<input maxlength='9' name='[:, None]_85196281' style='width: 9ch;'> ** np.arange(4)<br>y = np.sin(x)<br><br># Randomly initialize weights<br>coeffs = np.random.randn(4)<br><br>learning_rate = 1e-6<br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. cubic)<br>    y_pred = np.einsum(""ij,j-&gt;i"", x_powers, coeffs)<br><br>    # Compute and print loss<br>    loss = ((y_pred - y) ** 2).sum()<br>    if (t + 1) % 200 == 0:<br>        print(f""{t+1:4} | {loss:&gt;8.3f}"")<br><br>    # Backprop to compute gradients of a, b, c, d with respect to loss<br>    grad_y_pred = <input maxlength='1' name='2_53874816' style='width: 1ch;'> * (<input maxlength='10' name='y_pred - y_72744746' style='width: 10ch;'>)<br><br>    grad_coeffs = np.einsum(""ij,i-&gt;j"", x_powers, grad_y_pred)<br>    coeffs -= <input maxlength='13' name='learning_rate_82957326' style='width: 13ch;'> * grad_coeffs<br><br>y_df = pd.DataFrame({""y (actual)"": y, ""y (pred)"": y_pred}, index=pd.Index(x, name=""x""))<br><br>fig = px.line(y_df, <input maxlength='8' name='template_29690534' style='width: 8ch;'>=""<input maxlength='12' name='simple_white_83626044' style='width: 12ch;'>"")<br><br>fig.update_layout(width=600, height=400, <input maxlength='10' name='title_text_84565238' style='width: 10ch;'>=""1st layer of abstraction: just NumPy"")<br><br>fig.show()</pre></div><br><img src='dcc440eb4709b8f7d34e0847b456a84c451d8fd3964909f62881fbb31fea04c9.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 1st layer of abstraction: we're only using <b>NumPy</b>, and doing everything manually.<br><br><div class='exerciseprecontainer'><pre># Create random input and output data<br>x = np.linspace(-math.pi, math.pi, 2000)<br>x_powers = x<input maxlength='9' name='[:, None]_85196281' style='width: 9ch;'> ** np.arange(4)<br>y = np.sin(x)<br><br># Randomly initialize weights<br>coeffs = np.random.randn(4)<br><br>learning_rate = 1e-6<br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. cubic)<br>    y_pred = np.einsum(""ij,j-&gt;i"", x_powers, coeffs)<br><br>    # Compute and print loss<br>    loss = ((y_pred - y) ** 2).sum()<br>    if (t + 1) % 200 == 0:<br>        print(f""{t+1:4} | {loss:&gt;8.3f}"")<br><br>    # Backprop to compute gradients of a, b, c, d with respect to loss<br>    grad_y_pred = <input maxlength='1' name='2_53874816' style='width: 1ch;'> * (<input maxlength='10' name='y_pred - y_72744746' style='width: 10ch;'>)<br><br>    grad_coeffs = np.einsum(""ij,i-&gt;j"", x_powers, grad_y_pred)<br>    coeffs -= <input maxlength='13' name='learning_rate_82957326' style='width: 13ch;'> * grad_coeffs<br><br>y_df = pd.DataFrame({""y (actual)"": y, ""y (pred)"": y_pred}, index=pd.Index(x, name=""x""))<br><br>fig = px.line(y_df, <input maxlength='8' name='template_29690534' style='width: 8ch;'>=""<input maxlength='12' name='simple_white_83626044' style='width: 12ch;'>"")<br><br>fig.update_layout(width=600, height=400, <input maxlength='10' name='title_text_84565238' style='width: 10ch;'>=""1st layer of abstraction: just NumPy"")<br><br>fig.show()</pre></div><br><img src='dcc440eb4709b8f7d34e0847b456a84c451d8fd3964909f62881fbb31fea04c9.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 2nd layer of abstraction: we're using <b>Tensors &amp; autograd</b>, but we aren't using a neural network yet.<br><br><div class=""exerciseprecontainer""><pre>dtype = torch.float<br>device = torch.device(""cpu"")<br><br># Create random input and output data<br>x = torch.linspace(-math.pi, math.pi, 2000, device=device, dtype=dtype)<br>x_powers = x[:, None] ** torch.arange(4)<br>y = torch.sin(x)<br><br># Randomly initialize weights<br>coeffs = torch.randn(4, device=device, dtype=dtype, <input maxlength=""18"" name=""requires_grad=True_41931941"" style=""width: 18ch;"">)<br><br>learning_rate = 1e-6<br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. cubic)<br>    y_pred = x_powers.mv(coeffs)<br><br>    # Compute and print loss<br>    loss = ((y_pred - y) ** 2).sum()<br>    if (t + 1) % 200 == 0:<br>        print(f""{t+1:4} | {loss.item():&gt;8.3f}"")<br><br>    # Manually set gradients to zero before backward pass<br>    <input maxlength=""11"" name=""coeffs.grad_88689568"" style=""width: 11ch;""> = <input maxlength=""4"" name=""None_28094566"" style=""width: 4ch;""><br><br>    # Use autogradient to compute the backward pass; gradients of loss wrt tensors stored in those tensors<br>    <input maxlength=""15"" name=""loss.backward()_16679007"" style=""width: 15ch;""><br><br>    # Manually update via backprop (we haven't yet added an optimiser)<br>    <input maxlength=""20"" name=""with torch.no_grad()_53935204"" style=""width: 20ch;"">:<br>        coeffs -= learning_rate * coeffs.grad</pre></div><br><div class=""exerciseprecontainer""><pre>y_df = pd.DataFrame({""y (actual)"": y.numpy(), ""y (pred)"": y_pred.detach().numpy()}, index=pd.Index(x.numpy(), name=""x""))<br><br>fig = px.line(y_df, template=""simple_white"")<br><br>fig.update_layout(width=600, height=400, title_text=""2nd layer of abstraction: tensors &amp; autograd, no neural network"")<br><br>fig.show()</pre></div><br><img src=""e1c494e95e4a7c070614b086f8d0c1aece5b5399355dfc5b493fc784b4749701.jpg"">
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 2nd layer of abstraction: we're using <b>Tensors &amp; autograd</b>, but we aren't using a neural network yet.<br><br><div class=""exerciseprecontainer""><pre>dtype = torch.float<br>device = torch.device(""cpu"")<br><br># Create random input and output data<br>x = torch.linspace(-math.pi, math.pi, 2000, device=device, dtype=dtype)<br>x_powers = x[:, None] ** torch.arange(4)<br>y = torch.sin(x)<br><br># Randomly initialize weights<br>coeffs = torch.randn(4, device=device, dtype=dtype, <input maxlength=""18"" name=""requires_grad=True_41931941"" style=""width: 18ch;"">)<br><br>learning_rate = 1e-6<br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. cubic)<br>    y_pred = x_powers.mv(coeffs)<br><br>    # Compute and print loss<br>    loss = ((y_pred - y) ** 2).sum()<br>    if (t + 1) % 200 == 0:<br>        print(f""{t+1:4} | {loss.item():&gt;8.3f}"")<br><br>    # Manually set gradients to zero before backward pass<br>    <input maxlength=""11"" name=""coeffs.grad_88689568"" style=""width: 11ch;""> = <input maxlength=""4"" name=""None_28094566"" style=""width: 4ch;""><br><br>    # Use autogradient to compute the backward pass; gradients of loss wrt tensors stored in those tensors<br>    <input maxlength=""15"" name=""loss.backward()_16679007"" style=""width: 15ch;""><br><br>    # Manually update via backprop (we haven't yet added an optimiser)<br>    <input maxlength=""20"" name=""with torch.no_grad()_53935204"" style=""width: 20ch;"">:<br>        coeffs -= learning_rate * coeffs.grad</pre></div><br><div class=""exerciseprecontainer""><pre>y_df = pd.DataFrame({""y (actual)"": y.numpy(), ""y (pred)"": y_pred.detach().numpy()}, index=pd.Index(x.numpy(), name=""x""))<br><br>fig = px.line(y_df, template=""simple_white"")<br><br>fig.update_layout(width=600, height=400, title_text=""2nd layer of abstraction: tensors &amp; autograd, no neural network"")<br><br>fig.show()</pre></div><br><img src=""e1c494e95e4a7c070614b086f8d0c1aece5b5399355dfc5b493fc784b4749701.jpg"">
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre>Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength=""4"" name=""bias_55117073"" style=""width: 4ch;"">.<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;"">, *linear_layer.<input maxlength=""6"" name=""weight_40361532"" style=""width: 6ch;"">.<input maxlength=""8"" name=""detach()_54946017"" style=""width: 8ch;"">.numpy().squeeze().tolist()<br>))<br></pre></div><pre><img src=""ab8bc2ec36b88aaa93719c555032217343074108e44f09d271d87768d63e12df.jpg""></pre><div class=""exerciseprecontainer""><pre>y_df = pd.DataFrame({""y (actual)"": y.<input maxlength=""5"" name=""numpy_82959393"" style=""width: 5ch;"">(), ""y (pred)"": y_pred.<input maxlength=""6"" name=""detach_42647125"" style=""width: 6ch;"">().<input maxlength=""5"" name=""numpy_32097212"" style=""width: 5ch;"">()}, index=pd.Index(x.<input maxlength=""5"" name=""numpy_49077800"" style=""width: 5ch;"">(), <input maxlength=""4"" name=""name_38178929"" style=""width: 4ch;"">=""x""))<br><br>fig = px.line(y_df, <input maxlength=""8"" name=""template_29690534"" style=""width: 8ch;"">=""simple_white"")<br><br>fig.update_layout(width=600, height=400, title_text=""3rd layer of abstraction: nn.Sequential, no optimiser"")<br><br>fig.show()</pre></div>


<br><img src=""d92555de889904b1e3554445668e58d3ab7bb51a607b9a29ea7f127e27f393a8.jpg"">
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre>Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength=""4"" name=""bias_55117073"" style=""width: 4ch;"">.<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;"">, *linear_layer.<input maxlength=""6"" name=""weight_40361532"" style=""width: 6ch;"">.<input maxlength=""8"" name=""detach()_54946017"" style=""width: 8ch;"">.numpy().squeeze().tolist()<br>))<br></pre></div><pre><img src=""ab8bc2ec36b88aaa93719c555032217343074108e44f09d271d87768d63e12df.jpg""></pre><div class=""exerciseprecontainer""><pre>y_df = pd.DataFrame({""y (actual)"": y.<input maxlength=""5"" name=""numpy_82959393"" style=""width: 5ch;"">(), ""y (pred)"": y_pred.<input maxlength=""6"" name=""detach_42647125"" style=""width: 6ch;"">().<input maxlength=""5"" name=""numpy_32097212"" style=""width: 5ch;"">()}, index=pd.Index(x.<input maxlength=""5"" name=""numpy_49077800"" style=""width: 5ch;"">(), <input maxlength=""4"" name=""name_38178929"" style=""width: 4ch;"">=""x""))<br><br>fig = px.line(y_df, <input maxlength=""8"" name=""template_29690534"" style=""width: 8ch;"">=""simple_white"")<br><br>fig.update_layout(width=600, height=400, title_text=""3rd layer of abstraction: nn.Sequential, no optimiser"")<br><br>fig.show()</pre></div>


<br><img src=""d92555de889904b1e3554445668e58d3ab7bb51a607b9a29ea7f127e27f393a8.jpg"">
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre>Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength=""4"" name=""bias_55117073"" style=""width: 4ch;"">.<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;"">, *linear_layer.<input maxlength=""6"" name=""weight_40361532"" style=""width: 6ch;"">.<input maxlength=""8"" name=""detach()_54946017"" style=""width: 8ch;"">.numpy().squeeze().tolist()<br>))</pre>
</div>

<br><img src=""1c84ad3e7aef0170313900c1187e6566386b7dccf5fdb4f3606bd3f9a93a8699.jpg""><br><br>...<br><br><img src=""2dd2e9f4479da0f20396b93d6d37e23b7e1ab9f3b398ee2e5ef8755bfb52c5cc.jpg"">
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre>Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength=""4"" name=""bias_55117073"" style=""width: 4ch;"">.<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;"">, *linear_layer.<input maxlength=""6"" name=""weight_40361532"" style=""width: 6ch;"">.<input maxlength=""8"" name=""detach()_54946017"" style=""width: 8ch;"">.numpy().squeeze().tolist()<br>))</pre>
</div>

<br><img src=""1c84ad3e7aef0170313900c1187e6566386b7dccf5fdb4f3606bd3f9a93a8699.jpg""><br><br>...<br><br><img src=""2dd2e9f4479da0f20396b93d6d37e23b7e1ab9f3b398ee2e5ef8755bfb52c5cc.jpg"">
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 3rd layer of abstraction: we're using <font color='#ff5500'>nn.Sequential()</font>, but no optimiser yet, so gradients are still manually updated.<br><br><div class='exerciseprecontainer'><pre>dtype = torch.float<br>device = torch.device(""cpu"")<br><br># Create random input and output data<br>x = torch.linspace(-math.pi, math.pi, 2000, device=device, dtype=dtype)<br>x_powers = x[:, None] ** torch.tensor([1, 2, 3])<br>y = torch.sin(x)<br><br># Randomly initialize weights, in the form of a basic linear model<br># (linear function of [x, x**2, x**3], then squeeze)<br>model = torch.nn.Sequential(<br>    torch.nn.<input maxlength='12' name='Linear(3, 1)_40801334' style='width: 12ch;'>,<br>    torch.nn.<input maxlength='7' name='Flatten_97461534' style='width: 7ch;'>(0, 1)<br>)<br><br># Get loss function for network (want quadratic loss)<br>loss_fn = torch.nn.<input maxlength='7' name='MSELoss_54044486' style='width: 7ch;'>(reduction='sum')<br><br>learning_rate = 1e-6<br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. by the NN). Remember first dim should be batch<br>    y_pred = model(x_powers)<br><br>    # Compute and print loss<br>    loss = loss_fn(y_pred, y)<br>    if (t + 1) % 100 == 0:<br>        print(f""{t+1:4} | {loss.item():&gt;8.3f}"")<br><br>    # Zero gradients before backward pass<br>    <input maxlength='17' name='model.zero_grad()_89110136' style='width: 17ch;'><br><br>    # Use autogradient to compute the backward pass<br>    <input maxlength='15' name='loss.backward()_16679007' style='width: 15ch;'><br><br>    # Manually update via backprop (we haven't yet added an optimiser)<br>    <input maxlength='20' name='with torch.no_grad()_53935204' style='width: 20ch;'>:<br>        for param in <input maxlength='18' name='model.parameters()_02598817' style='width: 18ch;'>:<br>            param -= learning_rate * param.grad<br><br>linear_layer = model[0]<br><br>print('Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength='4' name='bias_55117073' style='width: 4ch;'>.<input maxlength='6' name='item()_17049754' style='width: 6ch;'>, *linear_layer.<input maxlength='6' name='weight_40361532' style='width: 6ch;'>.<input maxlength='8' name='detach()_54946017' style='width: 8ch;'>.numpy().squeeze().tolist()<br>))</pre></div><br><img src='ab8bc2ec36b88aaa93719c555032217343074108e44f09d271d87768d63e12df.jpg'><br><br><div class='exerciseprecontainer'><pre>y_df = pd.DataFrame({""y (actual)"": y.<input maxlength='5' name='numpy_82959393' style='width: 5ch;'>(), ""y (pred)"": y_pred.<input maxlength='6' name='detach_42647125' style='width: 6ch;'>().<input maxlength='5' name='numpy_32097212' style='width: 5ch;'>()}, index=pd.Index(x.<input maxlength='5' name='numpy_49077800' style='width: 5ch;'>(), <input maxlength='4' name='name_38178929' style='width: 4ch;'>=""x""))<br><br>fig = px.line(y_df, <input maxlength='8' name='template_29690534' style='width: 8ch;'>=""simple_white"")<br><br>fig.update_layout(width=600, height=400, title_text=""3rd layer of abstraction: nn.Sequential, no optimiser"")<br><br>fig.show()</pre></div><br><img src='d92555de889904b1e3554445668e58d3ab7bb51a607b9a29ea7f127e27f393a8.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 3rd layer of abstraction: we're using <font color='#ff5500'>nn.Sequential()</font>, but no optimiser yet, so gradients are still manually updated.<br><br><div class='exerciseprecontainer'><pre>dtype = torch.float<br>device = torch.device(""cpu"")<br><br># Create random input and output data<br>x = torch.linspace(-math.pi, math.pi, 2000, device=device, dtype=dtype)<br>x_powers = x[:, None] ** torch.tensor([1, 2, 3])<br>y = torch.sin(x)<br><br># Randomly initialize weights, in the form of a basic linear model<br># (linear function of [x, x**2, x**3], then squeeze)<br>model = torch.nn.Sequential(<br>    torch.nn.<input maxlength='12' name='Linear(3, 1)_40801334' style='width: 12ch;'>,<br>    torch.nn.<input maxlength='7' name='Flatten_97461534' style='width: 7ch;'>(0, 1)<br>)<br><br># Get loss function for network (want quadratic loss)<br>loss_fn = torch.nn.<input maxlength='7' name='MSELoss_54044486' style='width: 7ch;'>(reduction='sum')<br><br>learning_rate = 1e-6<br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. by the NN). Remember first dim should be batch<br>    y_pred = model(x_powers)<br><br>    # Compute and print loss<br>    loss = loss_fn(y_pred, y)<br>    if (t + 1) % 100 == 0:<br>        print(f""{t+1:4} | {loss.item():&gt;8.3f}"")<br><br>    # Zero gradients before backward pass<br>    <input maxlength='17' name='model.zero_grad()_89110136' style='width: 17ch;'><br><br>    # Use autogradient to compute the backward pass<br>    <input maxlength='15' name='loss.backward()_16679007' style='width: 15ch;'><br><br>    # Manually update via backprop (we haven't yet added an optimiser)<br>    <input maxlength='20' name='with torch.no_grad()_53935204' style='width: 20ch;'>:<br>        for param in <input maxlength='18' name='model.parameters()_02598817' style='width: 18ch;'>:<br>            param -= learning_rate * param.grad<br><br>linear_layer = model[0]<br><br>print('Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength='4' name='bias_55117073' style='width: 4ch;'>.<input maxlength='6' name='item()_17049754' style='width: 6ch;'>, *linear_layer.<input maxlength='6' name='weight_40361532' style='width: 6ch;'>.<input maxlength='8' name='detach()_54946017' style='width: 8ch;'>.numpy().squeeze().tolist()<br>))</pre></div><br><img src='ab8bc2ec36b88aaa93719c555032217343074108e44f09d271d87768d63e12df.jpg'><br><br><div class='exerciseprecontainer'><pre>y_df = pd.DataFrame({""y (actual)"": y.<input maxlength='5' name='numpy_82959393' style='width: 5ch;'>(), ""y (pred)"": y_pred.<input maxlength='6' name='detach_42647125' style='width: 6ch;'>().<input maxlength='5' name='numpy_32097212' style='width: 5ch;'>()}, index=pd.Index(x.<input maxlength='5' name='numpy_49077800' style='width: 5ch;'>(), <input maxlength='4' name='name_38178929' style='width: 4ch;'>=""x""))<br><br>fig = px.line(y_df, <input maxlength='8' name='template_29690534' style='width: 8ch;'>=""simple_white"")<br><br>fig.update_layout(width=600, height=400, title_text=""3rd layer of abstraction: nn.Sequential, no optimiser"")<br><br>fig.show()</pre></div><br><img src='d92555de889904b1e3554445668e58d3ab7bb51a607b9a29ea7f127e27f393a8.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 4th (highest) layer of abstraction: we're using <font color=""#ff5500"">nn.Sequential()</font> and an optimiser.<br><br><div class=""exerciseprecontainer""><pre>dtype = torch.float<br>device = torch.device(""cpu"")<br><br># Create random input and output data<br>x = torch.linspace(-math.pi, math.pi, 2000, device=device, dtype=dtype)<br>x_powers = x[:, None] ** torch.tensor([1, 2, 3])<br>y = torch.sin(x)<br><br># Randomly initialize weights, in the form of a basic linear model<br>model = torch.nn.Sequential(<br>    torch.nn.Linear(3, 1),<br>    torch.nn.Flatten(0, 1)<br>)<br><br># Get loss function for network<br>loss_fn = torch.nn.MSELoss(<input maxlength=""9"" name=""reduction_04049677"" style=""width: 9ch;"">='sum')<br><br># Define an optimiser, which will update the model's weights for us<br>learning_rate = 1e-3<br>optimizer = torch.optim.RMSprop(model.parameters(), lr=learning_rate)<br><br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. by the NN). Remember first dim should be batch<br>    y_pred = model(x_powers)<br><br>    # Compute and print loss<br>    loss = loss_fn(y_pred, y)<br>    if (t + 1) % 100 == 0:<br>        print(f""{t+1:4} | {<input maxlength=""11"" name=""loss.item()_96918489"" style=""width: 11ch;"">:&gt;8.3f}"")<br><br>    # Reset gradients before backward pass<br>    <input maxlength=""21"" name=""optimizer.zero_grad()_68747662"" style=""width: 21ch;""><br><br>    # Use autogradient to compute the bwd pass<br>    <input maxlength=""15"" name=""loss.backward()_16679007"" style=""width: 15ch;""><br><br>    # Get updates for each parameter<br>    <input maxlength=""16"" name=""optimizer.step()_66529365"" style=""width: 16ch;""><br><br>linear_layer = model[0]<br><br>print('Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength=""4"" name=""bias_55117073"" style=""width: 4ch;"">.<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;"">, *linear_layer.<input maxlength=""6"" name=""weight_40361532"" style=""width: 6ch;"">.<input maxlength=""8"" name=""detach()_54946017"" style=""width: 8ch;"">.numpy().squeeze().tolist()<br>))</pre></div><br><img src=""1c84ad3e7aef0170313900c1187e6566386b7dccf5fdb4f3606bd3f9a93a8699.jpg""><br><br>...<br><br><img src=""2dd2e9f4479da0f20396b93d6d37e23b7e1ab9f3b398ee2e5ef8755bfb52c5cc.jpg"">
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is a function to fit a cubic to a sine wave, at the 4th (highest) layer of abstraction: we're using <font color=""#ff5500"">nn.Sequential()</font> and an optimiser.<br><br><div class=""exerciseprecontainer""><pre>dtype = torch.float<br>device = torch.device(""cpu"")<br><br># Create random input and output data<br>x = torch.linspace(-math.pi, math.pi, 2000, device=device, dtype=dtype)<br>x_powers = x[:, None] ** torch.tensor([1, 2, 3])<br>y = torch.sin(x)<br><br># Randomly initialize weights, in the form of a basic linear model<br>model = torch.nn.Sequential(<br>    torch.nn.Linear(3, 1),<br>    torch.nn.Flatten(0, 1)<br>)<br><br># Get loss function for network<br>loss_fn = torch.nn.MSELoss(<input maxlength=""9"" name=""reduction_04049677"" style=""width: 9ch;"">='sum')<br><br># Define an optimiser, which will update the model's weights for us<br>learning_rate = 1e-3<br>optimizer = torch.optim.RMSprop(model.parameters(), lr=learning_rate)<br><br>for t in range(2000):<br><br>    # Forward pass: compute predicted y (i.e. by the NN). Remember first dim should be batch<br>    y_pred = model(x_powers)<br><br>    # Compute and print loss<br>    loss = loss_fn(y_pred, y)<br>    if (t + 1) % 100 == 0:<br>        print(f""{t+1:4} | {<input maxlength=""11"" name=""loss.item()_96918489"" style=""width: 11ch;"">:&gt;8.3f}"")<br><br>    # Reset gradients before backward pass<br>    <input maxlength=""21"" name=""optimizer.zero_grad()_68747662"" style=""width: 21ch;""><br><br>    # Use autogradient to compute the bwd pass<br>    <input maxlength=""15"" name=""loss.backward()_16679007"" style=""width: 15ch;""><br><br>    # Get updates for each parameter<br>    <input maxlength=""16"" name=""optimizer.step()_66529365"" style=""width: 16ch;""><br><br>linear_layer = model[0]<br><br>print('Result: y = {0:.3f} + {1:.3f} x + {2:.3f} x^2 + {3:.3f} x^3'.format(<br>    linear_layer.<input maxlength=""4"" name=""bias_55117073"" style=""width: 4ch;"">.<input maxlength=""6"" name=""item()_17049754"" style=""width: 6ch;"">, *linear_layer.<input maxlength=""6"" name=""weight_40361532"" style=""width: 6ch;"">.<input maxlength=""8"" name=""detach()_54946017"" style=""width: 8ch;"">.numpy().squeeze().tolist()<br>))</pre></div><br><img src=""1c84ad3e7aef0170313900c1187e6566386b7dccf5fdb4f3606bd3f9a93a8699.jpg""><br><br>...<br><br><img src=""2dd2e9f4479da0f20396b93d6d37e23b7e1ab9f3b398ee2e5ef8755bfb52c5cc.jpg"">
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the error here, and how to correct it?<br><br><img src=""454aff6f73169c8040b3113c5680333c910698df4bacb85bb61b52654b9ea7e0.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will be the error here, and how to correct it?<br><br><img src=""454aff6f73169c8040b3113c5680333c910698df4bacb85bb61b52654b9ea7e0.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	There will be a <font color=""#ff5500"">TypeError</font>, because we're using <b>functions</b>&nbsp;<font color=""#ff5500"">F.relu</font> rather than <b>modules</b>.<br><br><img src=""7bfbba9122a06a77770cf63dad75525e068a186e8ffcb8b6f381e0367514b9ac.jpg""><br><br>We can fix this by swapping out <font color=""#ff5500"">F.relu</font> with <font color=""#ff5500"">nn.ReLU()</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What size inputs will this network accept?<br><br><img src='300406a5ab1221a13c77001ce9fb5f32714b39a4ba28c7e5982bb4d66bd81018.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What size inputs will this network accept?<br><br><img src='300406a5ab1221a13c77001ce9fb5f32714b39a4ba28c7e5982bb4d66bd81018.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It will accept inputs of size <font color=""#ff5500"">(n, 1, 28, 28)</font>, where <font color=""#ff5500"">n</font> is the batch number.<br><br>The second number is <font color=""#ff5500"">1</font> because this is the number of channels (i.e. <font color=""#ff5500"">in_channels</font>), which we've chosen to be <font color=""#ff5500"">1</font>.<br><br>The next numbers are <font color=""#ff5500"">28</font> because these are the image dimensions. We can see this because:<ul><li>Each convolutional layer doesn't change these dimensions, since we have <font color=""#ff5500"">kernel_size=3, padding=1</font> and these perfectly cancel each other out (adding 2 more pixels from padding, then dropping them from convolution)</li><li>When we get to decoder, our size is <font color=""#ff5500"">64 * 28 * 28</font>. <font color=""#ff5500"">64</font> is the number of output channels, so <font color=""#ff5500"">(28, 28)</font> must be the image dimensions at this point, which must be equal to the original image dimensions by previous point</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to simplify the code below, without defining any new objects?<br><br><img src=""7a4a61ec772326b10cdebf56caf1fd3317d620d822c0d33aac6d64a3d55f32d4.jpg""><br><br><div class=""exerciseprecontainer""><pre>from torch.utils.data import DataLoader, TensorDataset<br><br>train_ds = TensorDataset(x_train, y_train)<br>train_dl = DataLoader(train_ds, batch_size=bs)<br><br>for i in range((n-1)//bs + 1):<br><br>    xb, yb = train_ds[i*bs : i*bs+bs]<br>    pred = model(xb)<br><br>    loss = loss_func(pred, yb)<br><br>    loss.backward()<br>    opt.step()<br>    opt.zero_grad()</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to simplify the code below, without defining any new objects?<br><br><img src=""7a4a61ec772326b10cdebf56caf1fd3317d620d822c0d33aac6d64a3d55f32d4.jpg""><br><br><div class=""exerciseprecontainer""><pre>from torch.utils.data import DataLoader, TensorDataset<br><br>train_ds = TensorDataset(x_train, y_train)<br>train_dl = DataLoader(train_ds, batch_size=bs)<br><br>for i in range((n-1)//bs + 1):<br><br>    xb, yb = train_ds[i*bs : i*bs+bs]<br>    pred = model(xb)<br><br>    loss = loss_func(pred, yb)<br><br>    loss.backward()<br>    opt.step()<br>    opt.zero_grad()</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The code above has defined a <font color=""#ff5500"">DataLoader</font> object, which is easier to work with than a <font color=""#ff5500"">DataSet</font>, but it doesn't use it!<br><br>We can replace the messy <font color=""#ff5500"">i</font> for loop, and instead iterate directly over the DataLoader, as in:<br><br><div class=""exerciseprecontainer""><pre>for xb, yb in train_dl:<br>    pred = model(xb)<br><br>    loss = loss_func(pred, yb)
<br>    loss.backward()<br>    opt.step()<br>    opt.zero_grad()</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>x_train</font> and <font color='#ff5500'>y_train</font> are both tensors (<font color='#ff5500'>x_train</font> is 2D with each row as an array of pixel data for an image, <font color='#ff5500'>y_train</font> is 1D with each element representing a classification), then how do we create a <font color='#ff5500'>DataLoader</font> object?
	<br>

	
		<br>
		<div id=""hint"" class=""hidden"">
			<p class=""trigger"">[ click to show hint ]</p>
			<p class=""payload"">There are 2 steps, the first involves <font color='#ff5500'>TensorDataset</font>.</p>
		</div>
	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If <font color='#ff5500'>x_train</font> and <font color='#ff5500'>y_train</font> are both tensors (<font color='#ff5500'>x_train</font> is 2D with each row as an array of pixel data for an image, <font color='#ff5500'>y_train</font> is 1D with each element representing a classification), then how do we create a <font color='#ff5500'>DataLoader</font> object?
	<br>

	
		<br>
		<div id=""hint"" class=""shown"">
			<p class=""payload"">There are 2 steps, the first involves <font color='#ff5500'>TensorDataset</font>.</p>
		</div>
	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	First we define a dataset via <font color='#ff5500'>TensorDataset</font> (which takes <font color='#ff5500'>x_train</font> and <font color='#ff5500'>y_train</font> as arguments), then we define a <font color='#ff5500'>DataLoader</font> object from this training dataset, which takes a particular batch size as argument.<br><br><img src='3ad89e8be56e3450b610966c4b8d39753deb2fd6c112e91d7d811a4543226a4d.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of object does <font color=""#ff5500"">DataLoader</font> take in, and what does it produce?<br><br>From where do we import it?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What type of object does <font color=""#ff5500"">DataLoader</font> take in, and what does it produce?<br><br>From where do we import it?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It takes in a <font color=""#ff5500"">dataset</font> object, and produces an iterator which returns batches of the data.<br><br>We can create an appropriate dataset object by using the function <font color=""#ff5500"">TensorDataset</font>. <br><br>Both <font color=""#ff5500"">TensorDataset</font> and <font color=""#ff5500"">DataLoader</font> are imported from <font color=""#ff5500"">torch.utils.data</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create a CNN which can classify MNIST digits.<br><br>I'm also doing some bug-fixing, so I want to check the size of an input at each stage through the CNN.<br><br><div class=""exerciseprecontainer""><pre>from IPython.core.<input maxlength=""8"" name=""debugger_91624452"" style=""width: 8ch;""> import <input maxlength=""9"" name=""set_trace_99803274"" style=""width: 9ch;""><br><br>def conv_block(in_f, out_f, **kwargs):<br>    return nn.Sequential(<br>        nn.<input maxlength=""6"" name=""Conv2d_73312514"" style=""width: 6ch;"">(in_f, out_f, **kwargs),<br>        nn.BatchNorm2d(out_f),<br>        nn.ReLU()<br>    )<br><br>class MyCNNClassifier(nn.<input maxlength=""6"" name=""Module_64769448"" style=""width: 6ch;"">):<br><br>    def __init__(self, in_channels, n_classes):<br>        super().__init__()<br><br>        self.encoder_sizes = [in_channels, 32, 64]<br>        self.encoder = nn.Sequential(*[<br>            conv_block(in_f, out_f, kernel_size=3, <input maxlength=""7"" name=""padding_13282914"" style=""width: 7ch;"">=1)<br>            for in_f, out_f in zip(self.encoder_sizes, self.encoder_sizes[1:])<br>        ])<br><br>        self.decoder = nn.Sequential(<br>            nn.Linear(64 * <input maxlength=""7"" name=""28 * 28_30586933"" style=""width: 7ch;"">, 1024),<br>            nn.Sigmoid(),<br>            nn.Linear(1024, <input maxlength=""9"" name=""n_classes_20788450"" style=""width: 9ch;"">)<br>        )<br><br>    def forward(self, x):<br>        x = <input maxlength=""15"" name=""self.encoder(x)_02206631"" style=""width: 15ch;""><br>        <input maxlength=""11"" name=""set_trace()_50009125"" style=""width: 11ch;""><br>        x = x.view(x.size(0), -1)<br>        <input maxlength=""11"" name=""set_trace()_65878923"" style=""width: 11ch;""><br>        x = <input maxlength=""15"" name=""self.decoder(x)_58488020"" style=""width: 15ch;""><br>        <input maxlength=""11"" name=""set_trace()_21878015"" style=""width: 11ch;""><br><br>        return x<br><br>model = <input maxlength=""22"" name=""MyCNNClassifier(1, 10)_89704164"" style=""width: 22ch;""></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create a CNN which can classify MNIST digits.<br><br>I'm also doing some bug-fixing, so I want to check the size of an input at each stage through the CNN.<br><br><div class=""exerciseprecontainer""><pre>from IPython.core.<input maxlength=""8"" name=""debugger_91624452"" style=""width: 8ch;""> import <input maxlength=""9"" name=""set_trace_99803274"" style=""width: 9ch;""><br><br>def conv_block(in_f, out_f, **kwargs):<br>    return nn.Sequential(<br>        nn.<input maxlength=""6"" name=""Conv2d_73312514"" style=""width: 6ch;"">(in_f, out_f, **kwargs),<br>        nn.BatchNorm2d(out_f),<br>        nn.ReLU()<br>    )<br><br>class MyCNNClassifier(nn.<input maxlength=""6"" name=""Module_64769448"" style=""width: 6ch;"">):<br><br>    def __init__(self, in_channels, n_classes):<br>        super().__init__()<br><br>        self.encoder_sizes = [in_channels, 32, 64]<br>        self.encoder = nn.Sequential(*[<br>            conv_block(in_f, out_f, kernel_size=3, <input maxlength=""7"" name=""padding_13282914"" style=""width: 7ch;"">=1)<br>            for in_f, out_f in zip(self.encoder_sizes, self.encoder_sizes[1:])<br>        ])<br><br>        self.decoder = nn.Sequential(<br>            nn.Linear(64 * <input maxlength=""7"" name=""28 * 28_30586933"" style=""width: 7ch;"">, 1024),<br>            nn.Sigmoid(),<br>            nn.Linear(1024, <input maxlength=""9"" name=""n_classes_20788450"" style=""width: 9ch;"">)<br>        )<br><br>    def forward(self, x):<br>        x = <input maxlength=""15"" name=""self.encoder(x)_02206631"" style=""width: 15ch;""><br>        <input maxlength=""11"" name=""set_trace()_50009125"" style=""width: 11ch;""><br>        x = x.view(x.size(0), -1)<br>        <input maxlength=""11"" name=""set_trace()_65878923"" style=""width: 11ch;""><br>        x = <input maxlength=""15"" name=""self.decoder(x)_58488020"" style=""width: 15ch;""><br>        <input maxlength=""11"" name=""set_trace()_21878015"" style=""width: 11ch;""><br><br>        return x<br><br>model = <input maxlength=""22"" name=""MyCNNClassifier(1, 10)_89704164"" style=""width: 22ch;""></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Display a CNN MNIST image.<br><br><img src='02406c444b69edbce74e35d08f97db7d272d593c1d425bab616fe02145e1dd9e.jpg'><br><br><div class='exerciseprecontainer'><pre>fig = go.Figure(data=<input maxlength='10' name='go.Heatmap_15276720' style='width: 10ch;'>(z=x_train[0].reshape((<input maxlength='6' name='28, 28_22510021' style='width: 6ch;'>))[::-1, :], colorscale=""<input maxlength='4' name='Gray_35025418' style='width: 4ch;'>"", <input maxlength='4' name='zmin_23639735' style='width: 4ch;'>=0, <input maxlength='4' name='zmax_76169073' style='width: 4ch;'>=1))<br><br>fig.update_layout(height=300, width=400, <input maxlength='6' name='margin_25552589' style='width: 6ch;'>=dict.fromkeys(list(""tblr""), 20))<br><br>fig.show()</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Display a CNN MNIST image.<br><br><img src='02406c444b69edbce74e35d08f97db7d272d593c1d425bab616fe02145e1dd9e.jpg'><br><br><div class='exerciseprecontainer'><pre>fig = go.Figure(data=<input maxlength='10' name='go.Heatmap_15276720' style='width: 10ch;'>(z=x_train[0].reshape((<input maxlength='6' name='28, 28_22510021' style='width: 6ch;'>))[::-1, :], colorscale=""<input maxlength='4' name='Gray_35025418' style='width: 4ch;'>"", <input maxlength='4' name='zmin_23639735' style='width: 4ch;'>=0, <input maxlength='4' name='zmax_76169073' style='width: 4ch;'>=1))<br><br>fig.update_layout(height=300, width=400, <input maxlength='6' name='margin_25552589' style='width: 6ch;'>=dict.fromkeys(list(""tblr""), 20))<br><br>fig.show()</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create a dataloader for use in training, and perform some training runs.<br><br><img src='7a4a61ec772326b10cdebf56caf1fd3317d620d822c0d33aac6d64a3d55f32d4.jpg'><br><br><div class='exerciseprecontainer'><pre>from torch.utils.data import D<input maxlength='9' name='ataLoader_55445202' style='width: 9ch;'>, T<input maxlength='12' name='ensorDataset_33165782' style='width: 12ch;'><br><br>train_ds = <input maxlength='13' name='TensorDataset_37987217' style='width: 13ch;'>(x_train, y_train)<br>train_dl = <input maxlength='10' name='DataLoader_12554839' style='width: 10ch;'>(train_ds, <input maxlength='10' name='batch_size_56973906' style='width: 10ch;'>=bs)<br><br>for xb, yb in <input maxlength='8' name='train_dl_60935526' style='width: 8ch;'>:<br>    pred = model(xb)<br><br>    loss = loss_func(pred, yb)<br><br>    loss.backward()<br>    opt.step()<br>    opt.<input maxlength='9' name='zero_grad_18425358' style='width: 9ch;'>()</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Create a dataloader for use in training, and perform some training runs.<br><br><img src='7a4a61ec772326b10cdebf56caf1fd3317d620d822c0d33aac6d64a3d55f32d4.jpg'><br><br><div class='exerciseprecontainer'><pre>from torch.utils.data import D<input maxlength='9' name='ataLoader_55445202' style='width: 9ch;'>, T<input maxlength='12' name='ensorDataset_33165782' style='width: 12ch;'><br><br>train_ds = <input maxlength='13' name='TensorDataset_37987217' style='width: 13ch;'>(x_train, y_train)<br>train_dl = <input maxlength='10' name='DataLoader_12554839' style='width: 10ch;'>(train_ds, <input maxlength='10' name='batch_size_56973906' style='width: 10ch;'>=bs)<br><br>for xb, yb in <input maxlength='8' name='train_dl_60935526' style='width: 8ch;'>:<br>    pred = model(xb)<br><br>    loss = loss_func(pred, yb)<br><br>    loss.backward()<br>    opt.step()<br>    opt.<input maxlength='9' name='zero_grad_18425358' style='width: 9ch;'>()</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import a PyTorch function which can take a <font color='#ff5500'>dataset</font>, and creates an iterator which returns batches of data.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='16' name='torch.utils.data_97551131' style='width: 16ch;'> import <input maxlength='10' name='DataLoader_12554839' style='width: 10ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Import a PyTorch function which can take a <font color='#ff5500'>dataset</font>, and creates an iterator which returns batches of data.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='16' name='torch.utils.data_97551131' style='width: 16ch;'> import <input maxlength='10' name='DataLoader_12554839' style='width: 10ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is significant about this, in the context of applications of the <font color=""#ff5500"">einops</font> library?<br><br><img src=""02c2df612eee6087ed412c7bbafa4f750a30850dbfe1450bed92635d6c914368.jpg"">
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is significant about this, in the context of applications of the <font color=""#ff5500"">einops</font> library?<br><br><img src=""02c2df612eee6087ed412c7bbafa4f750a30850dbfe1450bed92635d6c914368.jpg"">
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>einops</font> doesn't just work on cpu-stored numpy arrays, it works on basically any deep learning library (PyTorch in this example), and it works even on tensors stored in the GPU.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which <font color=""#ff5500"">einops</font> function converts a tensor to numpy (and pulls it from the gpu if necessary) ?
	<br>

	
		<br>
		<div id=""hint"" class=""hidden"">
			<p class=""trigger"">[ click to show hint ]</p>
			<p class=""payload"">The important thing is the conversion to numpy.</p>
		</div>
	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which <font color=""#ff5500"">einops</font> function converts a tensor to numpy (and pulls it from the gpu if necessary) ?
	<br>

	
		<br>
		<div id=""hint"" class=""shown"">
			<p class=""payload"">The important thing is the conversion to numpy.</p>
		</div>
	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>asnumpy</font><br><br><img src='59dd14fdba4b36797c65daa69181a91fd75f84534c1d6d6fbf619c6d434a9df2.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why are the <font color='#ff5500'>1</font>s necessary here, and what's an alternative syntax we can use?<br><br><div class='exerciseprecontainer'><pre>y = x - reduce(x, 'b c h w -&gt; b c 1 1', 'mean')</pre></div><br>Also, what is this function actually doing?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why are the <font color='#ff5500'>1</font>s necessary here, and what's an alternative syntax we can use?<br><br><div class='exerciseprecontainer'><pre>y = x - reduce(x, 'b c h w -&gt; b c 1 1', 'mean')</pre></div><br>Also, what is this function actually doing?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The <font color='#ff5500'>1</font>s are necessary because they retain dimensions, and allow us to broadcast.<br><br>An alternative method is to use empty brackets in place of the <font color='#ff5500'>1</font>s:<br><br><div class='exerciseprecontainer'><pre>y = x - reduce(x, 'b c h w -&gt; b c () ()', 'mean')</pre></div><br>This function is performing normalisation: so that each colour layer in each image has zero average.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do these functions do, vs the normal <font color='#ff5500'>rearrange</font> and <font color='#ff5500'>reduce</font> ?<br><br><div class='exerciseprecontainer'><pre>from einops.layers.torch import Rearrange, Reduce</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do these functions do, vs the normal <font color='#ff5500'>rearrange</font> and <font color='#ff5500'>reduce</font> ?<br><br><div class='exerciseprecontainer'><pre>from einops.layers.torch import Rearrange, Reduce</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They're useful in the layers of a neural network defined in PyTorch.<br><br>I think they're analogous to the difference between <font color='#ff5500'>torch.nn.functional.relu</font> and <font color='#ff5500'>torch.nn.ReLU</font>.<br><br>Example given below:<br><br><img src='c9a8b95b59acac2acea0e562e15fdc13afca483196415e45508813321744f64a.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the function <font color=""#ff5500"">asnumpy</font> do,&nbsp;and which library does it get imported from?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the function <font color=""#ff5500"">asnumpy</font> do,&nbsp;and which library does it get imported from?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It converts a tensor to a numpy array, and also pulls it from gpu to cpu if required. <b>This is very useful!</b><br><br><img src=""59dd14fdba4b36797c65daa69181a91fd75f84534c1d6d6fbf619c6d434a9df2.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which common deep learning operation is this equivalent to?<br><br><div class=""exerciseprecontainer""><pre>y = rearrange(x, 'b c h w -&gt; b (c h w)')</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which common deep learning operation is this equivalent to?<br><br><div class=""exerciseprecontainer""><pre>y = rearrange(x, 'b c h w -&gt; b (c h w)')</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is equivalent to&nbsp;<font color=""#ff5500"">flattening</font>.<br><br>We're only leaving the batch dimension; flattening all the others.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which common deep learning operation is this equivalent to?<br><br><div class=""exerciseprecontainer""><pre>y = reduce(x, 'b c h w -&gt; b c', reduction='mean')</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which common deep learning operation is this equivalent to?<br><br><div class=""exerciseprecontainer""><pre>y = reduce(x, 'b c h w -&gt; b c', reduction='mean')</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is equivalent to&nbsp;<b>global average pooling</b>.<br><br>For each image in the batch, we're taking three values: each one an average over the color layer.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which common deep learning operation is this equivalent to?<br><br><div class=""exerciseprecontainer""><pre>y = reduce(x, 'b c (h h1) (w w1) -&gt; b c h w', reduction='max', h1=3, w1=3)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which common deep learning operation is this equivalent to?<br><br><div class=""exerciseprecontainer""><pre>y = reduce(x, 'b c (h h1) (w w1) -&gt; b c h w', reduction='max', h1=3, w1=3)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is equivalent to&nbsp;<b>max pooling</b>&nbsp;with a 3x3 kernel.<br><br>""Getting rid of""&nbsp;<font color=""#ff5500"">h1</font>&nbsp;and&nbsp;<font color=""#ff5500"">w1</font>&nbsp;basically means we're sampling the highest-value pixel in each&nbsp;<font color=""#ff5500"">3x3</font>&nbsp;box, which is exactly max pooling.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>from einops import rearrange</font> isn't ideal when working with layers of a neural network. Fill in the function you should use instead.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='19' name='einops.layers.torch_25905840' style='width: 19ch;'> import <input maxlength='9' name='Rearrange_47091076' style='width: 9ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>from einops import rearrange</font> isn't ideal when working with layers of a neural network. Fill in the function you should use instead.<br><br><div class='exerciseprecontainer'><pre>from <input maxlength='19' name='einops.layers.torch_25905840' style='width: 19ch;'> import <input maxlength='9' name='Rearrange_47091076' style='width: 9ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre># example given for pytorch, but code in other frameworks is almost identical
from torch.nn import Sequential, Conv2d, MaxPool2d, Linear, ReLU
from einops.layers.torch import <input maxlength=""6"" name=""Reduce_50714429"" style=""width: 6ch;"">

model = <input maxlength=""10"" name=""Sequential_74018048"" style=""width: 10ch;"">(
    Conv2d(3, 6, kernel_size=5),
    MaxPool2d(kernel_size=2),
    Conv2d(6, 16, kernel_size=5),
    # combined 2x2 max pooling and flattening in a single step
    # btw colors are the [1]th dimension, before width and height
    <input maxlength=""6"" name=""Reduce_84400768"" style=""width: 6ch;"">('<input maxlength=""15"" name=""b c (h 2) (w 2)_19868440"" style=""width: 15ch;""> -&gt; b (c h w)', '<input maxlength=""3"" name=""max_90641746"" style=""width: 3ch;"">'), 
    Linear(16*5*5, 120), 
    ReLU(),
    Linear(120, 10), 
)</pre>
</div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer"">
  <pre># example given for pytorch, but code in other frameworks is almost identical
from torch.nn import Sequential, Conv2d, MaxPool2d, Linear, ReLU
from einops.layers.torch import <input maxlength=""6"" name=""Reduce_50714429"" style=""width: 6ch;"">

model = <input maxlength=""10"" name=""Sequential_74018048"" style=""width: 10ch;"">(
    Conv2d(3, 6, kernel_size=5),
    MaxPool2d(kernel_size=2),
    Conv2d(6, 16, kernel_size=5),
    # combined 2x2 max pooling and flattening in a single step
    # btw colors are the [1]th dimension, before width and height
    <input maxlength=""6"" name=""Reduce_84400768"" style=""width: 6ch;"">('<input maxlength=""15"" name=""b c (h 2) (w 2)_19868440"" style=""width: 15ch;""> -&gt; b (c h w)', '<input maxlength=""3"" name=""max_90641746"" style=""width: 3ch;"">'), 
    Linear(16*5*5, 120), 
    ReLU(),
    Linear(120, 10), 
)</pre>
</div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which two <font color='#ff5500'>wandb</font> commands do you need to run before you start seeing training examples in your training run?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which two <font color='#ff5500'>wandb</font> commands do you need to run before you start seeing training examples in your training run?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>wandb.init</font> starts a new run, and defines hyperparameters to store (but doesn't refer to any models yet).<br><br><font color='#ff5500'>wandb.watch</font> (which takes <font color='#ff5500'>models</font> as first argument) hooks into the torch model to collect gradients and the topology.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to define the project name for a <font color='#ff5500'>wandb</font> run?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to define the project name for a <font color='#ff5500'>wandb</font> run?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>project</font> is an argument of <font color='#ff5500'>wandb.init</font>. For example:<br><br><div class='exerciseprecontainer'><pre>def train(config_dict: dict[str, Any]):<br>    wandb.init(project=""w1d4"", config=config_dict)<br>    ...</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <font color=""#ff5500"">wandb</font> function to record a dictionary of data to the current run's history?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the <font color=""#ff5500"">wandb</font> function to record a dictionary of data to the current run's history?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color=""#ff5500"">wandb.log</font>. The first arguments are <font color=""#ff5500"">data</font> which is a dict, and <font color=""#ff5500"">step</font> which is the global step in processing.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you save a <font color='#ff5500'>wandb</font> model at the end of a training run? (hint - there are 2 lines of code)
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you save a <font color='#ff5500'>wandb</font> model at the end of a training run? (hint - there are 2 lines of code)
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Firstly, you save the PyTorch model locally. Then you use the function <font color='#ff5500'>wandb.save</font>, and pass in that filename.<br><br><div class='exerciseprecontainer'><pre>t.save(model.state_dict(), filename)<br>wandb.save(filename)</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to get rid of type errors on particular lines of VSCode, without disabling type checker?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to get rid of type errors on particular lines of VSCode, without disabling type checker?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Comment with <font color='#ff5500'># type: ignore</font> at the end of the line.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to move cursor vertically down a block of text, like this:<br><br><img src='45364008b325929f5c222dab9fb4e8f78d668903e6589b10ed9e9a3978626624.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to move cursor vertically down a block of text, like this:<br><br><img src='45364008b325929f5c222dab9fb4e8f78d668903e6589b10ed9e9a3978626624.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You need to hold down <font color='#ff5500'>Ctrl</font>, <font color='#ff5500'>Alt</font> and <font color='#ff5500'>Shift</font> all at the same time, while using the arrowkeys.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to quickly go to a particular line?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to quickly go to a particular line?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Type <font color='#ff5500'>Ctrl + G</font>, then type in the line number and hit enter.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to quickly find a particular symbol in the notebook?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to quickly find a particular symbol in the notebook?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Type <font color='#ff5500'>Ctrl + Shift + O</font>, then type in the symbol and hit enter. This takes you to the place it was defined.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to quickly go from highlighting a word in a code block to highlighting the whole block?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to quickly go from highlighting a word in a code block to highlighting the whole block?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use <font color='#ff5500'>Shift + Alt + →</font> to expand selection, and <font color='#ff5500'>Shift + Alt + ←</font> to shrink it.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to highlight a box of code, like this:<br><br><img src='042492141213541fdda9f8d79a9f3992c46fd813085197ef903fd8afe7a35a64.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In VSCode, how to highlight a box of code, like this:<br><br><img src='042492141213541fdda9f8d79a9f3992c46fd813085197ef903fd8afe7a35a64.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use <font color='#ff5500'>Shift + Alt</font> while clicking and dragging.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to convert a VSCode Python file into a notebook?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to convert a VSCode Python file into a notebook?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You can type <font color='#ff5500'># %%</font> to convert into notebooks (this set of characters demarcates different cells).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do <font color=""#ff5500"">model.train()</font> and <font color=""#ff5500"">model.eval()</font> do in PyTorch?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do <font color=""#ff5500"">model.train()</font> and <font color=""#ff5500"">model.eval()</font> do in PyTorch?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	There are some layers which behave differently in training and evaluation mode; these methods change their behaviour accordingly.<br><br>The 2 main types of layers which behave differently are:<ul><li><b>Dropout</b>, which doesn't actually do any dropping out when evaluating (it's scaled by a factor of <font color=""#ff5500"">1/(1-p)</font> during training to account for this)</li><li><b>BatchNorm</b>, which doesn't take norm over batches when evaluating, instead it uses the moving average of params which it's recorded during training</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do the <font color='#ff5500'>.clone()</font> and <font color='#ff5500'>.detach()</font> methods for tensors do, and what is the difference between them?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do the <font color='#ff5500'>.clone()</font> and <font color='#ff5500'>.detach()</font> methods for tensors do, and what is the difference between them?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Both functions return a new tensor, which can be edited without changing the old one.<br><br>The difference is that <font color='#ff5500'>clone</font> is differentiable (i.e. it backpropagates gradients to its source), whereas <font color='#ff5500'>detach</font> removes the object from the computational graph (i.e. no gradients).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why will the following code not work, and which library can fix this?<br><br><div class='exerciseprecontainer'><pre>import torch<br><br>torch.einsum(""foo bar, bar baz -&gt; foo baz"", t.rand((3, 4)), t.rand((4, 5)))</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why will the following code not work, and which library can fix this?<br><br><div class='exerciseprecontainer'><pre>import torch<br><br>torch.einsum(""foo bar, bar baz -&gt; foo baz"", t.rand((3, 4)), t.rand((4, 5)))</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The code will fail because <font color='#ff5500'>torch.einsum</font> can only use single letters to denote dimensions, rather than variable names.<br><br>An alternative which doesn't have this problem is <font color='#ff5500'>from fancy_einsum import einsum</font>.<br><br><img src='b8ab2307df5d567f7d42b2dfbfa16f18daeaf8a4c77ac0020e94e606ce5fd877.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is some code from a particular type of deep learning design.<br><br>What is this process called, and what are the names for <font color='#ff5500'>W_Q</font>, <font color='#ff5500'>W_K</font> and <font color='#ff5500'>out</font> ?<br><br><div class='exerciseprecontainer'><pre>Q = self.W_Q(x)<br>Q = rearrange(Q, ""b seq (head head_size) -&gt; b head seq head_size"", head=self.num_heads)<br>K = self.W_K(x)<br>K = rearrange(K, ""b seq (head head_size) -&gt; b head seq head_size"", head=self.num_heads)<br>out = einsum(""b head seq_q head_size, b head seq_k head_size -&gt; b head seq_q seq_k"", Q, K)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following is some code from a particular type of deep learning design.<br><br>What is this process called, and what are the names for <font color='#ff5500'>W_Q</font>, <font color='#ff5500'>W_K</font> and <font color='#ff5500'>out</font> ?<br><br><div class='exerciseprecontainer'><pre>Q = self.W_Q(x)<br>Q = rearrange(Q, ""b seq (head head_size) -&gt; b head seq head_size"", head=self.num_heads)<br>K = self.W_K(x)<br>K = rearrange(K, ""b seq (head head_size) -&gt; b head seq head_size"", head=self.num_heads)<br>out = einsum(""b head seq_q head_size, b head seq_k head_size -&gt; b head seq_q seq_k"", Q, K)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This process is called <b>self-attention</b>, and it happens in <b>transformers</b>.<br><br><font color='#ff5500'>W_Q</font> is the **query matrix**, <font color='#ff5500'>W_K</font> is the **key matrix**. These are combined via an inner product over each head and each key-query pair to form <font color='#ff5500'>out</font>, which are the **attention values**. After you apply softmax to <font color='#ff5500'>out</font>, these become the <b>attention probabilities</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a screenshot of the Bert transformer.<br><br>What is the purpose of the three different embeddings, and how are they combined to produce a single embedding vector?<br><br><img src='b75ea364cb5131cd03cbb37549a8bf655b633b49e5b434feb12e253b0aa61d53.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a screenshot of the Bert transformer.<br><br>What is the purpose of the three different embeddings, and how are they combined to produce a single embedding vector?<br><br><img src='b75ea364cb5131cd03cbb37549a8bf655b633b49e5b434feb12e253b0aa61d53.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The <b>token embedding</b> is the most important one; it represents the actual value of the token (i.e. there's a different embedding vector for each possible token in the vocab set).<br><br>The <b>position embedding</b> maps the position of this token in the sequence to a set of vectors. This is important because the position of a word matters when using it to make inferences about other words at different positions.<br><br>Finally, the <b>token type</b> is only used for pretraining, to indicate what type of token this is wrt the pretraining task. For instance, in <b>Next Sentence Prediction</b> the token type is \(0\) or \(1\) to indicate that a token belongs to the first or second sentence in the dataset respectively.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the line ""Tied Unembed"" in this transformer schematic.<br><br><img src='8cd32f30c7cc498d60b56cedcb342080b48a70874d08b243db5edea4d430febd.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain the line ""Tied Unembed"" in this transformer schematic.<br><br><img src='8cd32f30c7cc498d60b56cedcb342080b48a70874d08b243db5edea4d430febd.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The original embedding matrix converted a token into an embedding.<br><br>When we are unembedding, i.e. turning it back into a token (and therefore back into natural language), we use the same embedding matrix, only transposed (this kinda works for some linalg-y reasons related to left-inverses

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the main factor which makes language models different from image models, and how do we get around this problem?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the main factor which makes language models different from image models, and how do we get around this problem?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Language data is not continuous, but images are.<br><br>This makes language harder in some ways, because functions need to be differentiable to run backprop.<br><br>We get around this by splitting language into <b>tokens</b>, and converting each one to an <b>embedding vector</b> in some <b>embedding space</b>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>tokenization</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>tokenization</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The process of demarcating a string of input characters, into series of <b>tokens</b>. This is used in NLP.<br><br>Example of this in action:<br><br><img src='66e510e036cc27a91faf6c723cee489388f28dda83b32cc4ea61c7c08c31f0a9.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>byte-level Byte-Pair encoding</b> ? (short summary)
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>byte-level Byte-Pair encoding</b> ? (short summary)
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A <b>data compression algorithm</b> in which the most common pair of consecutive bytes of data is replaced with a byte that does not occur in that data.<br><br>This allows the building up of more complex bits of language. For instance, characters are eventually composed to get words (e.g. GPT-2 sees ""telephone"" as ""tele"" &amp; ""phone"").

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>GELU</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>GELU</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>GELU</b> stands for <b>Gaussian Error Linear Units</b>.<br><br><img src='5da2f64f8a0e0fc22d5ff6d7c7e3ccfe4c37cdc72af82976e5eba905507d68d8.jpg'><br><br>It is used in some transformer architectures.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If we have language data with dimension <font color='#ff5500'>(batch, sequence, embedding)</font>, which dimensions does <b>Layer Norm</b> normalize over? How about <b>Batch Norm</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If we have language data with dimension <font color='#ff5500'>(batch, sequence, embedding)</font>, which dimensions does <b>Layer Norm</b> normalize over? How about <b>Batch Norm</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Layer Norm</b> normalizes over the <font color='#ff5500'>embedding</font> dimension (i.e. the number of means computes is <font color='#ff5500'>batch_size * sequence_length</font>).<br><br>**Batch Norm** normalizes over the <font color='#ff5500'>batch</font> and <font color='#ff5500'>sequence</font> dimensions (i.e. the complement).<br><br>However, <b>Batch Norm</b> tends to be used in computer vision, not NLP.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	One is layer norm, one is batch norm. Which is which?<br><br><img src='b9bf744d22725b958e95a73d2e923cd436c5fec309d42059f551e494e439afc4.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	One is layer norm, one is batch norm. Which is which?<br><br><img src='b9bf744d22725b958e95a73d2e923cd436c5fec309d42059f551e494e439afc4.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The left is layer norm. The right is batch norm.<br><br>Note that in practice layer norm is more often used with natural language data (pictured here), whereas batchnorm is more commonly used with images.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between <b>batch normalisation</b> and <b>layer normalisation</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between <b>batch normalisation</b> and <b>layer normalisation</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Batch normalisation is:<ul><li>Normally used with image data in shape <font color='#ff5500'>(batch, channels, width, height)</font></li><li>Computes a mean for each <font color='#ff5500'>channel</font></li><li>During inference, uses stored running average mean &amp; std from training (because you can't mean over <font color='#ff5500'>batch=1</font>)</li></ul>Layer normalization is:<ul><li>Normally used with sequence data in the shape <font color='#ff5500'>(batch, sequence, embedding)</font></li><li>Computes means over the <font color='#ff5500'>embedding</font> dim (i.e. number of means computed = <font color='#ff5500'>batch size x sequence length</font>)</li><li>During inference, operates same as in training</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which of <b>Batch Norm</b> and <b>Layer Norm</b> need to keep a moving average of mean and std params, and why?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which of <b>Batch Norm</b> and <b>Layer Norm</b> need to keep a moving average of mean and std params, and why?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Batch Norm</b>, because when in inference mode you need it (you can't take mean and std over the batch dimension if there's only one sample). You don't need it for <b>Layer Norm</b> because means are taken over the <font color='#ff5500'>embedding</font> dimension rather than the <font color='#ff5500'>batch</font> dimension.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this object used for?<br><br><div class='exerciseprecontainer'><pre>import transformers<br>tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is this object used for?<br><br><div class='exerciseprecontainer'><pre>import transformers<br>tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's used for mapping between strings and their token representations. For example:<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; tokenizer.encode(""This is a sentence"")<br>[1212, 318, 257, 6827]</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain this output:<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; import transformers<br><br>&gt;&gt;&gt; tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br><br>&gt;&gt;&gt; tokenizer.tokenize(""This is a sentence"")<br>['This', 'Ġis', 'Ġa', 'Ġsentence']</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Explain this output:<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; import transformers<br><br>&gt;&gt;&gt; tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br><br>&gt;&gt;&gt; tokenizer.tokenize(""This is a sentence"")<br>['This', 'Ġis', 'Ġa', 'Ġsentence']</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The tokenizer is an object which can map between strings and tokens.<br><br>A token can be a character, a part of a word, or a whole word, depending on how the tokenizers are composed. Here, we see that each word has become a token.<br><br>The <font color='#ff5500'>Ġ</font> letter indicates the presence of a space at the start of the word.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which PyTorch function allows you to generate random integers without replacement?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which PyTorch function allows you to generate random integers without replacement?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>torch.randint(low=0, high, size)</font>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to cast a tensor to a different type?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to cast a tensor to a different type?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use the <font color=""#ff5500"">type</font> method, e.g. <font color=""#ff5500"">arr.type(torch.float)</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will a <font color='#ff5500'>@dataclass</font> decorator do automatically in cases like this one?<br><br><img src='bf1de11cd96a773dba85cd252597d01e3eb1da5bc6b246ddcddfdf23c82b75b5.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will a <font color='#ff5500'>@dataclass</font> decorator do automatically in cases like this one?<br><br><img src='bf1de11cd96a773dba85cd252597d01e3eb1da5bc6b246ddcddfdf23c82b75b5.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It will add an <font color='#ff5500'>__init__(self, ...)</font> where it defines all of these attributes (e.g. <font color='#ff5500'>self.name = name</font>). This saves the time to actually write this.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	From where do you import the <font color='#ff5500'>dataclass</font> function, which is used as follows?<br><br><img src='49ab4fe2458e7fe34d9e0c3c702591981ddc69d99fc8bb9e357fbac52071e260.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	From where do you import the <font color='#ff5500'>dataclass</font> function, which is used as follows?<br><br><img src='49ab4fe2458e7fe34d9e0c3c702591981ddc69d99fc8bb9e357fbac52071e260.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You import it with <font color='#ff5500'>from dataclasses import dataclass</font>.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the function <font color='#ff5500'>t.nn.utils.clip_grad_norm_</font> do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the function <font color='#ff5500'>t.nn.utils.clip_grad_norm_</font> do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It takes in <font color='#ff5500'>parameters</font> (iterable of tensors, or a tensor) and <font color='#ff5500'>max_norm</font> (float or int), and clips the gradient norm of all the parameters accordingly.<br><br>This is useful early in training, when the gradients can be extremely high.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose we trained a language model to predict the stars for an IMDB rating, based on the text of the rating.<br><br>What is one disadvantage of treating it as a classification problem with 10 classes, and using cross entropy loss?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose we trained a language model to predict the stars for an IMDB rating, based on the text of the rating.<br><br>What is one disadvantage of treating it as a classification problem with 10 classes, and using cross entropy loss?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Cross entropy loss won't capture the intuition that the classes are ordered (e.g. 1 star is closer to 2 than it is to 10). Regression would be more appropriate.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose you're doing sentiment analysis for IMDB reviews, and have two classes (positive and negative).<br><br>If you use cross entropy loss as a training criterion, and your accuracy metric is how many are classed correctly (i.e. higher probability put on the correct answer), why are these two ""not aligned""?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose you're doing sentiment analysis for IMDB reviews, and have two classes (positive and negative).<br><br>If you use cross entropy loss as a training criterion, and your accuracy metric is how many are classed correctly (i.e. higher probability put on the correct answer), why are these two ""not aligned""?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Cross entropy will push you towards being even more certain of your answer (e.g. pushing 99% closer to 100%), whereas all your accuracy metric cares about is whether you get past 50%.<br><br>So if you're only trying to maximise number of correct classifications, different loss functions might be more appropriate.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose you are using discrete cross entropy as a loss function for a sentiment analysis task (classifying IMDB reviews positive or negative). Your language size is 28996.<br><br>When you start training, your loss is initially around 10.3, then it drops down to 7.4 pretty quickly, before plateauing for a while. What is one interpretation of this?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose you are using discrete cross entropy as a loss function for a sentiment analysis task (classifying IMDB reviews positive or negative). Your language size is 28996.<br><br>When you start training, your loss is initially around 10.3, then it drops down to 7.4 pretty quickly, before plateauing for a while. What is one interpretation of this?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	\(\ln{28996} \approx 10.3\), which is the loss you'd get if every guess was uniformly random (which it will be at first).<br><br>You might expect the model to learn word frequencies before it learns relationships between words, so it might quickly improve by matching its assigned probabilities to unigram frequencies in natural language (which gave an error of approximately 7.4 in the MLAB experiments).<br><br>After this point, the rate of increase might slow down, because you'd need to learn relationships between words in order to improve.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does an underscore after a PyTorch function denote?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does an underscore after a PyTorch function denote?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	That the function is <b>inplace</b>. For instance:<br><br><img src='da4faf2960b610ea4e5e6424ada1476aada1685a3b87de0f16069120147e06bb.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the result of this code likely to be? (not exactly, just the general idea)<br><br><div class='exerciseprecontainer'><pre>tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br>tokenizer.tokenize(""seashells"")</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the result of this code likely to be? (not exactly, just the general idea)<br><br><div class='exerciseprecontainer'><pre>tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br>tokenizer.tokenize(""seashells"")</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This tokenizer uses <b>byte-level Byte-Pair-Encoding</b> to construct tokens out of characters (i.e. it glues together common combinations).<br><br>We would expect <font color='#ff5500'>""seashells""</font> to decompose into multiple subtokens, because it's quite a long word but has lots of common subcomponents.<br><br>Sure enough, we get:<br><br><img src='e5a5775a11e4971692a8521fb55ace6e599ba2b220dfa958907e8b646a5c5237.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>unidirectional attention</b>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>unidirectional attention</b>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	An attention mechanism where a pair of tokens <font color='#ff5500'>t_q</font>, <font color='#ff5500'>t_k</font> in the sequence can only attend to each other in the QK-matrix if <font color='#ff5500'>q &gt;= k</font>.<br><br>In other words, the residual streams can't read information from tokens that come after it in the sequence.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a class definition for <font color='#ff5500'>GPT2</font>. What is the purpose of the following lines:<ul><li>The <font color='#ff5500'>pos</font> line (second in the <font color='#ff5500'>forward</font> method)</li><li>The <font color='#ff5500'>einsum</font> line (second last in the <font color='#ff5500'>forward</font> method)</li></ul>?<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.Embedding(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.Embedding(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = nn.Sequential(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        self.ln = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        """"""<br>        x: shape (batch, seq), dtype t.int64 - the token ids<br>        Return: shape (batch, seq, vocab_size), dtype t.float32 - the output logits<br>        """"""<br>        batch, seq = x.shape<br>        pos = t.arange(seq).to(x.device)<br>        x = self.token_embedding(x) + self.pos_embedding(pos)<br>        x = self.dropout(x)<br>        for i, block in enumerate(self.blocks):<br>            x = block(x, cache=cache[i] if cache else None)<br>        x = self.ln(x)<br>        x = t.einsum(""bnl, vl -&gt; bnv"", x, self.token_embedding.weight)<br>        return x</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a class definition for <font color='#ff5500'>GPT2</font>. What is the purpose of the following lines:<ul><li>The <font color='#ff5500'>pos</font> line (second in the <font color='#ff5500'>forward</font> method)</li><li>The <font color='#ff5500'>einsum</font> line (second last in the <font color='#ff5500'>forward</font> method)</li></ul>?<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.Embedding(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.Embedding(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = nn.Sequential(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        self.ln = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        """"""<br>        x: shape (batch, seq), dtype t.int64 - the token ids<br>        Return: shape (batch, seq, vocab_size), dtype t.float32 - the output logits<br>        """"""<br>        batch, seq = x.shape<br>        pos = t.arange(seq).to(x.device)<br>        x = self.token_embedding(x) + self.pos_embedding(pos)<br>        x = self.dropout(x)<br>        for i, block in enumerate(self.blocks):<br>            x = block(x, cache=cache[i] if cache else None)<br>        x = self.ln(x)<br>        x = t.einsum(""bnl, vl -&gt; bnv"", x, self.token_embedding.weight)<br>        return x</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The <font color='#ff5500'>pos</font> line is creating a positional embedding, which gets added to the token embedding. Each token in the sequence gets a different embedding vector (hence the use of <font color='#ff5500'>t.arange</font>).<br><br><img src='19639f56f22492231db44aedc79915c327cbac8d56901b08fc8d5f43db6fd2bf.jpg'><br><br>The <font color='#ff5500'>einsum</font> line is performing an unembedding which is tied to <font color='#ff5500'>self.token_embedding</font> (note, this means gradients will still backprop through the unembedding weights as well).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose I wanted my <font color='#ff5500'>GPT2</font> class to support caching, to speed up the attention calculations. What is wrong with this code?<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br><br>    def __init__(self, config: GPTConfig):<br>        ...<br><br>        self.blocks = nn.Sequential(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        ...<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        ...<br>        x = self.blocks(x, cache=cache[i] if cache else None)<br>        ...<br>        return x</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Suppose I wanted my <font color='#ff5500'>GPT2</font> class to support caching, to speed up the attention calculations. What is wrong with this code?<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br><br>    def __init__(self, config: GPTConfig):<br>        ...<br><br>        self.blocks = nn.Sequential(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        ...<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        ...<br>        x = self.blocks(x, cache=cache[i] if cache else None)<br>        ...<br>        return x</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The problem is in the line <font color='#ff5500'>x = block(x, ...)</font>, because you can't pass keyword arguments to a <font color='#ff5500'>nn.Sequential</font> module like this.<br><br>Instead, you need to iterate through each block in <font color='#ff5500'>self.blocks</font>, and apply the block with the <font color='#ff5500'>cache</font> argument.<br><br><div class='exerciseprecontainer'><pre>for i, block in enumerate(self.blocks):<br>    x = block(x, cache=cache[i] if cache else None)</pre></div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is one part of the code below which could be improved? Give two different functions I could use to make this improvement.<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.Embedding(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.Embedding(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = [<br>            GPT2Block(config.hidden_size), config.num_heads, config.dropout, config.layer_norm_epsilon)<br>            for _ in range(config.num_layers<br>        ]<br>        self.ln = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_epsilon)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is one part of the code below which could be improved? Give two different functions I could use to make this improvement.<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.Embedding(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.Embedding(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = [<br>            GPT2Block(config.hidden_size), config.num_heads, config.dropout, config.layer_norm_epsilon)<br>            for _ in range(config.num_layers<br>        ]<br>        self.ln = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_epsilon)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>self.blocks</font> is a list, so it won't be printed out when I print <font color='#ff5500'>GPT2()</font>.<br><br>Two things I could do instead are:<ul><li><font color='#ff5500'>self.blocks = nn.Sequential(*[GPT2Block...])</font> which can be iterated through (i.e. <font color='#ff5500'>for x in self.blocks:</font>) and also run directly (i.e. <font color='#ff5500'>self.blocks(x)</font>)</li><li><font color='#ff5500'>self.blocks = nn.ModuleList([GPT2Block...])</font> which can only be iterated through, not run directly</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a class definition for <font color='#ff5500'>GPT2</font>. Explain what the following lines are doing:<ul><li>The <font color='#ff5500'>pos</font> line (second in the <font color='#ff5500'>forward</font> method)</li><li>The <font color='#ff5500'>einsum</font> line (second last in the <font color='#ff5500'>forward</font> method)</li></ul><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.Embedding(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.Embedding(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = nn.Sequential(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        self.ln = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        """"""<br>        x: shape (batch, seq), dtype t.int64 - the token ids<br>        Return: shape (batch, seq, vocab_size), dtype t.float32 - the output logits<br>        """"""<br>        batch, seq = x.shape<br>        pos = t.arange(seq).to(x.device)<br>        x = self.token_embedding(x) + self.pos_embedding(pos)<br>        x = self.dropout(x)<br>        for i, block in enumerate(self.blocks):<br>            x = block(x, cache=cache[i] if cache else None)<br>        x = self.ln(x)<br>        x = t.einsum(""bnl, vl -&gt; bnv"", x, self.token_embedding.weight)<br>        return x</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Below is a class definition for <font color='#ff5500'>GPT2</font>. Explain what the following lines are doing:<ul><li>The <font color='#ff5500'>pos</font> line (second in the <font color='#ff5500'>forward</font> method)</li><li>The <font color='#ff5500'>einsum</font> line (second last in the <font color='#ff5500'>forward</font> method)</li></ul><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.Embedding(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.Embedding(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = nn.Sequential(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        self.ln = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        """"""<br>        x: shape (batch, seq), dtype t.int64 - the token ids<br>        Return: shape (batch, seq, vocab_size), dtype t.float32 - the output logits<br>        """"""<br>        batch, seq = x.shape<br>        pos = t.arange(seq).to(x.device)<br>        x = self.token_embedding(x) + self.pos_embedding(pos)<br>        x = self.dropout(x)<br>        for i, block in enumerate(self.blocks):<br>            x = block(x, cache=cache[i] if cache else None)<br>        x = self.ln(x)<br>        x = t.einsum(""bnl, vl -&gt; bnv"", x, self.token_embedding.weight)<br>        return x</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The <font color='#ff5500'>pos</font> line is creating a positional embedding, which gets added to the token embedding. Each token in the sequence gets a different embedding vector (hence the use of <font color='#ff5500'>t.arange</font>).<br><br><img src='19639f56f22492231db44aedc79915c327cbac8d56901b08fc8d5f43db6fd2bf.jpg'><br><br>The <font color='#ff5500'>einsum</font> line is performing an unembedding which is tied to <font color='#ff5500'>self.token_embedding</font> (note, this means gradients will still backprop through the unembedding weights as well).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will the output of this be?<br><br><img src='10c946c953bbd059fb3b077135b497c70d6a9b68abb3dd0407bd536dadfb83ab.jpg'>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What will the output of this be?<br><br><img src='10c946c953bbd059fb3b077135b497c70d6a9b68abb3dd0407bd536dadfb83ab.jpg'>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<img src='10c946c953bbd059fb3b077135b497c70d6a9b68abb3dd0407bd536dadfb83ab.jpg'><br><br>Explanation: <font color='#ff5500'>nn.Embedding()</font> performs a table lookup, i.e. for each element in <font color='#ff5500'>x = [1, 2, 4]</font> it gets the vector from the corresponding row of the weights matrix.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which PyTorch module will give you a lookup table that stores embeddings for some fixed size?<br><br>What are the first 2 arguments when you call this module?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which PyTorch module will give you a lookup table that stores embeddings for some fixed size?<br><br>What are the first 2 arguments when you call this module?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>nn.Embedding()</font><br><br>The first 2 arguments (the most important ones) are:<ul><li><font color='#ff5500'>num_embeddings</font> (which is the size of the vocabulary set you're embedding from)</li><li><font color='#ff5500'>embedding_dim</font> (which is the number of elements in each vector in the embedding space)</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is wrong with this code, and how to fix it?<br><br><div class='exerciseprecontainer'><pre>embedding = nn.Embedding(5, 2)<br><br>x = t.tensor([1,2,4,8])<br><br>y = embedding(x)</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is wrong with this code, and how to fix it?<br><br><div class='exerciseprecontainer'><pre>embedding = nn.Embedding(5, 2)<br><br>x = t.tensor([1,2,4,8])<br><br>y = embedding(x)</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The problem is that <font color='#ff5500'>x</font> has elements greater than 4, but the <font color='#ff5500'>embedding</font> matrix only has 5 rows (i.e. it's only expecting tokens <font color='#ff5500'>[0, 1, 2, 3, 4]</font>.<br><br>You can fix this by increasing <font color='#ff5500'>num_embeddings</font> (the first argument in <font color='#ff5500'>nn.Embedding</font>).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color='#ff5500'>nn.Embedding</font> and <font color='#ff5500'>nn.Linear</font> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between <font color='#ff5500'>nn.Embedding</font> and <font color='#ff5500'>nn.Linear</font> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>Linear</font> applies a linear map, but <font color='#ff5500'>Embedding</font> performs lookup on an embedding matrix and returns an array containing vectors for each element in the input.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the context of transformers, what is this code likely to be doing?<br><br><div class='exerciseprecontainer'><pre>def f(attn_scores):<br>    mask = t.tril(t.ones_like(attn_scores)).bool()<br>    neg_inf = t.tensor(-10000.0).to(attn_scores.device)<br>    masked_attn_scores = t.where(mask, attn_scores, neg_inf)<br>    return masked_attn_scores</pre></div>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the context of transformers, what is this code likely to be doing?<br><br><div class='exerciseprecontainer'><pre>def f(attn_scores):<br>    mask = t.tril(t.ones_like(attn_scores)).bool()<br>    neg_inf = t.tensor(-10000.0).to(attn_scores.device)<br>    masked_attn_scores = t.where(mask, attn_scores, neg_inf)<br>    return masked_attn_scores</pre></div>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is masking the scores of the attention matrix, to implement unidirectional attention.<br><br>This is where each token can only query tokens equal to or before it in the sequence.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the function <font color='#ff5500'>t.distributions.categorical.Categorical()</font>, and how does it behave?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the function <font color='#ff5500'>t.distributions.categorical.Categorical()</font>, and how does it behave?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It can be passed either <font color='#ff5500'>probs</font> or <font color='#ff5500'>logits</font> as arguments (tensors), and returns an object from which samples can be drawn according to the corresponding distribution. Example:<br><br><img src='ed07ee7ab3ae4109255e30faa2610b6127fe1fa6e397e3341518dd65a39ceed7.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to sample according to a particular distribution of weights?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to sample according to a particular distribution of weights?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<font color='#ff5500'>torch.distributions.categorical.Categorical</font><br><br>This function takes <font color='#ff5500'>probs</font> (or <font color='#ff5500'>logits</font>) as inputs, and returns an object from which you can call <font color='#ff5500'>.sample()</font> to get samples.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is top-\(p\) (aka ""nucleus"") sampling?<br><br>What is an advantage over top-\(k\) sampling?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is top-\(p\) (aka ""nucleus"") sampling?<br><br>What is an advantage over top-\(k\) sampling?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is when you look at the probabilities on all tokens outputted by your transformer, choose the most likely ones up until the cumulative probability exceeds some threshold \(p\), then sample those tokens using their respective (normalized) probabilities.<br><br>This can be better than top-\(k\) sampling because it flexibly adapts between cases where there is one obviously correct word, and there is no obviously correct word (top-\(k\) will sample from the same number of tokens in both cases).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>beam search</b> ?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is <b>beam search</b> ?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<b>Beam search</b> is a heuristic search algorithm which involves storing the most promising \(k\) paths in a branching tree (for some fixed value \(k\)), and constructing longer branches by testing continuations of those \(k\) branches.<br><br>When doing text completion in transformers, it can be a good improvement over greedy search (which only ever considers the next word in the sequence, with no thought for how the statement might continue).<br><br><img src='b7d63b24b1c41b597ae6673416b4fb03736e5dec7be054e0fb6064a4e2ad7c0e.jpg'>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is the start of a training function. Start a <font color='#ff5500'>wandb</font> run in the project called <font color='#ff5500'>""w1d4""</font>, which should store hyperparameters in a dictionary called <font color='#ff5500'>hyperparams_dict</font>.<br><br><div class='exerciseprecontainer'><pre>def train(hyperparams_dict: dict[str, Any]):<br>    wandb.<input maxlength='4' name='init_61578871' style='width: 4ch;'>(<input maxlength='7' name='project_58275658' style='width: 7ch;'>=""w1d4"", <input maxlength='6' name='config_86647661' style='width: 6ch;'>=hyperparams_dict)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This is the start of a training function. Start a <font color='#ff5500'>wandb</font> run in the project called <font color='#ff5500'>""w1d4""</font>, which should store hyperparameters in a dictionary called <font color='#ff5500'>hyperparams_dict</font>.<br><br><div class='exerciseprecontainer'><pre>def train(hyperparams_dict: dict[str, Any]):<br>    wandb.<input maxlength='4' name='init_61578871' style='width: 4ch;'>(<input maxlength='7' name='project_58275658' style='width: 7ch;'>=""w1d4"", <input maxlength='6' name='config_86647661' style='width: 6ch;'>=hyperparams_dict)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This <font color='#ff5500'>wandb</font> code should be run just before you start iterating through your trainloader. You should:<ul><li>Use <font color='#ff5500'>loss_fn</font> as your loss function</li><li>Log everything (parameters and the gradients) every ten batches, and include a graph</li></ul>Fill in the code:<br><br><div class='exerciseprecontainer'><pre>wandb.<input maxlength='5' name='watch_62282325' style='width: 5ch;'>(model, <input maxlength='9' name='criterion_56728163' style='width: 9ch;'>=loss_fn, <input maxlength='3' name='log_66355549' style='width: 3ch;'>=""all"", <input maxlength='8' name='log_freq_45701256' style='width: 8ch;'>=10, <input maxlength='9' name='log_graph_82871533' style='width: 9ch;'>=True)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	This <font color='#ff5500'>wandb</font> code should be run just before you start iterating through your trainloader. You should:<ul><li>Use <font color='#ff5500'>loss_fn</font> as your loss function</li><li>Log everything (parameters and the gradients) every ten batches, and include a graph</li></ul>Fill in the code:<br><br><div class='exerciseprecontainer'><pre>wandb.<input maxlength='5' name='watch_62282325' style='width: 5ch;'>(model, <input maxlength='9' name='criterion_56728163' style='width: 9ch;'>=loss_fn, <input maxlength='3' name='log_66355549' style='width: 3ch;'>=""all"", <input maxlength='8' name='log_freq_45701256' style='width: 8ch;'>=10, <input maxlength='9' name='log_graph_82871533' style='width: 9ch;'>=True)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code to log your training run to weights and biases.<br><br><font color='#ff5500'>args</font> stores hyperparameters you want to record for this run, as well as the frequency you want to log your training loss with.<br><br>You should log gradients every 100 batches.<br><br><div class='exerciseprecontainer'><pre>import wandb<br>wandb.init(<input maxlength='6' name='config_86647661' style='width: 6ch;'>=args)<br><br>model = ... # set up your model<br><br>wandb.<input maxlength='5' name='watch_62282325' style='width: 5ch;'>(model, <input maxlength='8' name='log_freq_45701256' style='width: 8ch;'>=100)<br><br>model.train()<br>for batch_idx, (data, target) in enumerate(train_loader):<br>    output = model(data)<br>    loss = F.nll_loss(output, target)<br>    loss.backward()<br>    optimizer.step()<br>    if batch_idx % args.log_interval == 0:<br>        wandb.log({""loss"": loss})</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code to log your training run to weights and biases.<br><br><font color='#ff5500'>args</font> stores hyperparameters you want to record for this run, as well as the frequency you want to log your training loss with.<br><br>You should log gradients every 100 batches.<br><br><div class='exerciseprecontainer'><pre>import wandb<br>wandb.init(<input maxlength='6' name='config_86647661' style='width: 6ch;'>=args)<br><br>model = ... # set up your model<br><br>wandb.<input maxlength='5' name='watch_62282325' style='width: 5ch;'>(model, <input maxlength='8' name='log_freq_45701256' style='width: 8ch;'>=100)<br><br>model.train()<br>for batch_idx, (data, target) in enumerate(train_loader):<br>    output = model(data)<br>    loss = F.nll_loss(output, target)<br>    loss.backward()<br>    optimizer.step()<br>    if batch_idx % args.log_interval == 0:<br>        wandb.log({""loss"": loss})</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement this <b>MLP</b> from the <b>Bert</b> transformer.<br><br><div class='exerciseprecontainer'><pre>class BertMLP(nn.Module):<br>    def __init__(self, config: BertConfig):<br>        super().__init__()<br>        self.first_linear = nn.<input maxlength='6' name='Linear_66045967' style='width: 6ch;'>(config.hidden_size, config.intermediate_size)<br>        self.second_linear = nn.<input maxlength='6' name='Linear_71177437' style='width: 6ch;'>(config.intermediate_size, config.hidden_size)<br>        self.dropout = nn.<input maxlength='7' name='Dropout_71384525' style='width: 7ch;'>(config.dropout)<br>        self.layer_norm = nn.<input maxlength='9' name='LayerNorm_69728249' style='width: 9ch;'>(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        skip = x<br>        x = self.first_linear(x)<br>        x = <input maxlength='6' name='F.gelu_37825832' style='width: 6ch;'>(x)<br>        x = self.second_linear(x)<br>        x = self.dropout(x)<br>        x = self.layer_norm(<input maxlength='1' name='x_70141157' style='width: 1ch;'> <input maxlength='1' name='+_20348445' style='width: 1ch;'> <input maxlength='4' name='skip_24349708' style='width: 4ch;'>)<br>        return x</pre></div><br><img src='8281ad071761505fae7f49d35b341f98ed337a70028a25070bc184e894b389e6.jpg'>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement this <b>MLP</b> from the <b>Bert</b> transformer.<br><br><div class='exerciseprecontainer'><pre>class BertMLP(nn.Module):<br>    def __init__(self, config: BertConfig):<br>        super().__init__()<br>        self.first_linear = nn.<input maxlength='6' name='Linear_66045967' style='width: 6ch;'>(config.hidden_size, config.intermediate_size)<br>        self.second_linear = nn.<input maxlength='6' name='Linear_71177437' style='width: 6ch;'>(config.intermediate_size, config.hidden_size)<br>        self.dropout = nn.<input maxlength='7' name='Dropout_71384525' style='width: 7ch;'>(config.dropout)<br>        self.layer_norm = nn.<input maxlength='9' name='LayerNorm_69728249' style='width: 9ch;'>(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor) -&gt; t.Tensor:<br>        skip = x<br>        x = self.first_linear(x)<br>        x = <input maxlength='6' name='F.gelu_37825832' style='width: 6ch;'>(x)<br>        x = self.second_linear(x)<br>        x = self.dropout(x)<br>        x = self.layer_norm(<input maxlength='1' name='x_70141157' style='width: 1ch;'> <input maxlength='1' name='+_20348445' style='width: 1ch;'> <input maxlength='4' name='skip_24349708' style='width: 4ch;'>)<br>        return x</pre></div><br><img src='8281ad071761505fae7f49d35b341f98ed337a70028a25070bc184e894b389e6.jpg'>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the four weight matrices used in transformer self-attention circuits, and which one is a different shape from the others?
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the four weight matrices used in transformer self-attention circuits, and which one is a different shape from the others?
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement the relu and gelu activation functions, within a PyTorch <font color='#ff5500'>nn.Module</font>:<br><br><div class='exerciseprecontainer'><pre>from torch import nn<br><br>self.gelu = nn.<input maxlength='4' name='GELU_69169246' style='width: 4ch;'>()<br>self.relu = nn.<input maxlength='4' name='ReLU_42047088' style='width: 4ch;'>()</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Implement the relu and gelu activation functions, within a PyTorch <font color='#ff5500'>nn.Module</font>:<br><br><div class='exerciseprecontainer'><pre>from torch import nn<br><br>self.gelu = nn.<input maxlength='4' name='GELU_69169246' style='width: 4ch;'>()<br>self.relu = nn.<input maxlength='4' name='ReLU_42047088' style='width: 4ch;'>()</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to download files from a url.<br><br><div class='exerciseprecontainer'><pre>import os<br>import requests<br><br>def maybe_download(url: str, path: str) -&gt; None:<br>    """"""<br>    Download the file from url and save it to path. If path already exists, do nothing.<br>    """"""<br>    if <input maxlength='14' name='os.path.exists_21063457' style='width: 14ch;'>(path):<br>        return<br>    print(""Downloading:"", url)<br>    response = <input maxlength='12' name='requests.get_18806302' style='width: 12ch;'>(url)<br>    with open(path, ""<input maxlength='1' name='w_76203610' style='width: 1ch;'>b"") as f:<br>        f.write(response.<input maxlength='7' name='content_33759419' style='width: 7ch;'>)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this function to download files from a url.<br><br><div class='exerciseprecontainer'><pre>import os<br>import requests<br><br>def maybe_download(url: str, path: str) -&gt; None:<br>    """"""<br>    Download the file from url and save it to path. If path already exists, do nothing.<br>    """"""<br>    if <input maxlength='14' name='os.path.exists_21063457' style='width: 14ch;'>(path):<br>        return<br>    print(""Downloading:"", url)<br>    response = <input maxlength='12' name='requests.get_18806302' style='width: 12ch;'>(url)<br>    with open(path, ""<input maxlength='1' name='w_76203610' style='width: 1ch;'>b"") as f:<br>        f.write(response.<input maxlength='7' name='content_33759419' style='width: 7ch;'>)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the output of this function.<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; import transformers<br><br>&gt;&gt;&gt; tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br><br>&gt;&gt;&gt; tokenizer(""The answer is 42"")<br>{'<input maxlength='9' name='input_ids_93996151' style='width: 9ch;'>': [464, 3280, 318, 5433], '<input maxlength='14' name='attention_mask_34745544' style='width: 14ch;'>': [1, 1, 1, 1]}</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in the output of this function.<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; import transformers<br><br>&gt;&gt;&gt; tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br><br>&gt;&gt;&gt; tokenizer(""The answer is 42"")<br>{'<input maxlength='9' name='input_ids_93996151' style='width: 9ch;'>': [464, 3280, 318, 5433], '<input maxlength='14' name='attention_mask_34745544' style='width: 14ch;'>': [1, 1, 1, 1]}</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code on tokenizers.<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; import transformers<br><br>&gt;&gt;&gt; tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br><br>&gt;&gt;&gt; t = tokenizer(""The answer is 42"")<br>&gt;&gt;&gt; t<br>{'input_ids': [464, 3280, 318, 5433], 'attention_mask': [<input maxlength='10' name='1, 1, 1, 1_87910634' style='width: 10ch;'>]}<br><br>&gt;&gt;&gt; [tokenizer.<input maxlength='6' name='decode_19704883' style='width: 6ch;'>(x) for x in t[""input_ids""]]<br>['<input maxlength='3' name='The_13661743' style='width: 3ch;'>', '<input maxlength='7' name=' answer_89753579' style='width: 7ch;'>', '<input maxlength='3' name=' is_94603604' style='width: 3ch;'>', '<input maxlength='3' name=' 42_57486047' style='width: 3ch;'>']</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code on tokenizers.<br><br><div class='exerciseprecontainer'><pre>&gt;&gt;&gt; import transformers<br><br>&gt;&gt;&gt; tokenizer = transformers.AutoTokenizer.from_pretrained(""gpt2"")<br><br>&gt;&gt;&gt; t = tokenizer(""The answer is 42"")<br>&gt;&gt;&gt; t<br>{'input_ids': [464, 3280, 318, 5433], 'attention_mask': [<input maxlength='10' name='1, 1, 1, 1_87910634' style='width: 10ch;'>]}<br><br>&gt;&gt;&gt; [tokenizer.<input maxlength='6' name='decode_19704883' style='width: 6ch;'>(x) for x in t[""input_ids""]]<br>['<input maxlength='3' name='The_13661743' style='width: 3ch;'>', '<input maxlength='7' name=' answer_89753579' style='width: 7ch;'>', '<input maxlength='3' name=' is_94603604' style='width: 3ch;'>', '<input maxlength='3' name=' 42_57486047' style='width: 3ch;'>']</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code for a <font color='#ff5500'>GPT2</font> class.<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.<input maxlength='9' name='Embedding_48637074' style='width: 9ch;'>(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.<input maxlength='9' name='Embedding_04239206' style='width: 9ch;'>(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = nn.<input maxlength='10' name='Sequential_84321228' style='width: 10ch;'>(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        self.ln = nn.<input maxlength='9' name='LayerNorm_69728249' style='width: 9ch;'>(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        """"""<br>        x: shape (batch, seq), dtype t.int64 - the token ids<br>        Return: shape (batch, seq, vocab_size), dtype t.float32 - the output logits<br>        """"""<br>        batch, seq = x.shape<br>        pos = t.arange(seq).to(x.device)<br>        x = self.token_embedding(x) + self.pos_embedding(pos)<br>        x = self.dropout(x)<br>        x = self.blocks(x)<br>        x = self.ln(x)<br>        x = t.einsum(""bnl, vl -&gt; bnv"", x, self.token_embedding.weight)<br>        return x</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code for a <font color='#ff5500'>GPT2</font> class.<br><br><div class='exerciseprecontainer'><pre>class GPT2(nn.Module):<br>    def __init__(self, config: GPTConfig):<br>        super().__init__()<br>        self.vocab_size = config.vocab_size<br>        self.token_embedding = nn.<input maxlength='9' name='Embedding_48637074' style='width: 9ch;'>(config.vocab_size, config.hidden_size)<br>        self.pos_embedding = nn.<input maxlength='9' name='Embedding_04239206' style='width: 9ch;'>(config.max_position_embeddings, config.hidden_size)<br>        self.dropout = nn.Dropout(config.dropout)<br>        self.blocks = nn.<input maxlength='10' name='Sequential_84321228' style='width: 10ch;'>(*[<br>                GPT2Block(config.hidden_size, config.num_heads, config.dropout, config.layer_norm_epsilon)<br>                for _ in range(config.num_layers)<br>        ])<br>        self.ln = nn.<input maxlength='9' name='LayerNorm_69728249' style='width: 9ch;'>(config.hidden_size, eps=config.layer_norm_epsilon)<br><br>    def forward(self, x: t.Tensor, cache=None) -&gt; t.Tensor:<br>        """"""<br>        x: shape (batch, seq), dtype t.int64 - the token ids<br>        Return: shape (batch, seq, vocab_size), dtype t.float32 - the output logits<br>        """"""<br>        batch, seq = x.shape<br>        pos = t.arange(seq).to(x.device)<br>        x = self.token_embedding(x) + self.pos_embedding(pos)<br>        x = self.dropout(x)<br>        x = self.blocks(x)<br>        x = self.ln(x)<br>        x = t.einsum(""bnl, vl -&gt; bnv"", x, self.token_embedding.weight)<br>        return x</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; embedding = nn.Embedding(7, 5)<br><br>&gt;&gt;&gt; x = t.tensor([[1, 2, 4], [3, 5, 6]])<br><br>&gt;&gt;&gt; y = embedding(x)<br><br>&gt;&gt;&gt; print(y.shape)<br>torch.Size([<input maxlength='7' name='2, 3, 5_26308769' style='width: 7ch;'>])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class='exerciseprecontainer'><pre>&gt;&gt;&gt; embedding = nn.Embedding(7, 5)<br><br>&gt;&gt;&gt; x = t.tensor([[1, 2, 4], [3, 5, 6]])<br><br>&gt;&gt;&gt; y = embedding(x)<br><br>&gt;&gt;&gt; print(y.shape)<br>torch.Size([<input maxlength='7' name='2, 3, 5_26308769' style='width: 7ch;'>])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code to implement <b>unidirectional attention</b>.<br><br><div class='exerciseprecontainer'><pre>mask = t.<input maxlength='4' name='tril_27211094' style='width: 4ch;'>(t.ones_<input maxlength='4' name='like_44417107' style='width: 4ch;'>(attn_scores)).<input maxlength='4' name='bool_97846746' style='width: 4ch;'>()<br>neg_inf = t.tensor(-10000.0).to(attn_scores.device)<br>masked_attn_scores = t.<input maxlength='5' name='where_78328187' style='width: 5ch;'>(mask, attn_scores, neg_inf)</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code to implement <b>unidirectional attention</b>.<br><br><div class='exerciseprecontainer'><pre>mask = t.<input maxlength='4' name='tril_27211094' style='width: 4ch;'>(t.ones_<input maxlength='4' name='like_44417107' style='width: 4ch;'>(attn_scores)).<input maxlength='4' name='bool_97846746' style='width: 4ch;'>()<br>neg_inf = t.tensor(-10000.0).to(attn_scores.device)<br>masked_attn_scores = t.<input maxlength='5' name='where_78328187' style='width: 5ch;'>(mask, attn_scores, neg_inf)</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; import torch as t<br><br>&gt;&gt;&gt; t.bincount(t.tensor([1, 1, 1, 2, 2, 3]))<br>tensor([<input maxlength=""10"" name=""0, 3, 2, 1_20279323"" style=""width: 10ch;"">])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<div class=""exerciseprecontainer""><pre>&gt;&gt;&gt; import torch as t<br><br>&gt;&gt;&gt; t.bincount(t.tensor([1, 1, 1, 2, 2, 3]))<br>tensor([<input maxlength=""10"" name=""0, 3, 2, 1_20279323"" style=""width: 10ch;"">])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code to sample according to a probability distribution.<br><br><div class='exerciseprecontainer'><pre>import torch<br><br>t = torch.<input maxlength='13' name='distributions_49562750' style='width: 13ch;'>.<input maxlength='11' name='categorical_04220055' style='width: 11ch;'>.<input maxlength='11' name='Categorical_61576972' style='width: 11ch;'>(probs=torch.tensor([.1, .9]))<br><br>t.sample(torch.Size([2, 10]))<br>tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],<br>        [1, 1, 1, 0, 1, 0, 1, 1, 1, 1]])</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Fill in this code to sample according to a probability distribution.<br><br><div class='exerciseprecontainer'><pre>import torch<br><br>t = torch.<input maxlength='13' name='distributions_49562750' style='width: 13ch;'>.<input maxlength='11' name='categorical_04220055' style='width: 11ch;'>.<input maxlength='11' name='Categorical_61576972' style='width: 11ch;'>(probs=torch.tensor([.1, .9]))<br><br>t.sample(torch.Size([2, 10]))<br>tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],<br>        [1, 1, 1, 0, 1, 0, 1, 1, 1, 1]])</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement greedy search, i.e. a function which returns the most likely next token (ignoring future tokens).<br><br><div class='exerciseprecontainer'><pre>def greedy_search(logits: t.Tensor) -&gt; int:<br>    out = logits.<input maxlength='6' name='argmax_11851365' style='width: 6ch;'>().<input maxlength='4' name='item_35104221' style='width: 4ch;'>()<br>    return out</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement greedy search, i.e. a function which returns the most likely next token (ignoring future tokens).<br><br><div class='exerciseprecontainer'><pre>def greedy_search(logits: t.Tensor) -&gt; int:<br>    out = logits.<input maxlength='6' name='argmax_11851365' style='width: 6ch;'>().<input maxlength='4' name='item_35104221' style='width: 4ch;'>()<br>    return out</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement a function to apply <b>temperature</b> (i.e. you apply temperature before taking softmax).<br><br><div class='exerciseprecontainer'><pre>def apply_temperature(logits: t.Tensor, temperature: float) -&gt; t.Tensor:<br>    """"""<br>    logits: shape (vocab_size, )<br>    Return: shape (vocab_size, )<br>    """"""<br>    return <input maxlength='6' name='logits_91309553' style='width: 6ch;'> <input maxlength='1' name='/_06901187' style='width: 1ch;'> <input maxlength='11' name='temperature_22073747' style='width: 11ch;'></pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement a function to apply <b>temperature</b> (i.e. you apply temperature before taking softmax).<br><br><div class='exerciseprecontainer'><pre>def apply_temperature(logits: t.Tensor, temperature: float) -&gt; t.Tensor:<br>    """"""<br>    logits: shape (vocab_size, )<br>    Return: shape (vocab_size, )<br>    """"""<br>    return <input maxlength='6' name='logits_91309553' style='width: 6ch;'> <input maxlength='1' name='/_06901187' style='width: 1ch;'> <input maxlength='11' name='temperature_22073747' style='width: 11ch;'></pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement a frequency penalty, i.e. a function which will subtract an amount from the logits in proportion to its frequency of occurrence (this is a hacky way to fix problems like repeating the word <font color='#ff5500'>""jingle""</font> after being given the prompt of <font color='#ff5500'>""jingle bells, ...""</font>)<br><br><div class='exerciseprecontainer'><pre>def apply_freq_penalty(input_ids: t.Tensor, logits: t.Tensor, freq_penalty: float) -&gt; t.Tensor:<br>    """"""<br>    input_ids: shape (seq, )<br>    logits: shape (vocab_size, )<br>    Return: shape (vocab_size, )<br>    """"""<br>    (vocab_size,) = logits.shape<br>    id_freqs = t.<input maxlength='8' name='bincount_23187065' style='width: 8ch;'>(input_ids, <input maxlength='3' name='min_51433384' style='width: 3ch;'>length=vocab_size)<br>    return logits - freq_penalty * id_freqs</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement a frequency penalty, i.e. a function which will subtract an amount from the logits in proportion to its frequency of occurrence (this is a hacky way to fix problems like repeating the word <font color='#ff5500'>""jingle""</font> after being given the prompt of <font color='#ff5500'>""jingle bells, ...""</font>)<br><br><div class='exerciseprecontainer'><pre>def apply_freq_penalty(input_ids: t.Tensor, logits: t.Tensor, freq_penalty: float) -&gt; t.Tensor:<br>    """"""<br>    input_ids: shape (seq, )<br>    logits: shape (vocab_size, )<br>    Return: shape (vocab_size, )<br>    """"""<br>    (vocab_size,) = logits.shape<br>    id_freqs = t.<input maxlength='8' name='bincount_23187065' style='width: 8ch;'>(input_ids, <input maxlength='3' name='min_51433384' style='width: 3ch;'>length=vocab_size)<br>    return logits - freq_penalty * id_freqs</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement top-k sampling, i.e. a function which returns one of the top k highest-scoring words, weighted according to their respective probabilities.<br><br><div class='exerciseprecontainer'><pre>def sample_top_k(logits: t.Tensor, top_k: int) -&gt; int:<br>    """"""<br>    logits: shape (vocab_size, ) - unnormalized log-probabilities<br>    top_k: only consider this many of the most likely tokens for sampling<br>    Return: a sampled token<br>    """"""<br><br>    top_logits, top_idx = logits.<input maxlength='4' name='topk_50026075' style='width: 4ch;'>(top_k)<br>    idx = t.distributions.categorical.Categorical(logits=top_logits).sample()<br>    out = top_idx[idx].item()<br>    return out</pre></div>
	<br>

	

	<script>
    		var hint = document.getElementById('hint');
    		hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
    		hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var x = new Object();
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener(""input"", function() { key=this.name; value=this.value; x[key] = value; });
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	<font color='#ff5500'>logits</font> are a tensor of outputs from your transformers, which haven't yet been turned into probabilities.<br><br>Implement top-k sampling, i.e. a function which returns one of the top k highest-scoring words, weighted according to their respective probabilities.<br><br><div class='exerciseprecontainer'><pre>def sample_top_k(logits: t.Tensor, top_k: int) -&gt; int:<br>    """"""<br>    logits: shape (vocab_size, ) - unnormalized log-probabilities<br>    top_k: only consider this many of the most likely tokens for sampling<br>    Return: a sampled token<br>    """"""<br><br>    top_logits, top_idx = logits.<input maxlength='4' name='topk_50026075' style='width: 4ch;'>(top_k)<br>    idx = t.distributions.categorical.Categorical(logits=top_logits).sample()<br>    out = top_idx[idx].item()<br>    return out</pre></div>
	<br>

	

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>



<!-- ===== INPUTS ===== -->

<script>
	var all = document.getElementsByTagName('input');
	for (var i = 0; i < all.length; i++) {
		var my_answer = x[all[i].name];
		var true_answer = all[i].name.slice(0, -9);
		if(my_answer === true_answer){all[i].style.backgroundColor = 'rgb(124,252,0,1)'}
		else{all[i].style.backgroundColor = 'rgb(240,128,128,1)'}
		all[i].value = true_answer;
		all[i].style.fontWeight = 'bold';
	}
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does `torch.tensor.data_ptr()` do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>



<!-- ===== TAGS ===== -->

<div id=""ctag1"" class=""tag primary left""></div>
<a id=""tag"" href=><div id=""stag1"" class=""tag primary right""></div></a>
<br>

<div id=""ctag2"" class=""tag secondary left""></div>
<div id=""stag2"" class=""tag secondary right""></div>
<br>

<div id=""ctag3"" class=""tag tertiary left""></div>
<div id=""stag3"" class=""tag tertiary right""></div>

<script>
	tag_string = """".split("" "");
    tag_obj = {};
    tag_string.forEach(tag => {
    	tag_list = tag.split(""::"");
        switch (tag_list[0]) {
        		case ""src"": tag_obj[""src""] = tag_list.slice(1); break;
			case ""content"": tag_obj[""content""] = tag_list.slice(1); break;
        }
    })
    document.querySelector(""#ctag1"").textContent = tag_obj[""content""][0].split(""_"").join("" "");
    if (tag_obj[""content""][1] !== undefined) { document.querySelector(""#ctag2"").textContent = tag_obj[""content""][1].split(""_"").join("" ""); }
    if (tag_obj[""content""][2] !== undefined) { document.querySelector(""#ctag3"").textContent = tag_obj[""content""][2].split(""_"").join("" ""); }
	if (tag_obj[""content""][3] !== undefined) { document.querySelector(""#ctag3"").textContent = tag_obj[""content""][3].split(""_"").join("" ""); }
    document.querySelector(""#stag1"").textContent = tag_obj[""src""][0].split(""_"").join("" "");
    if (tag_obj[""src""][1] !== undefined) { document.querySelector(""#stag2"").textContent = tag_obj[""src""][1].split(""_"").join("" ""); }
    if (tag_obj[""src""][2] !== undefined) { document.querySelector(""#stag3"").textContent = tag_obj[""src""][2].split(""_"").join("" ""); }
</script>


<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('em').forEach(function(el) { el.outerHTML = ""<i>"" + el.innerHTML + ""</i>""; })
	var all = document.getElementsByTagName('i');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does `torch.tensor.data_ptr()` do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It returns the address of the first element in the tensor.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>





<!-- ===== TAGS ===== -->

<div id=""ctag1"" class=""tag primary left""></div>
<a id=""tag"" href=><div id=""stag1"" class=""tag primary right""></div></a>
<br>

<div id=""ctag2"" class=""tag secondary left""></div>
<div id=""stag2"" class=""tag secondary right""></div>
<br>

<div id=""ctag3"" class=""tag tertiary left""></div>
<div id=""stag3"" class=""tag tertiary right""></div>

<script>
	tag_string = """".split("" "");
    tag_obj = {};
    tag_string.forEach(tag => {
    	tag_list = tag.split(""::"");
        switch (tag_list[0]) {
        		case ""src"": tag_obj[""src""] = tag_list.slice(1); break;
			case ""content"": tag_obj[""content""] = tag_list.slice(1); break;
        }
    })
    document.querySelector(""#ctag1"").textContent = tag_obj[""content""][0].split(""_"").join("" "");
    if (tag_obj[""content""][1] !== undefined) { document.querySelector(""#ctag2"").textContent = tag_obj[""content""][1].split(""_"").join("" ""); }
    if (tag_obj[""content""][2] !== undefined) { document.querySelector(""#ctag3"").textContent = tag_obj[""content""][2].split(""_"").join("" ""); }
	if (tag_obj[""content""][3] !== undefined) { document.querySelector(""#ctag3"").textContent = tag_obj[""content""][3].split(""_"").join("" ""); }
    document.querySelector(""#stag1"").textContent = tag_obj[""src""][0].split(""_"").join("" "");
    if (tag_obj[""src""][1] !== undefined) { document.querySelector(""#stag2"").textContent = tag_obj[""src""][1].split(""_"").join("" ""); }
    if (tag_obj[""src""][2] !== undefined) { document.querySelector(""#stag3"").textContent = tag_obj[""src""][2].split(""_"").join("" ""); }
</script>



<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('em').forEach(function(el) { el.outerHTML = ""<i>"" + el.innerHTML + ""</i>""; })
	document.querySelectorAll('i').forEach(item => item.style.color = 'white');
</script>"
What does <code>torch.tensor.data_ptr()</code> do?	It returns the address of the first element of the tensor.
What does <code>t.cuda.synchronize()</code> do?	It waits for <b>all</b> CUDA kernels up to that point to finish executing before it moves on to the next statement, i.e. it forces the GPU to become totally idle before moving on.
What does <code>nn.Parameter()</code> do?	It wraps a tensor and registers it as a parameter of a model, i.e. it shows up in <code>model.parameters()</code>
How can you get the documentation of a function through an API call?	<code>np.info(fn)</code>
How do you generate a 3x3x3 matrix with random normal values?	<code>np.random.randn(3, 3, 3)</code>
Generate a 3x3 tensor with random normal values.	<code>t.randn(3, 3)</code>
How can you make a matrix with specific elements just off the diagonal using&nbsp;<code>np.diag</code>?	"<code>np.diag(1+np.arange(4), -1)</code> will generate:<br><img src=""paste-3b684c52336c0331b82b24a4ed6d42ae3b80ba84.jpg"">"
"<code>z = np.array([1, 2, 3])<br></code>
<br>What does&nbsp; <code> 1j * Z</code> return?"	<code>array([0.+1.j, 0.+2.j, 0.+3.j, 0.+4.j])</code>, because j is recognised as the imaginary part of a complex number in Python. See the docs for <code>complex</code>.
What does <code>np.copysign(a, b)</code> do?	It copies the sign of elements in b to elements in a.
How can you find the intersection of two arrays using just numpy? (No pure Python.)	<code>np.intersect1d(a, b)</code>
Is it possible to carry out matrix operations in numpy without storing the result in a copy?	Yes there is: operations like&nbsp;<code>np.add, np.multiply</code> have an optional <code>out</code> parameter which specifies where the result of the operation should be stored.
How do you create a structured array in numpy? Why would you want to do so?	"You can create a structured array with e.g.:
<br><br>
<code>arr = np.zeros((10, 10), [(""x"", float), (""y"", float)])</code>
<br><br>
This allows you to access the axes using <code>arr[""x""], arr[""y""]</code>."
Given some function&nbsp;\(f\), how do you apply this to all pairs of elements&nbsp;\(x_i, y_j\)&nbsp;from two matrices&nbsp;\(\mathbf{X, Y}\)?	Apply:<br><code>np.ufunc.outer(X, Y)<br></code><br>where ufunc is the function&nbsp;\(f\).
How can you find out information about types in numpy?	There are two functions:&nbsp; <code>np.iinfo(itype), np.finfo(ftype)</code>, one for integers and one for floats. These instantiate an object with three attributes: <code>bits, min, max</code>.
How can you swap two rows of a numpy array in a single line of code?	You can use this piece of wizardry:&nbsp; <code>x[[i, j]] = x[[j, i]]</code>
How can you count the occurrences of each value in an array of integers?	Use <code>np.bincount(x)</code>. It returns an array whose size is 1 larger than the maximum element in <code>x</code>, and where <code>arr[3]</code> is the number of times the value <code>3</code> occurred in <code>x</code>.
What does&nbsp;<code>np.argsort(x)</code> do?	"It returns the indices that would sort the matrix&nbsp;<code>x</code>, i.e.:
<br>
<code>
x = np.array([9, 3, 7, 1, 2]) <br>
np.argsort(x) <br>
&gt;&gt;&gt; array([3, 4, 1, 2, 0])
</code>"
Generally speaking, what does calling a function on a tensor with the argument&nbsp;<code>-1</code> where a dimension was expected?	Torch actually applies the function with dimension&nbsp;<code>dim = dim + input.dim() + 1</code>, so for <code>dim = - 1</code> you get the last dimension.
What's the numpy equivalent of&nbsp;<code>torch.unsqueeze()</code>?	It's&nbsp;<code>np.expand_dims(arr, axes)</code>.
How can you add an extra singleton dimension to an array without using any functions?	"Use the ""None"" keyword in a slice: <br>
<code>arr.shape = (5, 5)</code><br>
<code>arr[:, :, None].shape = (5, 5, 1)</code>"
How do you check numerically, (without casting, without type checking)&nbsp;if a number <code>x</code> is an integer?	Simple; check if <code>x % 1 == 0</code>.
What does&nbsp;<code>tensor.dims()</code> tell you? Does it have an alias?	It tells you the number of dimensions of the tensor. It has an attribute alias:&nbsp;<code>tensor.ndims</code>.
When you want to do something, sometimes it's useful to understand why you want it done. What are four distinct high-level motivations?	I want to do something because:<br><ul><li>I genuinely want to do it, or to experience doing it</li><li>I want to have done it</li><li>I want to be the kind of person who does it</li><li>I want to be seen as the kind of person who does it</li></ul>
What's a charter city?	A city, or a form of society, where some social norms are built into the city itself. You could have a city that explores different solutions to child-rearing, or to efficient transportation.
What is belief in belief?	When the things you claim to believe do not match up with the way you behave, or anticipate experiences. In other words, you believe that you believe this, but you're not actually behaving as though you are.
How can you enumerate a numpy array? What does the function return?	Looping over <code>np.ndenumerate(my_array)</code> returns a tuple of two elements: an index, which is itself a tuple (e.g. <code>(1, 1)</code>, and the element at that index.
How do you find the median of a set of numbers, e.g. 5, 25, 15, 10, 20?	Order the numbers: 5, 10, 15, 20, 25.<br>If there are an odd number of them, take the middle number: 15.<br>If there are an even number of them, average together the numbers at <code>n//2, n//2+1</code>.
What does the static method&nbsp;<code>__new__(cls)</code> do? How does it differ from&nbsp; <code>__init__</code>?	This method gets called when a class – the first argument – is instantiated. This method creates the instance, and then sends the reference to&nbsp; <code>__init__</code>, which does customisation.
What is&nbsp; <code>array.view()</code> used for? What is its first argument?	It returns a view of the array using a different dtype:&nbsp;<code>np.arange(5, dtype=np.int32).view(np.float32)</code> will contain floats.
"What does&nbsp;<code>getattr(object, ""name"", ""default"")</code> do? Why is it useful?"	"It's equivalent to&nbsp; <code>object.name</code>, and returns ""default"" if the attribute does not exist. The idea behind this function is that you can access attributes programatically more easily using strings rather than dot-notation."
"What is the output of:
<br>
<code>a = np.array([2, 3, 0, 7, 6, 0])
<br>
  np.bincount(a)</code>"	Bincount counts the number of occurrences of each element. It returns a list of size&nbsp;\(\mathrm{len}(a)\)&nbsp;where each element&nbsp;\(i\)&nbsp;is how many times&nbsp;\(i \)&nbsp;occurs in&nbsp;\(a\).<br><br>&gt;&gt;&gt; [2, 0, 1, 1, 0, 0, 1, 1]
What does&nbsp;<code>np.put_along_axis</code> do? What is its signature?	<code>np.put_along_axis(arr, idx, vals, axis)</code> basically does <code>arr[idx] = vals</code>, but for whichever axis you specify.
What does&nbsp;<code>np.take_along_axis</code> do? What is its type signature?	<code>np.take_along_axis(arr, idx, axis)</code> indexes into the array as <code>arr[idx]</code> along whichever axis is specified.
What does&nbsp;<code>vars(class)</code> return?	It returns a list of all the writeable attributes of the class.
What does&nbsp;<code>repr(object)</code> return? How can you control this if you're designing a class?	It returns a printable representation of an object – that representation is dictated by how the object implements the function&nbsp;<code>__repr__</code>.
What does&nbsp;<code>eval(expression[, globals[, locals]])</code> do?	It evaluates the expression passed in as a string using the global and local variables provided to it – or visible to it outside the call.
"What's ""up"" spare time?"	"You could think of your spare time as divided into ""up"" and ""down"" time. <b>Uptime</b> is, roughly, time spent making things, engaging with the world, creating; it's also time where you do cool, exciting, exhilarating activities.<br><br><b>Downtime</b> is – well – downtime: you do things that take less energy, you rest and recharge, and sometimes you consume media that aren't exactly enriching."
What is truth tracking?	It's an intention and a practise of having accurate beliefs and thoughts – having a map that matches the territory, above all else.
What's one framing that helps when encountering challenges? (Think 4-word mantra.)	"""Problems are for fixing!"""
What's one view of depression from the framing of predictive processing? What's an analogue for this for anxiety?	"""Depression as a global prior on negative stimuli"". You could think of anxiety – especially health anxiety – as a global prior on ""dangerous"" stimuli, as if everything you feel is dangerous-by-default."
"What is the output of the below code? Why?
<code><br>a = np.arange(10)</code>
<br>
<code>np.roll(a, 2)</code>
<br>
<code>&gt;&gt;&gt; ?</code>"	"<code>np.array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])</code>
<br>The function ""rolls"" along the array such that its first element is now at index 2, wrapping the rest of the elements around the front. Rolling in the other direction also works!"
What's the signature of the repeat function? What does it do?	<code>np.repeat(array, repeats, axis)</code> repeats each element <code>i</code> in the array <code>repeats[i]</code> many times.
What is Dutch booking?	Dutch booking is a way to take advantage of an agent whose preferences are not coherent. It appears in betting markets where the odds of the bets are structured such that the bookmaker always wins.<br><br>For example, let's say you prefer A to B, B to C, and C to A, and that you have A. I offer to give you B in exchange for C + $1; then I offer you A in exchange for B + $1; then, I offer you C in exchange for A, for no charge. I'll have made $2 without giving you anything!
How can you find the rank of a matrix using numpy?	There's a dedicated function:&nbsp;<code>np.linalg.matrix_rank(A)</code>.<br><br>Behind the scenes, this uses&nbsp;<code>np.linalg.svd(A)</code> which returns&nbsp;\(U, \Sigma, V\), where&nbsp;\(A = U \Sigma V\), and checks how many of the singular values are non-zero.
How can you find the rank of a matrix given its singular value decomposition?	The rank is equal to the number of nonzero singular values.
How do you negate an array?	<code>np.logical_not(arr)</code>
What is corrigibility?	Corrigibility refers to the property of a system to be open to being modified in situations where its designers think it should be modified.<br><br>Corrigible models allow re-training or shutdown if a bug is detected. Incorrigible systems resist these attempts in various ways, including deception.
"What is <a href=""https://ai-alignment.com/training-robust-corrigibility-ce0e0a3b9b4d"">acceptability?</a>"	"A model behaves acceptably if it has high reward on average, and in situations where it fails, it fails ""gracefully"", without entering unrecoverable regimes or causing irreversible catastrophes."
"What do each of these ""verbs"" mean: d, c, y, v, V?"	d: delete<br>c: change<br>y: yank<br>v: visually select (V for line)
"What are the following ""nouns"" in vim: w, s, p, t, b?"	w = word<br>s = sentence<br>p = paragraph<br>t = tag<br>b = block
"What are the following ""modifiers"" in vim: i, a, t, f, /, NUM?"	i = inside<br>a = around<br>t = search and stop before<br>f = search and land on<br>/ = find a string<br>NUM = number
What does ZZ do?	:wq
How do you move to the beginning or end of a line?	$ = end<br>0 = beginning<br>^ = beginning of text (if, e.g. your text is indented)
How do you move forward one word? Back one word? End of current word?	w = forward one word<br>b = back one word<br>e = end of word
How do you move to the top/middle/bottom of the screen? Top of the file, bottom of the file?	H, M, L<br>gg, G
How do you move by sentence/paragraph?	Use the parentheses: ( ) for sentences. Use curly brackets for paragraphs.
How can you get into insert mode?	i = insert just before the cursor<br>a = append after the cursor<br>I = move to the beginning of the sentence and insert<br>A = append at the end of the line
What does the ~ do?	It changes the case of the character under the cursor.
How do you delete a character under the cursor? Before the cursor?	x, X
Undo &amp; redo?	u, Ctrl-r
"What does ""."" do?&nbsp;"	"It repeats the command you just gave some amount of times. For example:<br>
<code>dw</code> deletes a word <code>5.</code> deletes 5 more."
What does `ddp` do?	It swaps two lines of text: delete the line you're on, then put it above where it used to be.
What does <code>:%s/foo/bar/g</code> do? How about <code>:s/foo/bar/g</code>?	The first one substitutes foo with bar on all lines; the second only on the current line.
"Given the text: ""Lorem ipsum (dolor sit amet) something something.""<br>What would the command <code>va(</code> do?"	"It selects ""(dolor sit amet)"". (visual around parentheses)"
How do you delete from the cursor to the end of the line in normal mode?	d$
"What's the easiest way to correct this sentence?<br>""Thygs lubw has a few wrds that need changing."""	"Navigate to each word, then use change + to the end of the word, i.e. ""ce""."
What do `all(iterable)` and `any(iterable)` do?	They check if the items of an iterable (a) are all True or (b) contain one True value.
Python has a bunch of functions whose name beings with `a`, for example `aiter()` or `anext()`. Why?	These are functions designed to work asynchronously. For example, `aiter(aiterable)` returns an asynchronous iterator on an asynchronous iterable.
What do chr(i) and ord(c) do?	"<span style=""background-color: rgba(135, 131, 120, 0.15); color: rgb(235, 87, 87);"">chr(i)</span> and <span style=""background-color: rgba(135, 131, 120, 0.15); color: rgb(235, 87, 87);"">ord(c)</span> are inverses of each other: chr gets the character whose Unicode code point is the integer i, and ord gets i from c."
What does the&nbsp;<code>@classmethod</code> decorator do?	It's on the tin: it makes a method inside a class callable for the class itself or for any instance of the class. (e.g.&nbsp;<code> C.function()</code> or <code>C().function()</code>)
What do decorators do in Python?	"A decorator is syntactic sugar for a function that wraps around another function. The following are equivalent:<br><pre>def f(arg):
    ...
f = staticmethod(f)

@staticmethod
def f(arg):
    ...</pre>"
What are the most used iterable comprehensions in Python?	"Dictionary:&nbsp;<code>results = {n: n ** 2 for n in range(10)}</code><br>
List: <code>li = [i ** 2 for i in range(10)]</code><br>
Generator (lazy evaluated): <code>s = (i ** 2 for i in range(10))</code> "
What's the usage of&nbsp;<code>find</code> to find a file using its name?	<pre><code>find &lt;path&gt; -name '*FileName*'</code></pre>
What is a heap? What is the complexity for retrieving the largest/smallest element?	A heap is an almost-complete tree that satisfies the <b>heap property</b>. The heap property is: a parent's key is larger than its child's key (for max-heaps) or smaller (for min-heaps).&nbsp;<br>The largest or smallest element is always at the root. It can be retrieved in&nbsp;\(\mathcal{O}(\log n)\)&nbsp;time.
What data structure is used to implement a priority queue? Why?	A heap. Because in a priority queue you always remove the highest priority item, which in the heap is the root of the tree. Retrieval (find + delete) is&nbsp;\(\mathcal{O}(\log n)\).
Given a binary tree, what are: pre-order, in-order, post-order traversals? (Instead of trying to memorise these, think of a tree representing the operation 2+3; how would traversing change how you print it?)	Pre-order: node, left subtree, right subtree.<br>In-order: left subtree, node, right subtree.<br>Post-order: left subtree, right subtree, node.
"Let's say I've just run the ""/"" or ""?"" command to search for the string ""errorr"", and found multiple occurrences. How do I move from one to the other quickly?"	n = back<br>N = forward
How do you move from an open paren/square/curly bracket to the matching closed one?	Go on the open, press %.
When you have a substitute command such as %s/old/new/g, what does g mean?	"It's the ""global"" flag; without it, you would be replacing only the first occurrence of ""old"" with ""new""."
How do you move to a particular line number without leaving normal mode? How about from command mode?	number + G from normal mode<br>:number from command mode.
How do you execute an external command from vim?	:!command<br>e.g. :!ls
How do you read and write to a file a portion of selected text?	"Select with v/V, then do :w FILENAME. Then, to ""read"" from a file, i.e. write the contents of the file at the cursor, do :r FILENAME."
How to add a line below/above and go to insert mode?	o, O
How can you replace one character at a time? How about multiple characters?	r, R put you in replace mode
Where is the config file for vim?	~/.vimrc
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a training story?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a training story?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's a framework for thinking about approaches to building aligned AI. A training story comprises a <b>training goal</b>: what we want our model to be doing, and a <b>training rationale</b>: how and why we think that the training process will produce such a model.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two forms of competitiveness relevant to a training story?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the two forms of competitiveness relevant to a training story?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Training competitiveness = it's not much harder to train a model like the story requires than it is to train a regular model<br>Performance competitiveness = the model required by the story is competitive&nbsp; with other models in achieving some goal (it's about as good as those models are)

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
Why do we care about data structures? How do they help?	Selecting the right data structure for a given task and building an algorithm around it leads to good performance and clean code. Picking random data structures fares much less well.
What is the basic idea behind selection sort?	Partition a set of numbers into sorted and unsorted subsets. Repeatedly extract the smallest remaining element from the unsorted part of the set.
What does pseudocode look like for selection sort?	"<img src=""paste-5431871529c621b1d93d2783db0853a0a5079acc.jpg"">"
What's the connection between heapsort and selection sort? Why does the former exist?	Heapsort is a version of selection sort implemented using a heap. The idea is the same, but the average-case complexity is&nbsp;\(\mathcal{O}(n \log{n})\)&nbsp;vs.&nbsp;\(\mathcal{O}(n^2)\)&nbsp;for selection sort. (Worst case for both is the latter.)
What's the difference between a @staticmethod and a @classmethod?	"Roughly: class methods can change state inside the class itself – state that might apply to all instances of that class. This is because class methods take a first argument, ""cls"" (similar to ""self"" for an instance).&nbsp;<br><br>Static methods don't take this argument, and they can't change the state of the class object.&nbsp;"
What's in the `__mro__` attribute of a class?	"It's a tuple consisting of the ""method resolution order""&nbsp;of&nbsp;that class. Given this structure:<br>Dog&nbsp;<i>is-a&nbsp;</i>Pet&nbsp;<i>is-a&nbsp;</i>object<br><br>
<code>&gt;&gt;&gt; Dog.__mro__</code><br>
<code>(class 'Dog', class 'Pet', class 'object')</code>"
How do you check if a class has an attribute?	<code>hasattr(obj, attr_name)</code>
Jump forward (next location), jump backward (previous location)?	Ctrl + i, Ctrl + o
How do you tell search to ignore case/not ignore case?	set ic/set noic
What's the conda command for creating an environment from a YAML file?	"<code>
conda env create -f env.yml
</code>"
What does `conda list` do?	It lists the packages installed in a particular environment. By default it's the current one, but you can do:<br><code>conda list -n myenv</code> 
What do TypeVar and TypeVarTuple do?	"They're type variables. You give them a name and they act as a type that your static type checker can use.<br><br>The difference between them is that one is a tuple of types. Here's an example that uses both to check the type&nbsp;<b>and</b>&nbsp;shape of an array:<br>

<pre>import numpy as np
from typing import Generic, NewType, TypeVar, TypeVarTuple</pre><pre>MAIN = __name__ == ""__main__""
DType = TypeVar(""DType"")
Shape = TypeVarTuple(""Shape"")
Height, Width = NewType(""Height"", float), NewType(""Width"", float)

class VariadicArray(Generic[DType, *Shape]):
     pass

if MAIN:
     a: VariadicArray[float, Height, Width] = VariadicArray()
     print(a)
</pre>"
How can you use a named tuple for, e.g. a shape? Why is it useful?	"<pre>from collections import namedtuple
Shape = namedtuple(""Shape"", [""channels"", ""height"", ""width""])

my_shape = Shape(3, 64, 64) # This is now a tuple of three fields – ints.
print(f""Channels: {my_shape[0]}"")
print(f""Height: {my_shape.height}"")

print(my_shape) # Super readable repr.
&gt;&gt;&gt; Shape(channels=3, height=64, width=64) 
</pre>"
Are dictionaries guaranteed to be ordered in Python? In the sense that the order in which you enter the keys is remembered.	"Yeah! As of Python 3.7, the base type dict is ordered. There is also a class called OrderedDict that you can use – but they now behave similarly.<br><br>Python 3.5:<br>
<pre>&gt;&gt;&gt; d = {""y"": 0, ""a"": 3, ""q"": 9}
&gt;&gt;&gt; d
{'a': 3, 'q': 9, 'y': 0}
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; OrderedDict.fromkeys(""yaq"")
OrderedDict([('y', None), ('a', None), ('q', None)])
</pre>
<br>Python 3.7+:<pre>&gt;&gt;&gt; d = {""y"": 0, ""a"": 3, ""q"": 9}
&gt;&gt;&gt; d
{'y': 0, 'a': 3, 'q': 9}
</pre>"
What are two ways to combine two dictionaries into one using a one-liner?	"<pre>{**d1, **d2}
</pre><pre>{d1 | d2}</pre>Or you can do this, in place:<pre><br>d |= d2 # Equivalent to d = d | d2</pre>"
When you type hint a star-expression, should you hint as collection[T] or just T?	"You should hint as just T.<br><pre>def mean(*args: str):
     return sum(args) / len(args)</pre>"
How do you add a path to the PATH variable in bash?	"<pre>PATH=$PATH:newpath
</pre>"
When you run a python script from the command line, why would you add the -m flag? How does this affect relative imports? What comes after -m?	-m tells the interpreter to run the script as a module instead. Because of that, running e.g. api/routes.py becomes api.routes.<br><br>You can use relative imports from a module (since it sits inside a particular package hierarchy). You <b>cannot&nbsp;</b>use relative imports from a script, because running a script just invokes whatever's in the __main__ codeblock.
How do you get sibling imports to work ~painlessly in Python?	You should install your package locally. Create a new root folder containing the package and a&nbsp; <code>setup.py</code> file, and then do:<br><pre>pip install -e .</pre>
What's in the setup.py file for a package you want to install locally with&nbsp;<code>pip install -e .</code>?	"<pre>from setuptools import setup, find_packages

setup(name=""my_package"", version=""1.0"", packages=find_packages())
</pre>"
How do you indent multiple lines simultaneously in Vim?	Select them with visual mode, and then do :&gt; (&gt; indents, &lt; unindents).
What does tmux do? Why would you use it?	Tmux is a terminal multiplexer. It allows you to run multiple terminals at the same time, and cycle between them without killing any of them.
What's the main chord for tmux?	C-a + ...<br>Example: C-a + d is detach current terminal.
How do you find current live terminals in tmux? How do you reopen one of them?	tmux ls<br>tmux attach -t 0
How do you split horizontally in tmux? Vertically?	"Config'd properly: -, |. Otherwise it's C-b %, C-b ""."
Do non-square matrices have eigenvalues and eigenvectors?	"No – these objects only exist for square matrices, see <a href=""https://math.stackexchange.com/questions/583938/do-non-square-matrices-have-eigenvalues"">here</a>, but you can calculate other decompositions for them, such as SVD."
What's the difference between TypeVar and NewType?	"TypeVar is a type variable – you use this as a typing hint in class and method signatures. You don't use this in any actual logic, so you can't do T = TypeVar(""T"") and then x = T(10). T is not a class – it's just a hint.<br><br>NewType is a short way of actually creating a type, i.e. you&nbsp;<b>can</b>&nbsp;do:<br><pre>from typing import NewType
UserId = NewType(""UserId"", int)

def get_user(id: UserId): ...</pre><pre>get_user(UserId(123102))
get_user(123102) # does not work, expecting a UserId, not an int...
</pre>"
Syntax for CURLing from a URL to a file?	<pre>curl [url] --output [filename]</pre>
How can you turn highlighting off for a previous search?	:noh
What is the global interpreter lock (GIL)? Why does it exist? Are there ways around it?	The CPython interpreter makes it so that only one thread executes Python bytecode at a time. It basically means that Python is single-threaded.<br><br>This mostly exists to make the implementation of CPython simpler, for example by making the object model inherently safe against concurrent access (e.g. dicts are safe from race conditions).<br><br>You can side-step this with the multiprocessing module.
Using the os module, how do you get the current process ID and the parent process' ID?	os.getpid(), os.getppid().
How do you comment out multiple lines in Vim using visual mode?	"C-V, select the lines<br>Shift+I, type in #<br>ESC"
How do you kill all tmux processes at the same time?	tmux kill-server
How do you generate a sequence in bash &amp; co.? (e.g. range(10))	<pre>seq 0 10</pre>
How can you find your disk usage in bash?	df -h (or du -hs .)
What's a way to generate random integers using only Python core libraries?	Use <code>random.randint(a, b)</code>.
Say that you're writing a function which receives as a parameter some list. As part of your function, you're calling&nbsp;<code>del</code> on items of that list. Why is this bad?	"You're deleting portions of the original list. In Python, parameters are sent by ""sharing"", and their mutability determines whether operations on the parameter are actually operations on the original object. <br><br>Lists are mutable, so when you delete your list inside the function, you're deleting the original list; this is likely to cause unexpected behaviour for the calling function!"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can you make instances of a Python class comparable?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can you make instances of a Python class comparable?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You need to implement&nbsp; __eq__ + one of (lt, gt, le, ge), and then decorate the class with&nbsp;<code>functools.total_ordering</code>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
Sometimes looking at tmux ls doesn't tell you much. How can you rename sessions to make that information more interesting?	tmux rename-session -t [initial_name] [new_name]<br><br>...where [initial_name] is usually 0, 1...
Kill current window, kill current pane in tmux	C-a &amp;, C-a x (or whatever other prefix you have)
How do L1 and L2 regularisation differ?	L1 regularisation adds a penalty proportional to the absolute value of the model parameters. This encourages the training process to set some parameters to zero, effectively performing feature selection.<br><br>L2 regularisation penalises proportional to the square of the parameters. This reduces the magnitude, but doesn't encourage parameters to be set to zero.
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the &nbsp;<code>functools.total_ordering</code> decorator do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the &nbsp;<code>functools.total_ordering</code> decorator do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	When you decorate a class with this and provide&nbsp; __eq__ and one of the <code>[__lt__, __le__, __gt__, __ge__]</code>&nbsp;methods, this decorator takes care of the other methods.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When you need to top up your battery, what liquid do you do it with, and up to what level?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When you need to top up your battery, what liquid do you do it with, and up to what level?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Distilled water, cover all the cell plates

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If you want to go straight ahead on a roundabout, how do you signal?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If you want to go straight ahead on a roundabout, how do you signal?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Signal left when leaving the roundabout

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What comes after a single amber light at a traffic light?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What comes after a single amber light at a traffic light?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Red

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What comes after red + amber at the traffic light?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What comes after red + amber at the traffic light?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Green

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does flashing amber mean at a pelican crossing?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does flashing amber mean at a pelican crossing?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It means you can go if all pedestrians are clear of the crossing

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a toucan crossing?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a toucan crossing?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A crossing that pedestrians and cyclists share

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a puffin crossing?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a puffin crossing?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's a crossing that's operated by pedestrians. It has two main differences to pelican crossings:<br>- the green signal is on the panel you press, not across the road<br>- it has sensors that keep the lights red for cars while pedestrians are crossing (e.g. if there are slow pedestrians)

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's covered by third party insurance?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's covered by third party insurance?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Damage to other vehicles

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the breakaway cable do for trailers?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the breakaway cable do for trailers?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	If they detach from your car accidentally, the cable snaps and puts on the brakes for the trailer.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When can you wait in a box junction?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When can you wait in a box junction?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Whenever your exit is clear, but oncoming traffic is preventing you from turning right.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do smart motorways do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do smart motorways do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They use variable speed limits to reduce congestion. Sometimes you can use the hard shoulder as a running lane.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the hard shoulder?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the hard shoulder?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's the left-most lane in the motorway, which you should use for emergencies and breakdowns only. (You can't use it to rest.)

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Speed limit for towing a trailer off and on motorways? Can trailers use right-hand lane on motorways?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Speed limit for towing a trailer off and on motorways? Can trailers use right-hand lane on motorways?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	50/60mph; can't use RHL because they would hold up overtaking traffic

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you use the right hand lane on a motorway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you use the right hand lane on a motorway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You use it to overtake traffic on other lanes; it's not a ""fast"" lane.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Stud colour between hard shoulder and left-most lane?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Stud colour between hard shoulder and left-most lane?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Red

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Stud colour between slip road and motorway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Stud colour between slip road and motorway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Green

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Stud colour at the rightmost edge of the motorway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Stud colour at the rightmost edge of the motorway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Amber

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What colour beacon do emergency services have?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What colour beacon do emergency services have?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Blue

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does an amber flashing beacon mean?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does an amber flashing beacon mean?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Slow-moving vehicle: like a tractor or a powered mobility vehicle

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does a green beacon mean?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does a green beacon mean?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Doctor's car – for some reason.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	National speed limit for cars and motorcycles on motorways?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	National speed limit for cars and motorcycles on motorways?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	70mph

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Speed limit for cars and motorcycles on single carriageway road?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Speed limit for cars and motorcycles on single carriageway road?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	60mph

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	National speed limit on dual carriageway/motorway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	National speed limit on dual carriageway/motorway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	70mph

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	&nbsp;What's the nearest you may park to a junction?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	&nbsp;What's the nearest you may park to a junction?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	10 metres

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to write an enum in Python?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How to write an enum in Python?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<pre>from enum import Enum

class Reason(Enum):
   timeout = 1
   error = 2
   ...
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Can subclasses of Enum be subclassed further?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Can subclasses of Enum be subclassed further?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Nope

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the code below, why are the parameters named this way?<br><br><pre>def quux(__x: int, __y__: int = 5) -&gt; int:
     return __x + __y__</pre>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In the code below, why are the parameters named this way?<br><br><pre>def quux(__x: int, __y__: int = 5) -&gt; int:
     return __x + __y__</pre>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	This is a convention enforced by the static type checker: arguments that start, but don't end with double underscores are assumed to be positional only. The checker would complain about a call like quux(__x=3).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's multiple dispatch? How could you do this in Python?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's multiple dispatch? How could you do this in Python?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Multiple dispatch is a way to select the appropriate implementation of an overloaded method based on the runtime type of the argument. You can use the @overload decorator to do so.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why can't you just do this kind of type hinting?<br>
<pre>class Node:
    """"""Binary tree node.""""""

    def __init__(self, left: Node, right: Node):
        self.left = left
        self.right = right</pre>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why can't you just do this kind of type hinting?<br>
<pre>class Node:
    """"""Binary tree node.""""""

    def __init__(self, left: Node, right: Node):
        self.left = left
        self.right = right</pre>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	When the typing annotations are parsed, the name Node doesn't exist yet. In Python, the class name is only created once its entire body has been executed. You can work around this by writing them as string literals: ""Node"".

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a shorthand for set intersection and s.subset(q) in Python?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a shorthand for set intersection and s.subset(q) in Python?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	s &amp; q, s &lt;= q

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Mirrors, ______, manoeuvre
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Mirrors, ______, manoeuvre
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	signal

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does MSM stand for?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does MSM stand for?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Mirrors, signal, manoeuvre

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When should you have your clutch down?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When should you have your clutch down?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	1. When changing gears<br>2. When stopping

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why should you not have your clutch down unless necessary?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why should you not have your clutch down unless necessary?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Because you'd be coasting: the engine isn't driving your wheels so you have less control; also, you pick up speed if you're going downhill

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you signal on a roundabout if you want to go: left, straight, right?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you signal on a roundabout if you want to go: left, straight, right?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Signal left on approach; don't signal on approach but do left on exit; signal right on approach.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the POM routine when moving off?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the POM routine when moving off?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Prepare = get into gear, find the biting point<br>Observe = mirrors, signal<br>Move off

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which lane do you normally use on a dual carriageway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Which lane do you normally use on a dual carriageway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The left; right is only for overtaking. Don't drive on the right unless overtaking.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's an alternative to Optional[Type]?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's an alternative to Optional[Type]?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Type | None

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can you implement your own context manager? What would you use it for?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can you implement your own context manager? What would you use it for?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Any class that defines __enter__ and __exit__ can be used as a context manager. You can use it for anything where you need to do some clean-up or exception handling on exit.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the type hint `Literal[n]` do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the type hint `Literal[n]` do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It allows you to type check for a specific value: n. Here's an example:<br><br>
<pre>def foo(x: Literal[13]) -&gt; int:
    return x * x
    
&gt;&gt;&gt; print(foo(10)) </pre>
<pre>type_practice.py:28: error: Argument 1 to ""foo"" has </pre><pre>incompatible type ""Literal[10]""; expected ""Literal[13]""  [arg-type]</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the `Final` type hint do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the `Final` type hint do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It flags a variable as final – or immutable – you can't assign anything else to it after this call. Example:<br><pre># Strings aren't mutable anyway...
final_str: Final = ""This string cannot be mutated!""
final_str = ""I'm attempting...""

&gt;&gt;&gt; type_practice.py:5: error: Cannot assign to final name ""final_str""  [misc]</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the @final decorator do when applied to classes and methods?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the @final decorator do when applied to classes and methods?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Classes can't be subclassed anymore (blocks inheritance), methods can't be overridden anymore.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's another way to express `Union[T1, T2]`?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's another way to express `Union[T1, T2]`?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	T1 | T2 (""or notation for union types"" – PEP604).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are ""dunder"" or magic methods?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are ""dunder"" or magic methods?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They're special class methods that start and end with underscores, and which you don't call directly. For example, __getitem__ is called when you index into a class with [k] notation.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you use global variables in Python?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you use global variables in Python?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Just declare them with kw global when you need to use them inside a block.
<pre>globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print(globvar)     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following code will error. How can you access bar from inside baz?<br><pre>def foo():
   bar = 0
   def baz():
      ...
      bar += 1
</pre>
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	The following code will error. How can you access bar from inside baz?<br><pre>def foo():
   bar = 0
   def baz():
      ...
      bar += 1
</pre>
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use the <code>nonlocal</code> keyword to tell the interpreter you're referring to the variable in the enclosing scope (the outer function).

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the order in which the Python interpreter scopes names?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the order in which the Python interpreter scopes names?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	LEGB: local, enclosing, global, built-ins.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's an idiomatic way of implementing function memoisation in Python?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's an idiomatic way of implementing function memoisation in Python?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You can use a decorator! Something like:<br><pre>def memoise(func):
    cache = {}
    def wrapper(*args, **kwargs):
        if args not in cache:
            cache[args] = func(*args, **kwargs)
        return cache[args]
    return wrapper

@memoise
def fibonacci(n):
    if n == 1 or n == 0: 
        return 1
    return fibonacci(n-1) + fibonacci (n-2)</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
What's the hotkey for switching between sessions in tmux?	C-a s to see them, or [C-a ( , C-a )]
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does itertools.zip_longest do? How could it be useful?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does itertools.zip_longest do? How could it be useful?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Zips two lists of uneven size, and pads with None or w/ given fill value. Came up in an AoC puzzle where if the right list was shorter you had to respond differently to the left list being shorter – but you couldn't just compare lengths.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does functools.cmp_to_key(func) do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does functools.cmp_to_key(func) do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	If func does comparisons between items, you can wrap it in this function and feed it in as a key to functions like sorted, max, min.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does breakpoint() do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does breakpoint() do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It brings up pdb, the Python debugger. Sprinkle it in your code and run it so you can inspect the value of variables!

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
How do you quickly comment a line, or a selection of lines?	gcc, select + gc.
How do you search through files/buffers quickly using a plugin?	C-f
How do you multicursor in Vim?	Mapped to C-s
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When can you drive a trailer on the right-hand lane of a motorway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When can you drive a trailer on the right-hand lane of a motorway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Only when there are lane closures

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How long do you have to take documents to a police station if you're asked for them and don't have them?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How long do you have to take documents to a police station if you're asked for them and don't have them?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	7 days

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a central reservation?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a central reservation?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	An area of land that separates opposing lanes of traffic

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a dual carriageway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a dual carriageway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A road that has a central reservation to separate the carriageways

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In built up areas, you cannot use your horn between...
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	In built up areas, you cannot use your horn between...
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	11:30pm and 7am, unless another vehicle poses a danger

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Single yellow line along the kerb means...
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Single yellow line along the kerb means...
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	No waiting at specific times during specific times of day, mentioned on a sign nearby

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Double yellow line along the kerb means...
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Double yellow line along the kerb means...
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	No waiting at any time

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Can you stop to drop off or pick-up passengers on a double yellow line?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Can you stop to drop off or pick-up passengers on a double yellow line?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Yes – but you must not wait there.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Solid double white lines in the middle of the road mean...
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Solid double white lines in the middle of the road mean...
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	no crossing or straddling <b>except</b> to pass a stationary vehicle or a vehicle going 10mph or less (bike, horse, maintenance vehicle)

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Double white lines in the middle of the road where your side is broken means...
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Double white lines in the middle of the road where your side is broken means...
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You can overtake if it's safe and you'll finish doing so before the broken line becomes solid again.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a clearway? An urban clearway?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's a clearway? An urban clearway?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's a stretch of road where stopping is not allowed. In an urban clearway you can stop to pick up or set down passengers, but you cannot wait.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Pulling up = parked car pulls into traffic. What kind of arm signal?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Pulling up = parked car pulls into traffic. What kind of arm signal?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They give this signal<img src=""paste-8b5c999dbf379034a754901ee4a43bf720e625d2.jpg"">

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the `lru_cache` decorator do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does the `lru_cache` decorator do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It memoises function calls using the ""least recently used"" strategy.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
What kinds of machine learning parallelism are there?	There's:<br>- <b>data parallelism</b>, where each device/rank/replica has its own minibatch of data, and the gradients are added from all replicas at the end of a pass;<br>- <b>op sharding/tensor parallelism</b>, where each device is responsible for a slice of the weights of the model (e.g. a particular attention head);<br>- <b>pipeline parallelism</b>, where each device holds a subset of the layers of the network;
What does a power law look like?&nbsp;	It's a function,&nbsp;\(F(x) = Cx^k\), which on a log-log plot looks like a straight line, with&nbsp;\(C\)&nbsp;being the intercept and&nbsp;\(k\)&nbsp;being the slope. Example: scaling laws for language models wrt/ compute, dataset size, number of parameters.
How to copy and paste to the system clipboard from vim?	"Select -&gt; ""*y"
What's the <b>vanilla policy gradient</b> algorithm?	It's an RL algorithm where you improve a parameterised policy&nbsp;\(\pi_\theta\)&nbsp;by taking the gradient of the expected return of that policy with respect to its parameters:<br>\[\pi_{\theta_{t+1}} = \pi_{\theta_{t}} + \eta \nabla_\theta \mathbb{E}_{\tau \sim \pi_\theta}[R(\tau)]\]<br>
What is <b>trust region policy optimisation (TRPO)</b>?	"Update the policy by taking the largest step possible while maintaining a particular constraint on the KL divergence between the new and old policies.&nbsp;<br>See:&nbsp;<a href=""https://spinningup.openai.com/en/latest/algorithms/trpo.html"">https://spinningup.openai.com/en/latest/algorithms/trpo.html</a>"
What's <b>proximal policy optimisation (PPO)</b>?	Similar idea to TRPO: how can you have the biggest improvement on-policy without stepping too far from the current policy? There are two updates to the policy gradient objective:<br>- clip it so it lies in an interval<br>- add&nbsp;a KL-divergence term that penalises the target (new) policy being too different from the behaviour (old) policy
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Cool one-liner to create pairs of items (i, i+1) from a list.
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Cool one-liner to create pairs of items (i, i+1) from a list.
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	zip(li, li[1:]) gives you this!<br><br>For example, to check that a list is sorted, do:<br><pre>all(a &lt;= b for a, b in zip(li, li[1:]))</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does collections.Counter do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does collections.Counter do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It's a dict that counts hashable elements. If you have:<br>
<pre>&gt;&gt;&gt; li = [""foo"", ""foo"", ""bar"", ""baz""]
&gt;&gt;&gt; Counter(li)
Counter({""foo"": 2, ""bar"": 1, ""baz"": 1})
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If you try to get a missing item from a dict, what do you get? If you try the same thing from a collections.Counter?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	If you try to get a missing item from a dict, what do you get? If you try the same thing from a collections.Counter?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	KeyError for the first, a count of 0 for the latter.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"What does the ellipsis do in an einsum?<br><pre>hidden = torch.einsum(""...if,ifh-&gt;...ih"", features, self.W)
out = torch.einsum(""...ih,ifh-&gt;...if"", hidden, self.W)
</pre>"	It fills in a variable number of leading dimensions (usually batch dim, channels) and just applies the einsum to the last two, or last three, etc.
What does a JIT compiler do?	It compiles code as it's needed rather than compiling it ahead of time or interpreting it.
What is bytecode?	Bytecode is a compiled representation of source code. It isn't machine code for any particular computer, and it may be portable. It then gets interpreted or compiled to machine code by a <b>virtual machine</b>.
What does it mean to interpret code with an interpreter?	It means running code without compiling into a machine language program.<br><br>Different types exist, but e.g. for Python, this means translating Python source code into an efficient intermediate representation – bytecode – and executing that.&nbsp;
What's rematerialisation in the context of model parallelism?	Rematerialisation is recomputing intermediate values, like some forward pass operations, instead of storing them. This is useful when compute is more available than memory.
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a daemonic process in Python?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a daemonic process in Python?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	A process that can't spawn other processes, and which ends when the process which spawns it ends (e.g. the __main__ Python process)

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you make a deep copy of a Python object that's not immutable?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you make a deep copy of a Python object that's not immutable?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<pre>import copy<br>copy.deepcopy(object)
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
What does a semaphore do? How does it work?	Semaphores are synchronisation primitives which manage an internal counter. Calls to acquire() decrement the counter and calls to release() increment it.<br><br>When the counter reaches zero, any calls to acquire() block until another thread of execution calls release().
What could you use a semaphore for?	To guard access to a resource with limited capacity, e.g. a database server with a limited amount of connections allowed.
What is a lock? How does it work?	A lock is a concurrent programming synchronisation primitive. It has two states, locked and unlocked, and two methods: acquire() and release().<br><br>When the lock is<b> unlocked</b>, acquire() locks it; release() would raise an error (RuntimeError in Python). <br>When the lock is <b>locked</b>, acquire() is blocking until the lock is released by another thread of execution; release() would unlock the thread.
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does `threading.local()` do? Why is it useful?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What does `threading.local()` do? Why is it useful?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	It creates an object whose data is local to the thread which created it – other threads cannot see or modify it. It's useful when you want to use state that can't be interfered with by other threads.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When doing concurrent programming in Python, what is best practice regarding acquire() and release() calls to locks and other synchronisation primitives?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	When doing concurrent programming in Python, what is best practice regarding acquire() and release() calls to locks and other synchronisation primitives?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Don't do it manually, use them in a context manager instead. If you don't, you must be careful to release() regardless of the flow of execution, including when an exception is raised.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
What are two paradigms for communication between processes or threads in concurrent programming?	Message passing (= threads send messages to each other and act on them) and shared memory (= some/all threads have access to special objects designed to work with concurrent access).
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do `mp.Array` and `mp.Value` do?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What do `mp.Array` and `mp.Value` do?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	They're ways for processes/threads to access shared state, in a way that's designed to work with concurrent access.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between map(func, iterable) and starmap(func, iterable) in the multiprocessing module?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between map(func, iterable) and starmap(func, iterable) in the multiprocessing module?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The first applies func to the items of iterable directly. The second one unpacks the iterable as a list of iterables, and is applied to the items of each of those.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the big caveat of how the multiprocessing module side-steps the GIL? Think about what kinds of objects can be passed using Queues or Pipes.
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the big caveat of how the multiprocessing module side-steps the GIL? Think about what kinds of objects can be passed using Queues or Pipes.
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	The objects need to be picklable in order for them to be sent to and executed by other processes.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What three classes does the `queue` module expose?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What three classes does the `queue` module expose?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Queue, PriorityQueue and LifoQueue (stack). They're all thread-safe.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a `Future` from `concurrent.futures`?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is a `Future` from `concurrent.futures`?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Futures are variables that ""monitor"" computation that happens in other threads/processes. You submit callables and args to an executor, and as soon as you do so, you get a future.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can I actually compute a bunch of things using `Future`s?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can I actually compute a bunch of things using `Future`s?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	You can string them together however much you want, and they'll stay on the thread that actually executed them:<br><pre>root = executor.submit(math.sqrt, 3)
rounded = executor.submit(math.floor, root)
...
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why might you want to delete intermediate `Future` results when using `concurrent.futures`?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Why might you want to delete intermediate `Future` results when using `concurrent.futures`?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	To free up memory – even if you don't use those, Python won't garbage-collect them, because you might want to ""pipe"" them to some other callable at any time.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
How can you find out the size a tensor occupies in memory?	<pre>tensor.numel() * tensor.element_size() ) // (1024**3)</pre>
How can you find out how much memory your GPU has, and how much is in use?	"<pre>t.cuda.get_device_properties(device_id).total_memory // (1024**3)
t.cuda.memory_allocated(device_id) // (1024**3)</pre>

I also wrote this little util:
<pre>def cuda_stats() -&gt; str:
    if not t.cuda.is_available():
        return ""No CUDA detected!""

    num_devices = t.cuda.device_count()
    to_gb = 1024**3
    stats: list[str] = [""\n#######\n""]
    for i in range(num_devices):
        current_stat = (
            f""Device: {t.cuda.get_device_name(i)}\n""
            f""Reserved/allocated/total (GB): {t.cuda.memory_reserved(i)/to_gb:.2f}""
            f""/{t.cuda.memory_allocated(i)/to_gb:.2f}""
            f""/{t.cuda.get_device_properties(i).total_memory/to_gb:.2f}\n""
            ""########""
        )
        stats += [current_stat]

    return ""\n"".join(stats)
</pre>"
Find-replace with grep and sed.	"<pre>grep -rl ""string1"" somedir/ | xargs sed -i """" 's/string1/string2/g'</pre><pre><br></pre><pre>For some files which are unicode-encoded, you'll have to add LC_ALL=c before xargs.</pre>"
What is a succinct way to describe synchronisation?	Synchronisation is control over threads' relative timings – what executes when – in order to have threads interact successfully when they must do so.
What are the two main reasons for concurrent programming?	Resource utilisation: making sure that you make the most of the hardware you have available.<br>Responsiveness: allowing the computer to respond quickly to an external (user) input, even while executing some other computation.
What is cooperative multitasking?	"It's a form of thread switching where threads are ""trusted"" to yield control to other threads at particular points in the execution of their code."
What is preemptive multitasking?	"Contrast with cooperative multitasking: here, every thread will be forced to yield from time to time, regardless of where in its execution it is (it gets ""pre-empted"" by the OS scheduler). This is useful because bugs in one thread cannot hold up other threads indefinitely."
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's an auditing game?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's an auditing game?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Auditing game = a challenge to detect a modification made to, or a particular property of, a network using transparency tools

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How is an auditing game an instance of red-teaming?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How is an auditing game an instance of red-teaming?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Auditing games are kind of like red-teaming for our transparency techniques. You use them in the ""worst-case"": to find out how well you know <b>everything </b>about what a model does, rather than in the ""best case"", where you try to find out how well you know&nbsp;<b>anything</b>&nbsp;about what a model does. In the latter case you find a particularly interpretable thing, in the former, you have to interpret well across the board.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the three elements of Evan's ""transparency trichotomy""?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What are the three elements of Evan's ""transparency trichotomy""?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Inspection transparency, training transparency, architectural transparency.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's inspection transparency?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's inspection transparency?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Using interpretability tools to understand a model by inspecting it once it's trained.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's training&nbsp;process&nbsp;transparency?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's training&nbsp;process&nbsp;transparency?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Training&nbsp;process&nbsp;transparency refers to incentivising a model during the training process&nbsp;to be as transparent as possible.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's architectural transparency?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's architectural transparency?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Architectural transparency refers to structuring models such that they are inherently more transparent, e.g. SoLU vs. GELU models.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the connection between the training goal/rationale framing and the outer/inner alignment framing?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the connection between the training goal/rationale framing and the outer/inner alignment framing?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ul>
<li>training rationale = inner alignment = How do you get models that do what you want?</li>
<li>training goal = outer alignment = What should you get your models to do?</li></ul>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
What's the difference between torch's DistributedDataParallel and its DataParallel modules?	"One allows multi-node, multi-GPU training; the other single-node multi-GPU. There are a bunch of reasons why you would still want DDP even if single-node, including that it is <i>just faster</i>. See also <a href=""https://pytorch.org/docs/stable/notes/cuda.html#cuda-nn-ddp-instead"">here</a>."
What's the complexity for insertion and deletion in a binary search tree? How about for an array?	It's&nbsp;\(\mathcal{O}(\log n)\)&nbsp;for trees,&nbsp;\(\mathcal{O}(n)\)&nbsp;for arrays.
What's a red-black tree?	It's a self-balancing binary search tree, where each node stores an extra bit of information – the colour – which is used to balance the tree.
What's the deal with balancing binary search trees?	"Trees can get arbitrarily deep as you add elements to them. The deeper they are, the worse complexity they have for standard operations (insertion, deletion, search).<br><br>We want our trees to be balanced. That is, at each node, if we ""choose"" the right subtree, we should be discarding about half of the remaining tree (the left subtree). If the tree is unbalanced and the left subtree is empty, it's just like traversing a list – O(n), not O(log n)."
What kind of data structure do you use a binary search on? What is its complexity?	On a sorted array or tree. Its complexity is O(log n), because it ignores the other half of the array when it searches in the lower or upper half.
Which grows faster:&nbsp;\(\sqrt{n}\)&nbsp;or&nbsp;\(\log n\)?	The square root grows faster. For example,&nbsp;\(\sqrt{1000} \approx 31\)&nbsp;while&nbsp;\(\log 1000 \approx 10\).
Which grows faster:&nbsp;\(\mathcal{O}(\log n)\)&nbsp;or&nbsp;\(\mathcal{O}(n)\)?	The linear grows faster. 10 &gt; log 10.&nbsp;
Which grows faster:&nbsp;\(\mathcal{O}(n \log n)\)&nbsp;or&nbsp;\(\mathcal{O}(\log n)\)?	The product grows faster: 10 * log 10 &gt; log 10. Of course, nlog n is better when n &lt; 1, but we're interested in the growth, as n gets very large.
Which grows faster:&nbsp;\(\mathcal{O}(n \log n)\)&nbsp;or&nbsp;\(\mathcal{O}(n^2)\)?	The quadratic grows faster. Think about it: the quadratic is&nbsp;\(n * n\);&nbsp;\(\log n\)&nbsp;grows more slowly than&nbsp;\(n\), so the product&nbsp;\(n \log n\)&nbsp;<i>must</i>&nbsp;grow more slowly than the product&nbsp;\(n*n\).
Which grows faster:&nbsp;\(\mathcal{O}(2^n)\)&nbsp;or&nbsp;\(\mathcal{O}(n^2)\)?	The exponential is pretty much the worst case – it grows much faster.
Which grows faster:&nbsp;\(\mathcal{O}(n!)\)&nbsp;or&nbsp;\(\mathcal{O}(2^n)\)?	The factorial grows faster.&nbsp;\(5! = 120;\ 2^5 = 32\).
What does `Tensor.squeeze()` do in Pytorch?	It removes&nbsp;<b>all</b>&nbsp;dimensions which are 1. Example: (1, 1, 28, 28) -&gt; (28, 28).
What are the average and worst-case time and space complexities for insertion sort?	Time:&nbsp;\(\mathcal{O}(n^2)\)&nbsp;because it iterates through the list twice.<br>Space:&nbsp;\(\mathcal{O}(n)\), it can work in place with just one auxiliary variable for swapping.<br><br>(These are both average and worst.)
What's the idea behind bubble sort?	"Loop through the entire array until no more pair-wise swaps need to be made, thus ""bubbling"" the large numbers to the top."
What's the complexity of bubble-sort?	It's quadratic because you loop through the entire array to swap pairs of items.
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is Python's execution model? What's happening behind the scenes when I run&nbsp;<code>python something.py</code>?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is Python's execution model? What's happening behind the scenes when I run&nbsp;<code>python something.py</code>?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	1. An interpreter and thread state are initialised. <br>2. Source code is compiled into code objects – bytecode –, which are attached to a frame. <br>3. Code objects are dispatched to a big eval loop which executes the opcodes in the objects.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How does the Python interpreter/virtual machine compile Python source code into bytecode?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How does the Python interpreter/virtual machine compile Python source code into bytecode?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<ol>
<li>Parse Python source code into a parse tree (by the Python parser)</li>
<li>Transform parse tree into an <a href=""https://www.notion.so/abstract-syntax-tree-AST-ab0d7b48ad5044fc90277216e677ac38"">abstract syntax tree (AST)</a></li>
<li>Generate a symbol table, i.e. a collection of names contained within a code block, including their scoping</li>
<li>Generate a code object from the AST
<ul>
<li>AST → control flow graph</li>
<li>emit a code object from the control flow graph</li>
</ul>
</li></ol>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What happens if the OS schedules a Python thread which doesn't hold the GIL?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What happens if the OS schedules a Python thread which doesn't hold the GIL?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Nothing – all it can do is wait to acquire the GIL. The Python virtual machine doesn't let that thread execute opcodes.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"Given the below implementation for quicksort, what are some optimisations you could add to it?<br><br><pre>def quicksort(li: list) -&gt; list:
    return 
        quicksort([el for el in li[1:] if el &lt; li[0]]) 
        + [li[0]] + 
        quicksort([el for el in li[1:] if el &gt;= li[0]])
    return []
</pre>"	At least three:<br>1. For small lists, use the built-in `sort()`, which is faster.<br>2. Choose the pivot randomly instead of always the front (or back). This avoids the worst-case complexity.<br>3. For large lists that are almost completely sorted, use another algorithm like merge-sort.
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the purpose of Python's `collections.abc` module?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the purpose of Python's `collections.abc` module?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	<div>It provides <a href=""https://docs.python.org/3/glossary.html#term-abstract-base-class"">abstract base classes</a> that
can be used to test whether a class provides a particular interface; for
example, whether it is hashable or whether it is a mapping.</div>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can I type hint a dictionary?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can I type hint a dictionary?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Define a class that subclasses `typing.TypedDict`:<br><br><pre>from typing import TypedDict

class Movie(TypedDict):
    name: str
    year: int

movie: Movie = {'name': 'Blade Runner',
                'year': 1982}
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
Go to definition, if you have CoC installed?	gd
What is an all-reduce operation?	All-reduce usually applies in the context of machine learning parallelism. Multiple GPUs carry out all-reduce by synchronising their minibatch gradients after a backward pass. The GPUs send and receive their gradients until they all have the same sum. Then, the optimiser takes a step and updates all the parameters with the same values.
Why does floating point rounding error matter when it comes to algebraic operations?	"It matters because it invalidates some algebraic properties that apply to integers. For example, associativity doesn't hold:<br><br>

<pre>&gt;&gt;&gt; (.1 + .2) + .3
0.6000000000000001
&gt;&gt;&gt; .1 + (.2 + .3)
0.6
</pre>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Floating-point arithmetic is sometimes odd. For example, in Python:<br>

<pre>&gt;&gt;&gt; 0.1 + 0.2
0.30000000000000004
</pre>
How can you get the exact result for computations such as these using the Python standard library?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Floating-point arithmetic is sometimes odd. For example, in Python:<br>

<pre>&gt;&gt;&gt; 0.1 + 0.2
0.30000000000000004
</pre>
How can you get the exact result for computations such as these using the Python standard library?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use the `decimal` module. You can control the context – including the precision – using `decimal.getcontext()`. You wrap numbers in `decimal.Decimal(number)`, do arithmetic with them, and get them back out at the end.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
What is the time complexity of a naive matrix multiplication? Assume the two matrices are square, of size n.	"It's cubic, since it uses two loops – one over rows, the other over columns –, each of which is doing linear work (the third loop).<br><br><div>
<div>
<div>
<pre><span style=""color: rgb(254, 254, 254);"">for (i = 1; i &lt;= a-&gt;rows; i++) {
        for (j = 1; j &lt;= b-&gt;columns; j++) {</span></pre></div></div><span style=""color: rgb(254, 254, 254);"">
</span><div><span style=""color: rgb(254, 254, 254);"">
</span><div><span style=""color: rgb(254, 254, 254);"">
</span><pre><span style=""color: rgb(254, 254, 254);"">           c-&gt;m[i][j] = 0;
           for (k = 1; k &lt;= b-&gt;rows; k++) {
</span></pre><span style=""color: rgb(254, 254, 254);"">
</span><pre><span style=""color: rgb(254, 254, 254);"">              c-&gt;m[i][j] += a-&gt;m[i][k] * b-&gt;m[k][j];
}
}}</span></pre>
</div>
</div></div>"
What's the height of a tree where each node can have d children and n leaf nodes?	\[h = \log_d n\]<br>
What does operator.itemgetter(k) do?	"It returns a function that operates like the square brackets:<br>
<pre>final = operator.itemgetter(-1)
final(""abcd"") == ""d""
</pre>"
What's the time complexity of finding an item in a dict/hash?	It's&nbsp;<b>constant.</b>
What's the complexity of searching in a&nbsp;<b>set</b>&nbsp;in Python?	It's constant!
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How would you encrypt the contents of a file in Python?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How would you encrypt the contents of a file in Python?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Use the `hashlib` module to import, e.g. MD5, encrypt the file, then output a hex digest:<br><pre>def hash_file(filename: str) -&gt; str:
    from hashlib import md5
    digest = md5()
    try:
        with open(filename) as fileobj:
            for line in fileobj:
                digest.update(bytes(line, encoding=""utf-8""))
        return digest.hexdigest()
    except:
        return """"
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can I use the Python standard library to find all files that match an extension?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How can I use the Python standard library to find all files that match an extension?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	Multiple ways, but perhaps the easiest is:<br>
<pre>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob(""data/*.json"")
['data/9b.json', 'data/9a.json']
</pre>

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between `json.dump` and `json.dumps`? (Or `json.load` and `json.loads`?)
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What is the difference between `json.dump` and `json.dumps`? (Or `json.load` and `json.loads`?)
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	One is ""dump"": write to a file; the other ""dump string"": write to a string.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between __new__ and __init__?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	What's the difference between __new__ and __init__?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	__new__ is the actual constructor – it's a method which creates an object. When you instantiate an object, __new__ runs first, then __init__, then that instance is returned to the caller.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Similarly to LEGB for variable names, how does Python look for attribute names?
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	Similarly to LEGB for variable names, how does Python look for attribute names?
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	""ICPO"": instance, class, parents, `object`.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you distinguish an iterable from an iterator in Python? (Not conceptually; in code.)
	<br>

	

	<script>
    	    var hint = document.getElementById('hint');
    	    hint.addEventListener('touchstart', function() { this.setAttribute('class', 'shown'); });
        hint.addEventListener('mousedown', function() { this.setAttribute('class', 'shown'); });
	</script>

</div>




<!-- ===== QUOTEBOX ===== -->

<script>
	var quoteColor = ""#"";
	for (var i = 0; i < 6; i++) { quoteColor += ""CDEF""[Math.floor(Math.random() * 4)]; }
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor });
</script>


<!-- ===== SPOILERS ===== -->

<script>
	var all = document.querySelectorAll('i, em, [style*=""font-style: italic""]');
	for (var i = 0; i < all.length; i++) {
		all[i].addEventListener('click', function() { this.style.color = ""white""; });
	}
</script>"	"<!-- ===== CARD CONTENT & HINT ===== -->

<div class=""content_aligned"";>

	How do you distinguish an iterable from an iterator in Python? (Not conceptually; in code.)
	<br>

	

	<br>

	<hr style=""height:1px;border-width:0;color:gray;background-color:gray"">	
	<hr style=""height:1px; visibility:hidden;"">
	An iterable implements __iter__ and returns an iterator. An iterator implements __next__, and returns the next element.

	<br>

</div>



<!-- ===== QUOTEBOX ===== -->

<script>
	Array.from(document.getElementsByClassName(""quotebox"")).forEach(element => { element.style.backgroundColor = quoteColor }); 
</script>

<!-- ===== SPOILERS ===== -->

<script>
	document.querySelectorAll('i, em, [style*=""font-style: italic""]').forEach(item => item.style.color = 'white');
</script>"
What are Markov chain Monte-Carlo techniques?	They're techniques for estimating the expectation of a random variable. Generally speaking, you have a transition operator q and an initial sample x. Then, you get x' = q(x), x'' = q(x') and so on.
What's the downside of MCMC techniques?	Each sample is dependent on the sample before it, since it was generated by applying the transition operator to this previous sample. This slows down the estimation process – it simply takes longer to accurately estimate the expectation of the random variable.
Given two distributions, p(x) and q(x), what is the connection between their KL-divergence and entropies?	\[\mathrm{KL}(p || q) = \sum_x p(x)\log \frac{p(x)}{q(x)} = \sum_x p(x)\log p(x) - \sum_x p(x) \log q(x) = \mathbb{H}[p] - \mathbb{H}[p, q]\]<br>In the second form, the first term is the entropy of p(x),&nbsp;\(\mathbb{H}(p)\), and the second is the cross-entropy between the distributions,&nbsp;\(\mathbb{H}(p, q)\).<br>
How is the entropy of a probability distribution&nbsp;\(p(X)\)&nbsp;defined?	\[\mathbb{H}(X) = \mathbb{E}[-\log p(X)] = -\sum_x p(x) \log p(x)\]<br>
How is the cross-entropy between two probability distributions defined?	\[\mathbb{H}(p, q) = -\sum_x p(x) \log q(x)\]<br>
What is conditional independence for three variables?	\(A\)&nbsp;and&nbsp;\(B\)&nbsp;are independent conditional on&nbsp;\(C\)&nbsp;if the following holds:<br>\[P(A, B|C) = P(A|C)P(B|C)\]<br>
What is the information function for a probability distribution&nbsp;\(p(x)\)?	\[h(x) = \log_2p(x)\]<br>
What is the mutual information between two random variables&nbsp;\(X, Y\)?	\[\mathbb{I}[X, Y] = \mathrm{KL}(p(x,y) || p(x)p(y)) \]It is a measure of how different the joint probability is from the product of the marginals of two random variables. In this sense, it's a measure of correlation – but more general than the correlation coefficient and covariance.
What is skewness?	"Skewness is the third central moment of a probability distribution:<br>\[\gamma = \mathbb{E}[X^3]\]<div>It captures the lopsidedness of a distribution:</div>
<ul>
<li>symmetric distributions have&nbsp;\(\gamma  = 0\)</li>
<li>skewed to the left \(\gamma &lt; 0\)&nbsp;(the tail is longer on the left)</li>
<li>skewed to the right&nbsp;\(\gamma &gt; 0\)&nbsp;(the tail is longer on the right)</li></ul>"
What is kurtosis?	"<div>The fourth central moment of a distribution:</div>
<div>\[\kappa = \mathbb{E}[X^4]\]</div><div>Kurtosis is:</div>
<ul>
<li>a measure of the heaviness of the tail of a distribution.</li>
<li>always nonnegative, since it’s the expectation of a fourth power</li>
<li>categorised into:
<ul>
<li>Kurtosis &lt; 3 = platykurtic distributions, which means that they produce fewer and less extreme outliers than the <a href=""https://www.notion.so/normal-Gaussian-distribution-GD-b5b30a99ded54c0b968eafe8d2dc98e0"">normal/Gaussian distribution (GD)</a></li>
<li>Kurtosis &gt; 3 = leptokurtic distributions, which means that the tail asymptotically approaches 0 more slowly than the Gaussian, and so produces more and more extreme outliers than the Gaussian. (For example, <a href=""https://www.notion.so/Laplace-distribution-LD-a4248ddcb9d54eb1b2635137a82e3cf5"">Laplace distribution (LD)</a></li>
</ul>
</li></ul>"
What kind of distribution is the Bernoulli distribution? What do we use it for?	Bernoulli is a distribution for discrete binary variables. We use it to model the probability of outcomes of a binary variable, like a coin toss. (Alternatively, we use it to model sequences of binary variables.)
What is the PMF of the Bernoulli distribution?	Assume that&nbsp;\(X\)&nbsp;is a binary random variable which can take on values 0 and 1. Taking&nbsp;\(\mu = \text{Pr}(X=1)\), the PMF is:<br>\[Pr_X(x|\mu) = \mu^x(1-\mu)^{1-x}\]
What are the mean and variance for the Bernoulli distribution?	They are:<br>\[\mathbb{E}[\mathrm{Ber}(X|\mu)] = \mu\]\[\mathbb{V}[\mathrm{Ber}(X|\mu)]=\mu(1-\mu)\]<br>
What is the binomial distribution? What do we use it for?	It's a distribution that models counts of discrete binary variables. We use it to find out, e.g. what the probability is of k heads out of N coin tosses.
What's the PMF of the binomial distribution?	\[P(X=k) = \begin{pmatrix} n \\ k \end{pmatrix} \mu^k(1-\mu)^{n-k},\ k \in \{1, \dots, n \}.\]<br>This PMF is telling us what the probability is of obtaining&nbsp;\(k\)&nbsp;“positive” outcomes (associated with probability&nbsp;\(\mu\)) out of&nbsp;\(n\)&nbsp;total, e.g.&nbsp;\(k\)&nbsp;heads out of&nbsp;\(n\)&nbsp;tosses.<br>
What are the mean and variance of the binomial distribution?	They are:<br>\[\begin{aligned}\mathbb{E}[X] \equiv \sum_{x=0}^N x \operatorname{Bin}(x \mid N, \mu) &amp;=N \mu \\ \mathbb{V}[X] \equiv \sum_{x=0}^N(x-\mathbb{E}[k])^2 \operatorname{Bin}(x \mid N, \mu) &amp;=N \mu(1-\mu)\end{aligned}\]<br>
What is the categorical distribution? What do we use it for?	The categorical distribution is a generalisation of the Bernoulli distribution for discrete random variables that can take on more than two values. We use it to measure the probability of each outcome&nbsp;\(y_k\)&nbsp;out of&nbsp;\(N\)&nbsp;possible outcomes. (Alternatively, we can model sequences of multi-valued events.)
What is the PMF of the categorical function?	Since the categorical distribution is a generalisation of the Bernoulli distribution, given a random variable&nbsp;\(X\), we have&nbsp;\(P(X=k)=\mu_k\),&nbsp;\(k=1,\dots,n\). Then, the PMF for the categorical distribution is:<br>\[p(x|\pmb \mu) = \prod_{k=1}^N\mu_k^{\mathbb{I}_{[x=k]}}\]<br>
What is the mean of the categorical distribution?	<br>\[\mathbb{E}[X] = \pmb \mu\]<br>
What is the multinomial distribution? What do we use it for? What is its PDF?	<div>The multinomial distribution models counts of multivalued discrete variables. Consider a variable&nbsp;\(X\)&nbsp;with&nbsp;\(c_1, c_2, \dots, C\)&nbsp;possible values. Given&nbsp;\(N\)&nbsp;total samples from this variable, take&nbsp;\(s_c \triangleq \sum_{n=1}^N \mathbb{I}\left(x_n=c\right)\)&nbsp;to be the amount of times class&nbsp;\(c\)&nbsp;was observed. Then:</div><div>\[\mathcal{M}(\boldsymbol{s} \mid N, \boldsymbol{\mu}) \triangleq\left(\begin{array}{c}N \\s_1 \ldots s_C\end{array}\right) \prod_{c=1}^C \mu_c^{s_c}\]where the first term is the multinomial coefficient:</div><div>\[\left(\begin{array}{c}N \\s_1 \cdots s_C\end{array}\right) \triangleq \frac{N !}{s_{1} ! s_{2} ! \cdots s_{C} !}\]<br></div>
Mutual information is a measure of the dependence between two random variables. It's defined as the KL divergence between their joint probability and the products of their marginals. What is one intuition about this definition – in the light of what KL is measuring?	“How much information do we gain if we update from a model that treats the variables as independent to one which models their true joint density?”
Given a binary classification problem, what is its confusion matrix?	"The confusion matrix is a 2x2 matrix that shows true positives, false positives, true negatives, false negatives:<br><div><img src=""paste-979fee941abcefce4cd8845bf52df36421e279d6.jpg""><br></div>"
What is sensitivity/recall in a binary classification problem?	It is the true positive rate given some threshold&nbsp;\(\tau\):<br>\[T P R_\tau=p(\hat{y}=1 \mid y=1, \tau)= \mathcal{R}(\tau)=\frac{T P_\tau}{T P_\tau+F N_\tau}\]<br>
What is the false-positive rate in a binary classification problem?	The FPR is given by:<br>\[F P R_\tau=p(\hat{y}=1 \mid y=0, \tau)=\frac{F P_\tau}{F P_\tau+T N_\tau}\](the number of false positives divided by all negatives – true ones or ones masked as positives.)
What is the receiver operating characteristic (ROC) curve for a binary classification problem?	"It's a plot of the sensitivity (TPR) against the false-positive rate (FPR):<br><img src=""paste-3df1e1473f9da97079cdb46f72e874a384b8a0dd.jpg"">"
How can we summarise the ROC curve into a scalar for a binary classification problem?	We can measure the area under the curve (AUC).
What is precision in the context of a binary classification problem?	Precision is a metric defined only in terms of the positives:<br>\[\mathcal{P}(\tau) \triangleq p(y=1 \mid \hat{y}=1, \tau)=\frac{T P_\tau}{T P_\tau+F P_\tau}\]<br>
What is a precision-recall curve? How can this be summarised?	It's a plot of the precision against recall/sensitivity. We can summarise it using: precision @ K, interpolated precision, average precision and mean average precision.
What is precision @ K?	It's the precision of the first K items recalled.
What is interpolated precision?	It's the maximum precision we can get for some % of recall.
What is average precision?	It's the average of interpolated precisions, and is the area under the interpolated precision-recall curve.
What is mean average precision?	It's the mean of average precisions across multiple precision-recall curves.
What is the F-score?	The F-score is a summary of a precision-recall curve that combines precision&nbsp;\(\mathcal{P}\)&nbsp;and recall&nbsp;\(\mathcal{R}\)&nbsp;and trades them off according to a hyperparameter&nbsp;\(\beta\):<br>\[F_\beta \triangleq\left(1+\beta^2\right) \frac{\mathcal{P} \cdot \mathcal{R}}{\beta^2 \mathcal{P}+\mathcal{R}}=\frac{\left(1+\beta^2\right) T P}{\left(1+\beta^2\right) T P+\beta^2 F N+F P}\]<br>
What is the perplexity of a probability distribution&nbsp;\(p(x)\)?	It's a measure of the predictability of the distribution: given that we've observed the variable, how much do we know about the distribution? It is defined as:<br>\[\text { perplexity }(p) \triangleq 2^{\mathbb{H}(p)}\]where&nbsp;\(\mathbb{H}(p)\)&nbsp;is the entropy of&nbsp;\(p\).
What are some common types of matrix factorisations?	The most commonly used is singular-value decomposition (SVD). Then there is eigenvalue decomposition (EVD), LU factorisation, QR decomposition and Cholesky decomposition.
What kind of matrix can be decomposed using SVD?	Any rectangular matrix, although the singular values are not guaranteed to be reals.
What kind of matrices can we do eigenvalue decomposition (EVD) on?	Only square matrices.
What kind of matrices can we apply LU factorisation to, and what does it look like?	"Only square matrices. We can factorise them into a product of a lower triangular and an upper triangular matrix (potentially after permuting the initial matrix):<br>\[\begin{aligned}
\mathbf{P A} &amp;=\mathbf{L U} \\ \left[\begin{array}{lll}
a_{11} &amp; a_{12} &amp; a_{13} \\
a_{21} &amp; a_{22} &amp; a_{23} \\
a_{31} &amp; a_{32} &amp; a_{33}
\end{array}\right] &amp;=\left[\begin{array}{ccc}
l_{11} &amp; 0 &amp; 0 \\
l_{21} &amp; l_{22} &amp; 0 \\
l_{31} &amp; l_{32} &amp; l_{33}
\end{array}\right]\left[\begin{array}{ccc}
u_{11} &amp; u_{12} &amp; u_{13} \\
0 &amp; u_{22} &amp; u_{23} \\
0 &amp; 0 &amp; u_{33}
\end{array}\right]
\end{aligned}\]<br>"
What is QR-decomposition? What kind of matrices does it apply to?	QR applies to rectangular matrices whose columns are linearly independent. Such matrices can be decomposed into a product of a matrix containing orthonormal columns (Q) and an upper triangular matrix:<br>\[\left(\begin{array}{cccc}\mid &amp; \mid &amp; &amp; \mid \\\boldsymbol{a}_1 &amp; \boldsymbol{a}_2 &amp; \cdots &amp; \boldsymbol{a}_n \\\mid &amp; \mid &amp; &amp; \mid\end{array}\right)=\left(\begin{array}{cccc}\mid &amp; \mid &amp; &amp; \mid \\\boldsymbol{q}_1 &amp; \boldsymbol{q}_2 &amp; \cdots &amp; \boldsymbol{q}_n \\\mid &amp; \mid &amp; &amp; \mid\end{array}\right)\left(\begin{array}{cccc}r_{11} &amp; r_{12} &amp; \cdots &amp; r_{1 n} \\&amp; r_{22} &amp; \cdots &amp; r_{2 n} \\&amp; &amp; \ddots &amp; \\&amp; &amp; &amp; r_{n n}\end{array}\right)\]<br>
What is Cholesky decomposition? What kind of matrix does it apply to?	It applies to symmetric, positive semi-definite matrices, which can be written as:<br>\[\mathbf{A = R^\top R}\]where&nbsp;\(\mathbf{R}\)&nbsp;is upper triangular with real, positive diagonal elements. Alternatively, taking&nbsp;\(\mathbf{L = R}^\top\):<br>\[\mathbf{A = LL^\top}\]<br>
How is the partial derivative of a vector-argument function&nbsp;\(f: \mathbb{R}^n \rightarrow \mathbb{R}\)&nbsp;defined?	\[\frac{\partial f}{\partial x_i}=\lim _{h \rightarrow 0} \frac{f\left(\boldsymbol{x}+h \boldsymbol{e}_i\right)-f(\boldsymbol{x})}{h}\]where&nbsp;\(\boldsymbol{e}_i\)&nbsp;is the i-th unit vector.
What is the gradient of a vector-argument function&nbsp;\(f : \mathbb{R}^n \rightarrow \mathbb{R}\)?	The gradient is the vector of all partial derivatives, denoted:<br>\[\mathbf{g}= \nabla f = \frac{\partial f}{\partial \boldsymbol{x}} = \begin{bmatrix} \frac{\partial f}{\partial x_1} \\ \frac{\partial f}{\partial x_2} \\ \vdots \\ \frac{\partial f}{\partial x_n} \end{bmatrix}\]If we write it as&nbsp;\(\mathbf{g}(\boldsymbol{x}^*)\)&nbsp;we mean that it is evaluated at one vector input.
What is the Jacobian of a&nbsp;<b>vector field</b>? (A vector-argument, vector-valued function&nbsp;\(\boldsymbol f: \mathbb{R}^n \rightarrow \mathbb{R} ^m\))	It is an&nbsp;\(m \times n\)&nbsp;matrix of partial derivatives:<br>\[\mathbf{J}_{\boldsymbol{f}}(\boldsymbol{x})=\frac{\partial \boldsymbol{f}}{\partial \boldsymbol{x}^{\top}} \triangleq\left(\begin{array}{ccc}\frac{\partial f_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial f_1}{\partial x_n} \\\vdots &amp; \ddots &amp; \vdots \\\frac{\partial f_m}{\partial x_1} &amp; \cdots &amp; \frac{\partial f_m}{\partial x_n}\end{array}\right)=\left(\begin{array}{c}\nabla f_1(\boldsymbol{x})^{\top} \\\vdots \\\nabla f_m(\boldsymbol{x})^{\top}\end{array}\right)\]<br>
What is the Hessian of a twice-differentiable vector-argument function?	It's the symmetric,&nbsp;\(n \times n\)&nbsp;matrix of second partial derivatives:<br>\[\mathbf{H}_f=\frac{\partial^2 f}{\partial \boldsymbol{x}^2}=\nabla^2 f=\left(\begin{array}{ccc}\frac{\partial^2 f}{\partial x_1^2} &amp; \cdots &amp; \frac{\partial^2 f}{\partial x_1 \partial x_n} \\&amp; \vdots &amp; \\\frac{\partial^2 f}{\partial x_n \partial x_1} &amp; \cdots &amp; \frac{\partial^2 f}{\partial x_n^2}\end{array}\right)\]<br>
What is the directional derivative of a vector argument function?	It's the change of that function in a particular direction&nbsp;\(\boldsymbol{v}\):<br>\[D_{\boldsymbol{v}} f(\boldsymbol{x})=\lim _{h \rightarrow 0} \frac{f(\boldsymbol{x}+h \boldsymbol{v})-f(\boldsymbol{x})}{h}\]It's also the scalar product of the gradient and the direction vector:<br>\[D_{\boldsymbol{v}} f(\boldsymbol{x})=\nabla f(\boldsymbol{x}) \cdot \boldsymbol{v}\]<br>
What is the PDF of a distribution&nbsp;\(\mathrm{Beta}(\alpha, \beta)\)?	"\[\begin{aligned}
p(\mu \mid \alpha, \beta) &amp; =\frac{\Gamma(\alpha+\beta)}{\Gamma(\alpha) \Gamma(\beta)} \mu^{\alpha-1}(1-\mu)^{\beta-1}
\end{aligned}\]<br>"
What is the special property of the beta distribution relating to the Bernoulli/binomial distribution?	The beta distribution is the conjugate prior for the Bernoulli/binomial distribution, which means that their posterior is also a beta distribution.
What are the mean and variance for the beta distribution?	"\[\begin{aligned}
\mathbb{E}[\mu] &amp; =\frac{\alpha}{\alpha+\beta}, \quad \mathbb{V}[\mu]=\frac{\alpha \beta}{(\alpha+\beta)^2(\alpha+\beta+1)}
\end{aligned}\]<br>"
What's a sufficient statistic for a set of datapoints?	<div>The sufficient statistic of a set of data points&nbsp;\(\mathbf{X}\) conditioned on a parameter&nbsp;\(\theta\)&nbsp; is a function</div>\(T(\mathbf{X})=t\)  if the conditional probability&nbsp;\(P(\mathbf{X}|T(\mathbf{X}))\)&nbsp;does not depend on the parameter&nbsp;\(\theta\).
What is one downside of using MSE as your training loss?	If there are outliers in the data, the squared difference between the predicted and actual value can be very large. This could lead to the model over-correcting on those data-points, and not fitting most of the data-points very well.
What is ridge regression?	It's linear regression with an added penalty on the parameters/coefficients. It's equivalent to L2-regularisation or weight decay:<br>\[\ell (x) = y - (mx + n) + \|m \|_2\]<br>
What are nonparametric techniques? What are their advantages and disadvantages?	They're statistical learning techniques for estimating the relationship between a response variable and one or more predictor variables. They don't assume a functional form for this relationship, as a parametric technique would.<br><br>Their advantage is that they are more flexible; they can express more kinds of relationships. The downside is that they require large amounts of data to accurately estimate this, especially if using high-dimensional data.
What is second order optimisation? What's an example of a technique?	Second-order optimisation techniques use the curvature/second derivative of a function to find a minimum/maximum in addition to its first derivative. An example is the Newton method, which uses the Hessian matrix (the matrix of second partial derivatives).
What is the mental filter cognitive distortion?	It's focussing on the negative aspects of your life, perhaps even a single negative detail. You think about these details repetitively, and these thoughts crowd out thoughts about other, positive things in your life.
"What is ""discounting the positives""?"	It's a cognitive distortion where you mentally say that the positive aspects of your life don't matter much, since e.g. there are many more negative aspects, or the negative ones are more salient etc. A more balanced thought here would be that even when things are difficult, there are always good things happening.
What's the interpretation of precision in a binary classification problem? Think about what the true answer is vs. the estimated answer.	Precision is the probability that the outcome is 1, given that we guess the outcome is 1. So it's&nbsp;\(p(y = 1 | \hat y = 1, \tau)\), which is TP/(TP+FN).&nbsp;
What's lasso regression?	Linear regression with an L1 penalty on the weights.
What is load balancing?	Load balancing is the practice of routing user requests to different servers in a network to optimise their utilisation. Better utilisation leads to faster responses to the user.
What’s the round-robing strategy of load balancing?	It’s simple: distribute requests sequentially among all the servers in your pool. This strategy doesn’t consider server loads.
What is the least-connections load balancing strategy?	Send requests to the servers with fewest active connections.
What is the resource-based load balancing strategy?	This strategy looks at server resource utilisation: how much of the CPU, memory, disk, etc. is being used; how that usage is distributed.<div><br></div><div>You would likely use this in conjunction with other metrics that you care about directly, e.g. system latency. If you have bad latency and your servers are under heavy load at all times, it might make sense to scale out – add more servers.</div>
What does it mean to load balance geographically?	It means that user requests are routed to the server that’s nearest to them geographically, e.g. US-east.
Some load balancing strategies monitor loads; others don’t. For large language model (LLM) inference, what are some specific metrics you might care about?	<b>GPU utilisation:</b>&nbsp;% of time GPU core active, % of memory being used;<div><b>inference latency:</b>&nbsp;time it takes the model to process a single inference request;</div><div><b>throughput:</b>&nbsp;number of inference requests per unit of time;</div><div><b>queue length</b>: how many requests are pending</div>
What is&nbsp;<b>inference latency</b>&nbsp;in an LLM pipeline? How would measure it?	Inference latency refers to the time taken to process one inference request. You can measure this by monitoring distributions of particular latencies: P50, P95, P99.
What is P50 latency? P95? P99?	PXX latency refers to a quantilisation of latency values:<div>- P50 latency := 50% of all queries take less than this value</div><div>- P95 latency := 95% of all queries take less than this</div><div>- P99 latency := 99% of all queries take less than this</div>
Let’s say you’re measuring system latency using P50, P95 and P99. Why would you use all three? Why not just P50?	<div>In short, they’re equivalent to understanding the average- and worst-case performance.</div><div><br></div>P50 means that half of all queries take less than that latency value (e.g. 100ms). However, you might be interested in an upper bound to your latency, for which P99 is more suitable – it tells you that 99% of user queries are under e.g. 500ms. You might then try to improve that worst-case.
What does throughput measure for a LLM system?	It measures the number of inference requests fulfilled per unit of time (e.g. 1,000 queries per second).
Let’s say I have a system set up to do LLM inference at scale. From when I collect user input and send back an output, what happens? What components are in my stack?	- the query is submitted through a <b>front-end interface</b> (e.g. React)<div>- it’s sent to a <b>web server</b> (e.g. Django) through an <b>API</b> call (OpenAPI)</div><div>- which server receives the query is controlled by a <b>load balancing service </b>which distributes them efficiently so no single server is overwhelmed</div><div>- the <b>input text is preprocessed</b>&nbsp;using some code, maybe through a microservice or cloud function (AWS Lambda, GCP function)</div><div>- the processed text is fed as input to language <b>model forward pass</b>; this model is served using an ML framework like TorchServe, TensorFlow or vLLM;</div><div>- the raw output is <b>decoded/postprocessed</b>&nbsp;and sent back through the web server to the user;</div><div><br></div><div>All throughout, monitoring and scaling is being run:</div><div>- <b>Prometheus/Kafka </b>track metrics, <b>Grafana</b>&nbsp;generates visualisations</div><div>- automatic scaling services increase or decrease the number of inference engines and pre-/post-processing microservices run at any given moment</div>
What is autoscaling in the context of serving an LLM as part of a system?	It means that the number of inference engines and of text pre-/post-processing microservices that run at any given moment is controlled by an autoscaling service.
In distributed ML computing, what is <b>offloading</b>?	Offloading is a type of data parallelism where some computations and/or specific parts of an ML model are sent from GPU to CPU.
What’s the advantage of offloading from GPU to CPU?	- you maximise the amount of memory available to you; for example, if a model needs 20GB of memory and your GPU only has 18GB, you may be able to train it with offloading, but without it the model won’t fit on the GPU.<div>- you train or run inference faster, since you have better resource utilisation; (where the CPU would otherwise sit idly, for example)</div>
In distributed ML, what is <b>activation checkpointing</b>?	Activation checkpointing refers to the practice of storing only some of the model activations, and recomputing others on demand, e.g. for backpropagation.&nbsp;<div><br></div><div>This is useful when models get really big and you want to trade-off memory vs. computation. With activation checkpointing, you store less (thus freeing up some of your GPU memory, which might be scarce) at the cost of doing more computation (e.g. using CPU which might otherwise go unused).</div>
Let’s say I want to train a large language model whose weights and activations during a forward pass do not fit just on my GPU. What could I try to make it fit, short of adding more GPUs to my setup?	You could try:&nbsp;<div>- quantisation: reducing the precision of your model weights and activations so that each takes up less space in memory (e.g. go from FP32 to FP16 or FP8).<br><div>- activation checkpointing: store only a subset of activations, recompute the others on demand</div><div>- offloading: send some parts of the model &amp; activations to the CPU to free up your GPU.<div><br></div></div></div>
What is quantisation in relation to training and serving large language models? When and why would you do it?	Quantisation refers to the practice of reducing the precision of floating-point numbers used in ML models, e.g. from single-precision (FP32) to half-precision (FP16).<div><br></div><div>You would do this to train larger models, or to train the same model on GPUs with less memory.</div>
What is mixed-precision training/inference in the context of distributed ML systems? When and why would you use it?	It’s the practice of using tensors&nbsp;(e.g. weights, activations) of mixed precision (e.g. some are FP32, some FP16).&nbsp;<div><br></div><div>The idea is to reduce the memory and computational overhead while minimising any harms to model performance. There are strategies for doing this, since some layers/operations are more sensitive to quantisation than others.</div>
